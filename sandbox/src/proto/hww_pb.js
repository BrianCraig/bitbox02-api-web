// source: hww.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var backup_commands_pb = require('./backup_commands_pb.js');
goog.object.extend(proto, backup_commands_pb);
var bitbox02_system_pb = require('./bitbox02_system_pb.js');
goog.object.extend(proto, bitbox02_system_pb);
var btc_pb = require('./btc_pb.js');
goog.object.extend(proto, btc_pb);
var cardano_pb = require('./cardano_pb.js');
goog.object.extend(proto, cardano_pb);
var eth_pb = require('./eth_pb.js');
goog.object.extend(proto, eth_pb);
var keystore_pb = require('./keystore_pb.js');
goog.object.extend(proto, keystore_pb);
var mnemonic_pb = require('./mnemonic_pb.js');
goog.object.extend(proto, mnemonic_pb);
var system_pb = require('./system_pb.js');
goog.object.extend(proto, system_pb);
var perform_attestation_pb = require('./perform_attestation_pb.js');
goog.object.extend(proto, perform_attestation_pb);
goog.exportSymbol('proto.shiftcrypto.bitbox02.Error', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.Request', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.Request.RequestCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.Response', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.Response.ResponseCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.Success', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.Error.displayName = 'proto.shiftcrypto.bitbox02.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.Success.displayName = 'proto.shiftcrypto.bitbox02.Success';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Request.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.Request.displayName = 'proto.shiftcrypto.bitbox02.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Response.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.Response.displayName = 'proto.shiftcrypto.bitbox02.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.Error}
 */
proto.shiftcrypto.bitbox02.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.Error;
  return proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.Error}
 */
proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.shiftcrypto.bitbox02.Error.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.shiftcrypto.bitbox02.Error} returns this
 */
proto.shiftcrypto.bitbox02.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.shiftcrypto.bitbox02.Error} returns this
 */
proto.shiftcrypto.bitbox02.Error.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Success.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.Success}
 */
proto.shiftcrypto.bitbox02.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.Success;
  return proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.Success}
 */
proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.Request.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.Request.RequestCase = {
  REQUEST_NOT_SET: 0,
  DEVICE_NAME: 2,
  DEVICE_LANGUAGE: 3,
  DEVICE_INFO: 4,
  SET_PASSWORD: 5,
  CREATE_BACKUP: 6,
  SHOW_MNEMONIC: 7,
  BTC_PUB: 8,
  BTC_SIGN_INIT: 9,
  BTC_SIGN_INPUT: 10,
  BTC_SIGN_OUTPUT: 11,
  INSERT_REMOVE_SDCARD: 12,
  CHECK_SDCARD: 13,
  SET_MNEMONIC_PASSPHRASE_ENABLED: 14,
  LIST_BACKUPS: 15,
  RESTORE_BACKUP: 16,
  PERFORM_ATTESTATION: 17,
  REBOOT: 18,
  CHECK_BACKUP: 19,
  ETH: 20,
  RESET: 21,
  RESTORE_FROM_MNEMONIC: 22,
  FINGERPRINT: 24,
  BTC: 25,
  ELECTRUM_ENCRYPTION_KEY: 26,
  CARDANO: 27
};

/**
 * @return {proto.shiftcrypto.bitbox02.Request.RequestCase}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getRequestCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.Request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceName: (f = msg.getDeviceName()) && bitbox02_system_pb.SetDeviceNameRequest.toObject(includeInstance, f),
    deviceLanguage: (f = msg.getDeviceLanguage()) && bitbox02_system_pb.SetDeviceLanguageRequest.toObject(includeInstance, f),
    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoRequest.toObject(includeInstance, f),
    setPassword: (f = msg.getSetPassword()) && bitbox02_system_pb.SetPasswordRequest.toObject(includeInstance, f),
    createBackup: (f = msg.getCreateBackup()) && backup_commands_pb.CreateBackupRequest.toObject(includeInstance, f),
    showMnemonic: (f = msg.getShowMnemonic()) && mnemonic_pb.ShowMnemonicRequest.toObject(includeInstance, f),
    btcPub: (f = msg.getBtcPub()) && btc_pb.BTCPubRequest.toObject(includeInstance, f),
    btcSignInit: (f = msg.getBtcSignInit()) && btc_pb.BTCSignInitRequest.toObject(includeInstance, f),
    btcSignInput: (f = msg.getBtcSignInput()) && btc_pb.BTCSignInputRequest.toObject(includeInstance, f),
    btcSignOutput: (f = msg.getBtcSignOutput()) && btc_pb.BTCSignOutputRequest.toObject(includeInstance, f),
    insertRemoveSdcard: (f = msg.getInsertRemoveSdcard()) && bitbox02_system_pb.InsertRemoveSDCardRequest.toObject(includeInstance, f),
    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardRequest.toObject(includeInstance, f),
    setMnemonicPassphraseEnabled: (f = msg.getSetMnemonicPassphraseEnabled()) && mnemonic_pb.SetMnemonicPassphraseEnabledRequest.toObject(includeInstance, f),
    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsRequest.toObject(includeInstance, f),
    restoreBackup: (f = msg.getRestoreBackup()) && backup_commands_pb.RestoreBackupRequest.toObject(includeInstance, f),
    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationRequest.toObject(includeInstance, f),
    reboot: (f = msg.getReboot()) && system_pb.RebootRequest.toObject(includeInstance, f),
    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupRequest.toObject(includeInstance, f),
    eth: (f = msg.getEth()) && eth_pb.ETHRequest.toObject(includeInstance, f),
    reset: (f = msg.getReset()) && bitbox02_system_pb.ResetRequest.toObject(includeInstance, f),
    restoreFromMnemonic: (f = msg.getRestoreFromMnemonic()) && mnemonic_pb.RestoreFromMnemonicRequest.toObject(includeInstance, f),
    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintRequest.toObject(includeInstance, f),
    btc: (f = msg.getBtc()) && btc_pb.BTCRequest.toObject(includeInstance, f),
    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyRequest.toObject(includeInstance, f),
    cardano: (f = msg.getCardano()) && cardano_pb.CardanoRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.Request}
 */
proto.shiftcrypto.bitbox02.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.Request;
  return proto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.Request}
 */
proto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new bitbox02_system_pb.SetDeviceNameRequest;
      reader.readMessage(value,bitbox02_system_pb.SetDeviceNameRequest.deserializeBinaryFromReader);
      msg.setDeviceName(value);
      break;
    case 3:
      var value = new bitbox02_system_pb.SetDeviceLanguageRequest;
      reader.readMessage(value,bitbox02_system_pb.SetDeviceLanguageRequest.deserializeBinaryFromReader);
      msg.setDeviceLanguage(value);
      break;
    case 4:
      var value = new bitbox02_system_pb.DeviceInfoRequest;
      reader.readMessage(value,bitbox02_system_pb.DeviceInfoRequest.deserializeBinaryFromReader);
      msg.setDeviceInfo(value);
      break;
    case 5:
      var value = new bitbox02_system_pb.SetPasswordRequest;
      reader.readMessage(value,bitbox02_system_pb.SetPasswordRequest.deserializeBinaryFromReader);
      msg.setSetPassword(value);
      break;
    case 6:
      var value = new backup_commands_pb.CreateBackupRequest;
      reader.readMessage(value,backup_commands_pb.CreateBackupRequest.deserializeBinaryFromReader);
      msg.setCreateBackup(value);
      break;
    case 7:
      var value = new mnemonic_pb.ShowMnemonicRequest;
      reader.readMessage(value,mnemonic_pb.ShowMnemonicRequest.deserializeBinaryFromReader);
      msg.setShowMnemonic(value);
      break;
    case 8:
      var value = new btc_pb.BTCPubRequest;
      reader.readMessage(value,btc_pb.BTCPubRequest.deserializeBinaryFromReader);
      msg.setBtcPub(value);
      break;
    case 9:
      var value = new btc_pb.BTCSignInitRequest;
      reader.readMessage(value,btc_pb.BTCSignInitRequest.deserializeBinaryFromReader);
      msg.setBtcSignInit(value);
      break;
    case 10:
      var value = new btc_pb.BTCSignInputRequest;
      reader.readMessage(value,btc_pb.BTCSignInputRequest.deserializeBinaryFromReader);
      msg.setBtcSignInput(value);
      break;
    case 11:
      var value = new btc_pb.BTCSignOutputRequest;
      reader.readMessage(value,btc_pb.BTCSignOutputRequest.deserializeBinaryFromReader);
      msg.setBtcSignOutput(value);
      break;
    case 12:
      var value = new bitbox02_system_pb.InsertRemoveSDCardRequest;
      reader.readMessage(value,bitbox02_system_pb.InsertRemoveSDCardRequest.deserializeBinaryFromReader);
      msg.setInsertRemoveSdcard(value);
      break;
    case 13:
      var value = new bitbox02_system_pb.CheckSDCardRequest;
      reader.readMessage(value,bitbox02_system_pb.CheckSDCardRequest.deserializeBinaryFromReader);
      msg.setCheckSdcard(value);
      break;
    case 14:
      var value = new mnemonic_pb.SetMnemonicPassphraseEnabledRequest;
      reader.readMessage(value,mnemonic_pb.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader);
      msg.setSetMnemonicPassphraseEnabled(value);
      break;
    case 15:
      var value = new backup_commands_pb.ListBackupsRequest;
      reader.readMessage(value,backup_commands_pb.ListBackupsRequest.deserializeBinaryFromReader);
      msg.setListBackups(value);
      break;
    case 16:
      var value = new backup_commands_pb.RestoreBackupRequest;
      reader.readMessage(value,backup_commands_pb.RestoreBackupRequest.deserializeBinaryFromReader);
      msg.setRestoreBackup(value);
      break;
    case 17:
      var value = new perform_attestation_pb.PerformAttestationRequest;
      reader.readMessage(value,perform_attestation_pb.PerformAttestationRequest.deserializeBinaryFromReader);
      msg.setPerformAttestation(value);
      break;
    case 18:
      var value = new system_pb.RebootRequest;
      reader.readMessage(value,system_pb.RebootRequest.deserializeBinaryFromReader);
      msg.setReboot(value);
      break;
    case 19:
      var value = new backup_commands_pb.CheckBackupRequest;
      reader.readMessage(value,backup_commands_pb.CheckBackupRequest.deserializeBinaryFromReader);
      msg.setCheckBackup(value);
      break;
    case 20:
      var value = new eth_pb.ETHRequest;
      reader.readMessage(value,eth_pb.ETHRequest.deserializeBinaryFromReader);
      msg.setEth(value);
      break;
    case 21:
      var value = new bitbox02_system_pb.ResetRequest;
      reader.readMessage(value,bitbox02_system_pb.ResetRequest.deserializeBinaryFromReader);
      msg.setReset(value);
      break;
    case 22:
      var value = new mnemonic_pb.RestoreFromMnemonicRequest;
      reader.readMessage(value,mnemonic_pb.RestoreFromMnemonicRequest.deserializeBinaryFromReader);
      msg.setRestoreFromMnemonic(value);
      break;
    case 24:
      var value = new common_pb.RootFingerprintRequest;
      reader.readMessage(value,common_pb.RootFingerprintRequest.deserializeBinaryFromReader);
      msg.setFingerprint(value);
      break;
    case 25:
      var value = new btc_pb.BTCRequest;
      reader.readMessage(value,btc_pb.BTCRequest.deserializeBinaryFromReader);
      msg.setBtc(value);
      break;
    case 26:
      var value = new keystore_pb.ElectrumEncryptionKeyRequest;
      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader);
      msg.setElectrumEncryptionKey(value);
      break;
    case 27:
      var value = new cardano_pb.CardanoRequest;
      reader.readMessage(value,cardano_pb.CardanoRequest.deserializeBinaryFromReader);
      msg.setCardano(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bitbox02_system_pb.SetDeviceNameRequest.serializeBinaryToWriter
    );
  }
  f = message.getDeviceLanguage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      bitbox02_system_pb.SetDeviceLanguageRequest.serializeBinaryToWriter
    );
  }
  f = message.getDeviceInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      bitbox02_system_pb.DeviceInfoRequest.serializeBinaryToWriter
    );
  }
  f = message.getSetPassword();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      bitbox02_system_pb.SetPasswordRequest.serializeBinaryToWriter
    );
  }
  f = message.getCreateBackup();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      backup_commands_pb.CreateBackupRequest.serializeBinaryToWriter
    );
  }
  f = message.getShowMnemonic();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      mnemonic_pb.ShowMnemonicRequest.serializeBinaryToWriter
    );
  }
  f = message.getBtcPub();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      btc_pb.BTCPubRequest.serializeBinaryToWriter
    );
  }
  f = message.getBtcSignInit();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      btc_pb.BTCSignInitRequest.serializeBinaryToWriter
    );
  }
  f = message.getBtcSignInput();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      btc_pb.BTCSignInputRequest.serializeBinaryToWriter
    );
  }
  f = message.getBtcSignOutput();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      btc_pb.BTCSignOutputRequest.serializeBinaryToWriter
    );
  }
  f = message.getInsertRemoveSdcard();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      bitbox02_system_pb.InsertRemoveSDCardRequest.serializeBinaryToWriter
    );
  }
  f = message.getCheckSdcard();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      bitbox02_system_pb.CheckSDCardRequest.serializeBinaryToWriter
    );
  }
  f = message.getSetMnemonicPassphraseEnabled();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      mnemonic_pb.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter
    );
  }
  f = message.getListBackups();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      backup_commands_pb.ListBackupsRequest.serializeBinaryToWriter
    );
  }
  f = message.getRestoreBackup();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      backup_commands_pb.RestoreBackupRequest.serializeBinaryToWriter
    );
  }
  f = message.getPerformAttestation();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      perform_attestation_pb.PerformAttestationRequest.serializeBinaryToWriter
    );
  }
  f = message.getReboot();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      system_pb.RebootRequest.serializeBinaryToWriter
    );
  }
  f = message.getCheckBackup();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      backup_commands_pb.CheckBackupRequest.serializeBinaryToWriter
    );
  }
  f = message.getEth();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      eth_pb.ETHRequest.serializeBinaryToWriter
    );
  }
  f = message.getReset();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      bitbox02_system_pb.ResetRequest.serializeBinaryToWriter
    );
  }
  f = message.getRestoreFromMnemonic();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      mnemonic_pb.RestoreFromMnemonicRequest.serializeBinaryToWriter
    );
  }
  f = message.getFingerprint();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      common_pb.RootFingerprintRequest.serializeBinaryToWriter
    );
  }
  f = message.getBtc();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      btc_pb.BTCRequest.serializeBinaryToWriter
    );
  }
  f = message.getElectrumEncryptionKey();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      keystore_pb.ElectrumEncryptionKeyRequest.serializeBinaryToWriter
    );
  }
  f = message.getCardano();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      cardano_pb.CardanoRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetDeviceNameRequest device_name = 2;
 * @return {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getDeviceName = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceNameRequest} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceNameRequest, 2));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setDeviceName = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearDeviceName = function() {
  return this.setDeviceName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasDeviceName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SetDeviceLanguageRequest device_language = 3;
 * @return {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getDeviceLanguage = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceLanguageRequest, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setDeviceLanguage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearDeviceLanguage = function() {
  return this.setDeviceLanguage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasDeviceLanguage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeviceInfoRequest device_info = 4;
 * @return {?proto.shiftcrypto.bitbox02.DeviceInfoRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getDeviceInfo = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoRequest} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoRequest, 4));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.DeviceInfoRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setDeviceInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearDeviceInfo = function() {
  return this.setDeviceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasDeviceInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetPasswordRequest set_password = 5;
 * @return {?proto.shiftcrypto.bitbox02.SetPasswordRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getSetPassword = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.SetPasswordRequest} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetPasswordRequest, 5));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.SetPasswordRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setSetPassword = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearSetPassword = function() {
  return this.setSetPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasSetPassword = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CreateBackupRequest create_backup = 6;
 * @return {?proto.shiftcrypto.bitbox02.CreateBackupRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getCreateBackup = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CreateBackupRequest} */ (
    jspb.Message.getWrapperField(this, backup_commands_pb.CreateBackupRequest, 6));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CreateBackupRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setCreateBackup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearCreateBackup = function() {
  return this.setCreateBackup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasCreateBackup = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ShowMnemonicRequest show_mnemonic = 7;
 * @return {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getShowMnemonic = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ShowMnemonicRequest} */ (
    jspb.Message.getWrapperField(this, mnemonic_pb.ShowMnemonicRequest, 7));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setShowMnemonic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearShowMnemonic = function() {
  return this.setShowMnemonic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasShowMnemonic = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BTCPubRequest btc_pub = 8;
 * @return {?proto.shiftcrypto.bitbox02.BTCPubRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getBtcPub = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.BTCPubRequest} */ (
    jspb.Message.getWrapperField(this, btc_pb.BTCPubRequest, 8));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.BTCPubRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setBtcPub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearBtcPub = function() {
  return this.setBtcPub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasBtcPub = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional BTCSignInitRequest btc_sign_init = 9;
 * @return {?proto.shiftcrypto.bitbox02.BTCSignInitRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInit = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInitRequest} */ (
    jspb.Message.getWrapperField(this, btc_pb.BTCSignInitRequest, 9));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.BTCSignInitRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInit = function() {
  return this.setBtcSignInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInit = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional BTCSignInputRequest btc_sign_input = 10;
 * @return {?proto.shiftcrypto.bitbox02.BTCSignInputRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInput = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInputRequest} */ (
    jspb.Message.getWrapperField(this, btc_pb.BTCSignInputRequest, 10));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.BTCSignInputRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInput = function() {
  return this.setBtcSignInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInput = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BTCSignOutputRequest btc_sign_output = 11;
 * @return {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getBtcSignOutput = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignOutputRequest} */ (
    jspb.Message.getWrapperField(this, btc_pb.BTCSignOutputRequest, 11));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setBtcSignOutput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignOutput = function() {
  return this.setBtcSignOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignOutput = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional InsertRemoveSDCardRequest insert_remove_sdcard = 12;
 * @return {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getInsertRemoveSdcard = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.InsertRemoveSDCardRequest, 12));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setInsertRemoveSdcard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearInsertRemoveSdcard = function() {
  return this.setInsertRemoveSdcard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasInsertRemoveSdcard = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CheckSDCardRequest check_sdcard = 13;
 * @return {?proto.shiftcrypto.bitbox02.CheckSDCardRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getCheckSdcard = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardRequest} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardRequest, 13));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CheckSDCardRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setCheckSdcard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearCheckSdcard = function() {
  return this.setCheckSdcard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasCheckSdcard = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SetMnemonicPassphraseEnabledRequest set_mnemonic_passphrase_enabled = 14;
 * @return {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getSetMnemonicPassphraseEnabled = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} */ (
    jspb.Message.getWrapperField(this, mnemonic_pb.SetMnemonicPassphraseEnabledRequest, 14));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setSetMnemonicPassphraseEnabled = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearSetMnemonicPassphraseEnabled = function() {
  return this.setSetMnemonicPassphraseEnabled(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasSetMnemonicPassphraseEnabled = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ListBackupsRequest list_backups = 15;
 * @return {?proto.shiftcrypto.bitbox02.ListBackupsRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getListBackups = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsRequest} */ (
    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsRequest, 15));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ListBackupsRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setListBackups = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearListBackups = function() {
  return this.setListBackups(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasListBackups = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RestoreBackupRequest restore_backup = 16;
 * @return {?proto.shiftcrypto.bitbox02.RestoreBackupRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getRestoreBackup = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.RestoreBackupRequest} */ (
    jspb.Message.getWrapperField(this, backup_commands_pb.RestoreBackupRequest, 16));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.RestoreBackupRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setRestoreBackup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearRestoreBackup = function() {
  return this.setRestoreBackup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasRestoreBackup = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional PerformAttestationRequest perform_attestation = 17;
 * @return {?proto.shiftcrypto.bitbox02.PerformAttestationRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getPerformAttestation = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationRequest} */ (
    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationRequest, 17));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.PerformAttestationRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setPerformAttestation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearPerformAttestation = function() {
  return this.setPerformAttestation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasPerformAttestation = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RebootRequest reboot = 18;
 * @return {?proto.shiftcrypto.bitbox02.RebootRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getReboot = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.RebootRequest} */ (
    jspb.Message.getWrapperField(this, system_pb.RebootRequest, 18));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.RebootRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setReboot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearReboot = function() {
  return this.setReboot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasReboot = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CheckBackupRequest check_backup = 19;
 * @return {?proto.shiftcrypto.bitbox02.CheckBackupRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getCheckBackup = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupRequest} */ (
    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupRequest, 19));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CheckBackupRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setCheckBackup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearCheckBackup = function() {
  return this.setCheckBackup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasCheckBackup = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ETHRequest eth = 20;
 * @return {?proto.shiftcrypto.bitbox02.ETHRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getEth = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ETHRequest} */ (
    jspb.Message.getWrapperField(this, eth_pb.ETHRequest, 20));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ETHRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setEth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearEth = function() {
  return this.setEth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasEth = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ResetRequest reset = 21;
 * @return {?proto.shiftcrypto.bitbox02.ResetRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getReset = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ResetRequest} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.ResetRequest, 21));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ResetRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setReset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearReset = function() {
  return this.setReset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasReset = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional RestoreFromMnemonicRequest restore_from_mnemonic = 22;
 * @return {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getRestoreFromMnemonic = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} */ (
    jspb.Message.getWrapperField(this, mnemonic_pb.RestoreFromMnemonicRequest, 22));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setRestoreFromMnemonic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearRestoreFromMnemonic = function() {
  return this.setRestoreFromMnemonic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasRestoreFromMnemonic = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional RootFingerprintRequest fingerprint = 24;
 * @return {?proto.shiftcrypto.bitbox02.RootFingerprintRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getFingerprint = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintRequest} */ (
    jspb.Message.getWrapperField(this, common_pb.RootFingerprintRequest, 24));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.RootFingerprintRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setFingerprint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearFingerprint = function() {
  return this.setFingerprint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional BTCRequest btc = 25;
 * @return {?proto.shiftcrypto.bitbox02.BTCRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getBtc = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.BTCRequest} */ (
    jspb.Message.getWrapperField(this, btc_pb.BTCRequest, 25));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.BTCRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setBtc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearBtc = function() {
  return this.setBtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasBtc = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional ElectrumEncryptionKeyRequest electrum_encryption_key = 26;
 * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getElectrumEncryptionKey = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} */ (
    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyRequest, 26));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setElectrumEncryptionKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearElectrumEncryptionKey = function() {
  return this.setElectrumEncryptionKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasElectrumEncryptionKey = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional CardanoRequest cardano = 27;
 * @return {?proto.shiftcrypto.bitbox02.CardanoRequest}
 */
proto.shiftcrypto.bitbox02.Request.prototype.getCardano = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoRequest} */ (
    jspb.Message.getWrapperField(this, cardano_pb.CardanoRequest, 27));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
*/
proto.shiftcrypto.bitbox02.Request.prototype.setCardano = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Request} returns this
 */
proto.shiftcrypto.bitbox02.Request.prototype.clearCardano = function() {
  return this.setCardano(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Request.prototype.hasCardano = function() {
  return jspb.Message.getField(this, 27) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.Response.oneofGroups_ = [[1,2,4,5,6,7,8,9,10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.Response.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  SUCCESS: 1,
  ERROR: 2,
  DEVICE_INFO: 4,
  PUB: 5,
  BTC_SIGN_NEXT: 6,
  LIST_BACKUPS: 7,
  CHECK_BACKUP: 8,
  PERFORM_ATTESTATION: 9,
  CHECK_SDCARD: 10,
  ETH: 11,
  FINGERPRINT: 12,
  BTC: 13,
  ELECTRUM_ENCRYPTION_KEY: 14,
  CARDANO: 15
};

/**
 * @return {proto.shiftcrypto.bitbox02.Response.ResponseCase}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getResponseCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.Response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.shiftcrypto.bitbox02.Success.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.shiftcrypto.bitbox02.Error.toObject(includeInstance, f),
    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoResponse.toObject(includeInstance, f),
    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),
    btcSignNext: (f = msg.getBtcSignNext()) && btc_pb.BTCSignNextResponse.toObject(includeInstance, f),
    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsResponse.toObject(includeInstance, f),
    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupResponse.toObject(includeInstance, f),
    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationResponse.toObject(includeInstance, f),
    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardResponse.toObject(includeInstance, f),
    eth: (f = msg.getEth()) && eth_pb.ETHResponse.toObject(includeInstance, f),
    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintResponse.toObject(includeInstance, f),
    btc: (f = msg.getBtc()) && btc_pb.BTCResponse.toObject(includeInstance, f),
    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyResponse.toObject(includeInstance, f),
    cardano: (f = msg.getCardano()) && cardano_pb.CardanoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.Response}
 */
proto.shiftcrypto.bitbox02.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.Response;
  return proto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.Response}
 */
proto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shiftcrypto.bitbox02.Success;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.shiftcrypto.bitbox02.Error;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new bitbox02_system_pb.DeviceInfoResponse;
      reader.readMessage(value,bitbox02_system_pb.DeviceInfoResponse.deserializeBinaryFromReader);
      msg.setDeviceInfo(value);
      break;
    case 5:
      var value = new common_pb.PubResponse;
      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);
      msg.setPub(value);
      break;
    case 6:
      var value = new btc_pb.BTCSignNextResponse;
      reader.readMessage(value,btc_pb.BTCSignNextResponse.deserializeBinaryFromReader);
      msg.setBtcSignNext(value);
      break;
    case 7:
      var value = new backup_commands_pb.ListBackupsResponse;
      reader.readMessage(value,backup_commands_pb.ListBackupsResponse.deserializeBinaryFromReader);
      msg.setListBackups(value);
      break;
    case 8:
      var value = new backup_commands_pb.CheckBackupResponse;
      reader.readMessage(value,backup_commands_pb.CheckBackupResponse.deserializeBinaryFromReader);
      msg.setCheckBackup(value);
      break;
    case 9:
      var value = new perform_attestation_pb.PerformAttestationResponse;
      reader.readMessage(value,perform_attestation_pb.PerformAttestationResponse.deserializeBinaryFromReader);
      msg.setPerformAttestation(value);
      break;
    case 10:
      var value = new bitbox02_system_pb.CheckSDCardResponse;
      reader.readMessage(value,bitbox02_system_pb.CheckSDCardResponse.deserializeBinaryFromReader);
      msg.setCheckSdcard(value);
      break;
    case 11:
      var value = new eth_pb.ETHResponse;
      reader.readMessage(value,eth_pb.ETHResponse.deserializeBinaryFromReader);
      msg.setEth(value);
      break;
    case 12:
      var value = new common_pb.RootFingerprintResponse;
      reader.readMessage(value,common_pb.RootFingerprintResponse.deserializeBinaryFromReader);
      msg.setFingerprint(value);
      break;
    case 13:
      var value = new btc_pb.BTCResponse;
      reader.readMessage(value,btc_pb.BTCResponse.deserializeBinaryFromReader);
      msg.setBtc(value);
      break;
    case 14:
      var value = new keystore_pb.ElectrumEncryptionKeyResponse;
      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader);
      msg.setElectrumEncryptionKey(value);
      break;
    case 15:
      var value = new cardano_pb.CardanoResponse;
      reader.readMessage(value,cardano_pb.CardanoResponse.deserializeBinaryFromReader);
      msg.setCardano(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter
    );
  }
  f = message.getDeviceInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      bitbox02_system_pb.DeviceInfoResponse.serializeBinaryToWriter
    );
  }
  f = message.getPub();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.PubResponse.serializeBinaryToWriter
    );
  }
  f = message.getBtcSignNext();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      btc_pb.BTCSignNextResponse.serializeBinaryToWriter
    );
  }
  f = message.getListBackups();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      backup_commands_pb.ListBackupsResponse.serializeBinaryToWriter
    );
  }
  f = message.getCheckBackup();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      backup_commands_pb.CheckBackupResponse.serializeBinaryToWriter
    );
  }
  f = message.getPerformAttestation();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      perform_attestation_pb.PerformAttestationResponse.serializeBinaryToWriter
    );
  }
  f = message.getCheckSdcard();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      bitbox02_system_pb.CheckSDCardResponse.serializeBinaryToWriter
    );
  }
  f = message.getEth();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      eth_pb.ETHResponse.serializeBinaryToWriter
    );
  }
  f = message.getFingerprint();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      common_pb.RootFingerprintResponse.serializeBinaryToWriter
    );
  }
  f = message.getBtc();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      btc_pb.BTCResponse.serializeBinaryToWriter
    );
  }
  f = message.getElectrumEncryptionKey();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      keystore_pb.ElectrumEncryptionKeyResponse.serializeBinaryToWriter
    );
  }
  f = message.getCardano();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      cardano_pb.CardanoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional Success success = 1;
 * @return {?proto.shiftcrypto.bitbox02.Success}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getSuccess = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.Success} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Success, 1));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.Success|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.shiftcrypto.bitbox02.Error}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getError = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.Error} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Error, 2));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.Error|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeviceInfoResponse device_info = 4;
 * @return {?proto.shiftcrypto.bitbox02.DeviceInfoResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getDeviceInfo = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoResponse} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoResponse, 4));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.DeviceInfoResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setDeviceInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearDeviceInfo = function() {
  return this.setDeviceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasDeviceInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PubResponse pub = 5;
 * @return {?proto.shiftcrypto.bitbox02.PubResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getPub = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.PubResponse, 5));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setPub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearPub = function() {
  return this.setPub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasPub = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BTCSignNextResponse btc_sign_next = 6;
 * @return {?proto.shiftcrypto.bitbox02.BTCSignNextResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getBtcSignNext = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignNextResponse} */ (
    jspb.Message.getWrapperField(this, btc_pb.BTCSignNextResponse, 6));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.BTCSignNextResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setBtcSignNext = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearBtcSignNext = function() {
  return this.setBtcSignNext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasBtcSignNext = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ListBackupsResponse list_backups = 7;
 * @return {?proto.shiftcrypto.bitbox02.ListBackupsResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getListBackups = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsResponse} */ (
    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsResponse, 7));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ListBackupsResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setListBackups = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearListBackups = function() {
  return this.setListBackups(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasListBackups = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CheckBackupResponse check_backup = 8;
 * @return {?proto.shiftcrypto.bitbox02.CheckBackupResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getCheckBackup = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupResponse} */ (
    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupResponse, 8));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CheckBackupResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setCheckBackup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearCheckBackup = function() {
  return this.setCheckBackup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasCheckBackup = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PerformAttestationResponse perform_attestation = 9;
 * @return {?proto.shiftcrypto.bitbox02.PerformAttestationResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getPerformAttestation = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationResponse} */ (
    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationResponse, 9));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.PerformAttestationResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setPerformAttestation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearPerformAttestation = function() {
  return this.setPerformAttestation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasPerformAttestation = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CheckSDCardResponse check_sdcard = 10;
 * @return {?proto.shiftcrypto.bitbox02.CheckSDCardResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getCheckSdcard = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardResponse} */ (
    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardResponse, 10));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CheckSDCardResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setCheckSdcard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearCheckSdcard = function() {
  return this.setCheckSdcard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasCheckSdcard = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ETHResponse eth = 11;
 * @return {?proto.shiftcrypto.bitbox02.ETHResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getEth = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ETHResponse} */ (
    jspb.Message.getWrapperField(this, eth_pb.ETHResponse, 11));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ETHResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setEth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearEth = function() {
  return this.setEth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasEth = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RootFingerprintResponse fingerprint = 12;
 * @return {?proto.shiftcrypto.bitbox02.RootFingerprintResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getFingerprint = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.RootFingerprintResponse, 12));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.RootFingerprintResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setFingerprint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearFingerprint = function() {
  return this.setFingerprint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional BTCResponse btc = 13;
 * @return {?proto.shiftcrypto.bitbox02.BTCResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getBtc = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.BTCResponse} */ (
    jspb.Message.getWrapperField(this, btc_pb.BTCResponse, 13));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.BTCResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setBtc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearBtc = function() {
  return this.setBtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasBtc = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ElectrumEncryptionKeyResponse electrum_encryption_key = 14;
 * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getElectrumEncryptionKey = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} */ (
    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyResponse, 14));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setElectrumEncryptionKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearElectrumEncryptionKey = function() {
  return this.setElectrumEncryptionKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasElectrumEncryptionKey = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional CardanoResponse cardano = 15;
 * @return {?proto.shiftcrypto.bitbox02.CardanoResponse}
 */
proto.shiftcrypto.bitbox02.Response.prototype.getCardano = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoResponse} */ (
    jspb.Message.getWrapperField(this, cardano_pb.CardanoResponse, 15));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
*/
proto.shiftcrypto.bitbox02.Response.prototype.setCardano = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.Response} returns this
 */
proto.shiftcrypto.bitbox02.Response.prototype.clearCardano = function() {
  return this.setCardano(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.Response.prototype.hasCardano = function() {
  return jspb.Message.getField(this, 15) != null;
};


goog.object.extend(exports, proto.shiftcrypto.bitbox02);
