// source: cardano.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoAddressRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoNetwork', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoScriptConfig.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoAddressRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoAddressRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.CardanoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.CardanoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.CardanoResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keypathsList: jspb.Message.toObjectList(msg.getKeypathsList(),
    common_pb.Keypath.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;
  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Keypath;
      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);
      msg.addKeypaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Keypath.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Keypath keypaths = 1;
 * @return {!Array<!proto.shiftcrypto.bitbox02.Keypath>}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.getKeypathsList = function() {
  return /** @type{!Array<!proto.shiftcrypto.bitbox02.Keypath>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Keypath, 1));
};


/**
 * @param {!Array<!proto.shiftcrypto.bitbox02.Keypath>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.setKeypathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.shiftcrypto.bitbox02.Keypath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.Keypath}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.addKeypaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.Keypath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.clearKeypathsList = function() {
  return this.setKeypathsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpubsList: msg.getXpubsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;
  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addXpubs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpubsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes xpubs = 1;
 * @return {!Array<string>}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes xpubs = 1;
 * This is a type-conversion wrapper around `getXpubsList()`
 * @return {!Array<string>}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getXpubsList()));
};


/**
 * repeated bytes xpubs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getXpubsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getXpubsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.setXpubsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.addXpubs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this
 */
proto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.clearXpubsList = function() {
  return this.setXpubsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase = {
  CONFIG_NOT_SET: 0,
  PKH_SKH: 1
};

/**
 * @return {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getConfigCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkhSkh: (f = msg.getPkhSkh()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;
  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader);
      msg.setPkhSkh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkhSkh();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject = function(includeInstance, msg) {
  var f, obj = {
    keypathPaymentList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    keypathStakeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;
  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypathPayment(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypathStake(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypathPaymentList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getKeypathStakeList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * repeated uint32 keypath_payment = 1;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathPaymentList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathPaymentList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathPayment = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathPaymentList = function() {
  return this.setKeypathPaymentList([]);
};


/**
 * repeated uint32 keypath_stake = 2;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathStakeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathStakeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathStake = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathStakeList = function() {
  return this.setKeypathStakeList([]);
};


/**
 * optional PkhSkh pkh_skh = 1;
 * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getPkhSkh = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, 1));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this
*/
proto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.setPkhSkh = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.clearPkhSkh = function() {
  return this.setPkhSkh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.hasPkhSkh = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    display: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;
  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    case 3:
      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);
      msg.setScriptConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDisplay();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getScriptConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional CardanoNetwork network = 1;
 * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getNetwork = function() {
  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool display = 2;
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setDisplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional CardanoScriptConfig script_config = 3;
 * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getScriptConfig = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setScriptConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.clearScriptConfig = function() {
  return this.setScriptConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.hasScriptConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_ = [2,3,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject, includeInstance),
    fee: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 5, 0),
    certificatesList: jspb.Message.toObjectList(msg.getCertificatesList(),
    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject, includeInstance),
    withdrawalsList: jspb.Message.toObjectList(msg.getWithdrawalsList(),
    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject, includeInstance),
    validityIntervalStart: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 2:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 3:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTtl(value);
      break;
    case 6:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader);
      msg.addCertificates(value);
      break;
    case 7:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader);
      msg.addWithdrawals(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidityIntervalStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter
    );
  }
  f = message.getValidityIntervalStart();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    prevOutHash: msg.getPrevOutHash_asB64(),
    prevOutIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypath(values[i]);
      }
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevOutHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrevOutIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getPrevOutHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrevOutIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated uint32 keypath = 1;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getKeypathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setKeypathList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.addKeypath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.clearKeypathList = function() {
  return this.setKeypathList([]);
};


/**
 * optional bytes prev_out_hash = 2;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prev_out_hash = 2;
 * This is a type-conversion wrapper around `getPrevOutHash()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevOutHash()));
};


/**
 * optional bytes prev_out_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevOutHash()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevOutHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 prev_out_index = 3;
 * @return {number}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    encodedAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncodedAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);
      msg.setScriptConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncodedAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getScriptConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string encoded_address = 1;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getEncodedAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setEncodedAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 value = 2;
 * @return {number}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CardanoScriptConfig script_config = 3;
 * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getScriptConfig = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setScriptConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.clearScriptConfig = function() {
  return this.setScriptConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.hasScriptConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase = {
  CERT_NOT_SET: 0,
  STAKE_REGISTRATION: 1,
  STAKE_DEREGISTRATION: 2,
  STAKE_DELEGATION: 3
};

/**
 * @return {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getCertCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    stakeRegistration: (f = msg.getStakeRegistration()) && common_pb.Keypath.toObject(includeInstance, f),
    stakeDeregistration: (f = msg.getStakeDeregistration()) && common_pb.Keypath.toObject(includeInstance, f),
    stakeDelegation: (f = msg.getStakeDelegation()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Keypath;
      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);
      msg.setStakeRegistration(value);
      break;
    case 2:
      var value = new common_pb.Keypath;
      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);
      msg.setStakeDeregistration(value);
      break;
    case 3:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader);
      msg.setStakeDelegation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStakeRegistration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Keypath.serializeBinaryToWriter
    );
  }
  f = message.getStakeDeregistration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Keypath.serializeBinaryToWriter
    );
  }
  f = message.getStakeDelegation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject = function(includeInstance, msg) {
  var f, obj = {
    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    poolKeyhash: msg.getPoolKeyhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypath(values[i]);
      }
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoolKeyhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getPoolKeyhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated uint32 keypath = 1;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getKeypathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setKeypathList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.addKeypath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.clearKeypathList = function() {
  return this.setKeypathList([]);
};


/**
 * optional bytes pool_keyhash = 2;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pool_keyhash = 2;
 * This is a type-conversion wrapper around `getPoolKeyhash()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPoolKeyhash()));
};


/**
 * optional bytes pool_keyhash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPoolKeyhash()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPoolKeyhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setPoolKeyhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Keypath stake_registration = 1;
 * @return {?proto.shiftcrypto.bitbox02.Keypath}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeRegistration = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (
    jspb.Message.getWrapperField(this, common_pb.Keypath, 1));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeRegistration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeRegistration = function() {
  return this.setStakeRegistration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeRegistration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Keypath stake_deregistration = 2;
 * @return {?proto.shiftcrypto.bitbox02.Keypath}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDeregistration = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (
    jspb.Message.getWrapperField(this, common_pb.Keypath, 2));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDeregistration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDeregistration = function() {
  return this.setStakeDeregistration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDeregistration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StakeDelegation stake_delegation = 3;
 * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDelegation = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDelegation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDelegation = function() {
  return this.setStakeDelegation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDelegation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject = function(includeInstance, msg) {
  var f, obj = {
    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypath(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated uint32 keypath = 1;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getKeypathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setKeypathList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.addKeypath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.clearKeypathList = function() {
  return this.setKeypathList([]);
};


/**
 * optional uint64 value = 2;
 * @return {number}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CardanoNetwork network = 1;
 * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getNetwork = function() {
  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Input inputs = 2;
 * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, 2));
};


/**
 * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated Output outputs = 3;
 * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, 3));
};


/**
 * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional uint64 fee = 4;
 * @return {number}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ttl = 5;
 * @return {number}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Certificate certificates = 6;
 * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getCertificatesList = function() {
  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, 6));
};


/**
 * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setCertificatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addCertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearCertificatesList = function() {
  return this.setCertificatesList([]);
};


/**
 * repeated Withdrawal withdrawals = 7;
 * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getWithdrawalsList = function() {
  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, 7));
};


/**
 * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setWithdrawalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addWithdrawals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearWithdrawalsList = function() {
  return this.setWithdrawalsList([]);
};


/**
 * optional uint64 validity_interval_start = 8;
 * @return {number}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getValidityIntervalStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setValidityIntervalStart = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    shelleyWitnessesList: jspb.Message.toObjectList(msg.getShelleyWitnessesList(),
    proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader);
      msg.addShelleyWitnesses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShelleyWitnessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;
  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated ShelleyWitness shelley_witnesses = 1;
 * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.getShelleyWitnessesList = function() {
  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, 1));
};


/**
 * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this
*/
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.setShelleyWitnessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.addShelleyWitnesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this
 */
proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.clearShelleyWitnessesList = function() {
  return this.setShelleyWitnessesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  XPUBS: 1,
  ADDRESS: 2,
  SIGN_TRANSACTION: 3
};

/**
 * @return {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.getRequestCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(includeInstance, f),
    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoRequest;
  return proto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader);
      msg.setXpubs(value);
      break;
    case 2:
      var value = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 3:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader);
      msg.setSignTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpubs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter
    );
  }
  f = message.getSignTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional CardanoXpubsRequest xpubs = 1;
 * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.getXpubs = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsRequest} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsRequest, 1));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.setXpubs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearXpubs = function() {
  return this.setXpubs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasXpubs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CardanoAddressRequest address = 2;
 * @return {?proto.shiftcrypto.bitbox02.CardanoAddressRequest}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.getAddress = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoAddressRequest} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoAddressRequest, 2));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoAddressRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.setAddress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CardanoSignTransactionRequest sign_transaction = 3;
 * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.getSignTransaction = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this
*/
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.setSignTransaction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearSignTransaction = function() {
  return this.setSignTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasSignTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  XPUBS: 1,
  PUB: 2,
  SIGN_TRANSACTION: 3
};

/**
 * @return {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.getResponseCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.CardanoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(includeInstance, f),
    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),
    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.CardanoResponse;
  return proto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader);
      msg.setXpubs(value);
      break;
    case 2:
      var value = new common_pb.PubResponse;
      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);
      msg.setPub(value);
      break;
    case 3:
      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader);
      msg.setSignTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpubs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter
    );
  }
  f = message.getPub();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.PubResponse.serializeBinaryToWriter
    );
  }
  f = message.getSignTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional CardanoXpubsResponse xpubs = 1;
 * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.getXpubs = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsResponse} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsResponse, 1));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this
*/
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.setXpubs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearXpubs = function() {
  return this.setXpubs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasXpubs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PubResponse pub = 2;
 * @return {?proto.shiftcrypto.bitbox02.PubResponse}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.getPub = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.PubResponse, 2));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this
*/
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.setPub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearPub = function() {
  return this.setPub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasPub = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CardanoSignTransactionResponse sign_transaction = 3;
 * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.getSignTransaction = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this
*/
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.setSignTransaction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearSignTransaction = function() {
  return this.setSignTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasSignTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.CardanoNetwork = {
  CARDANOMAINNET: 0,
  CARDANOTESTNET: 1
};

goog.object.extend(exports, proto.shiftcrypto.bitbox02);
