// source: eth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var antiklepto_pb = require('./antiklepto_pb.js');
goog.object.extend(proto, antiklepto_pb);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHCoin', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest.RequestCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignMessageRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignRequest', null, global);
goog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.ETHPubRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.ETHPubRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.ETHPubRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHPubRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.ETHSignRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.ETHSignRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.ETHSignRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.ETHSignMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.ETHSignResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shiftcrypto.bitbox02.ETHSignResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.ETHSignResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHSignResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.ETHRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.ETHRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.ETHRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shiftcrypto.bitbox02.ETHResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_);
};
goog.inherits(proto.shiftcrypto.bitbox02.ETHResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shiftcrypto.bitbox02.ETHResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    coin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outputType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    display: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    contractAddress: msg.getContractAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.ETHPubRequest;
  return proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypath(values[i]);
      }
      break;
    case 2:
      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());
      msg.setCoin(value);
      break;
    case 3:
      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getCoin();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOutputType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDisplay();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType = {
  ADDRESS: 0,
  XPUB: 1
};

/**
 * repeated uint32 keypath = 1;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getKeypathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setKeypathList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.addKeypath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.clearKeypathList = function() {
  return this.setKeypathList([]);
};


/**
 * optional ETHCoin coin = 2;
 * @return {!proto.shiftcrypto.bitbox02.ETHCoin}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getCoin = function() {
  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setCoin = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional OutputType output_type = 3;
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getOutputType = function() {
  return /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} value
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setOutputType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool display = 4;
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setDisplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bytes contract_address = 5;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes contract_address = 5;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractAddress()));
};


/**
 * optional bytes contract_address = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setContractAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    nonce: msg.getNonce_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    gasLimit: msg.getGasLimit_asB64(),
    recipient: msg.getRecipient_asB64(),
    value: msg.getValue_asB64(),
    data: msg.getData_asB64(),
    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.ETHSignRequest;
  return proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());
      msg.setCoin(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypath(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasLimit(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipient(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 9:
      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;
      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);
      msg.setHostNonceCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeypathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasLimit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getRecipient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getHostNonceCommitment();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter
    );
  }
};


/**
 * optional ETHCoin coin = 1;
 * @return {!proto.shiftcrypto.bitbox02.ETHCoin}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getCoin = function() {
  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setCoin = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated uint32 keypath = 2;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getKeypathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setKeypathList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.addKeypath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearKeypathList = function() {
  return this.setKeypathList([]);
};


/**
 * optional bytes nonce = 3;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes nonce = 3;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes gas_price = 4;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes gas_price = 4;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes gas_limit = 5;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes gas_limit = 5;
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasLimit()));
};


/**
 * optional bytes gas_limit = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasLimit()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasLimit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes recipient = 6;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes recipient = 6;
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipient()));
};


/**
 * optional bytes recipient = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes value = 7;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes value = 7;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes data = 8;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes data = 8;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 9;
 * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getHostNonceCommitment = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (
    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 9));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
*/
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setHostNonceCommitment = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearHostNonceCommitment = function() {
  return this.setHostNonceCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHSignRequest.prototype.hasHostNonceCommitment = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    msg: msg.getMsg_asB64(),
    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;
  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());
      msg.setCoin(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKeypath(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    case 4:
      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;
      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);
      msg.setHostNonceCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeypathList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getHostNonceCommitment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter
    );
  }
};


/**
 * optional ETHCoin coin = 1;
 * @return {!proto.shiftcrypto.bitbox02.ETHCoin}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getCoin = function() {
  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setCoin = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated uint32 keypath = 2;
 * @return {!Array<number>}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getKeypathList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setKeypathList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.addKeypath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearKeypathList = function() {
  return this.setKeypathList([]);
};


/**
 * optional bytes msg = 3;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes msg = 3;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 4;
 * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getHostNonceCommitment = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (
    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 4));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this
*/
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setHostNonceCommitment = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearHostNonceCommitment = function() {
  return this.setHostNonceCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.hasHostNonceCommitment = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.ETHSignResponse;
  return proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse} returns this
 */
proto.shiftcrypto.bitbox02.ETHSignResponse.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.ETHRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  PUB: 1,
  SIGN: 2,
  SIGN_MSG: 3,
  ANTIKLEPTO_SIGNATURE: 4
};

/**
 * @return {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.getRequestCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.ETHRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pub: (f = msg.getPub()) && proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(includeInstance, f),
    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(includeInstance, f),
    signMsg: (f = msg.getSignMsg()) && proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(includeInstance, f),
    antikleptoSignature: (f = msg.getAntikleptoSignature()) && antiklepto_pb.AntiKleptoSignatureRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest}
 */
proto.shiftcrypto.bitbox02.ETHRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.ETHRequest;
  return proto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest}
 */
proto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shiftcrypto.bitbox02.ETHPubRequest;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader);
      msg.setPub(value);
      break;
    case 2:
      var value = new proto.shiftcrypto.bitbox02.ETHSignRequest;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader);
      msg.setSign(value);
      break;
    case 3:
      var value = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader);
      msg.setSignMsg(value);
      break;
    case 4:
      var value = new antiklepto_pb.AntiKleptoSignatureRequest;
      reader.readMessage(value,antiklepto_pb.AntiKleptoSignatureRequest.deserializeBinaryFromReader);
      msg.setAntikleptoSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.ETHRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPub();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter
    );
  }
  f = message.getSign();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter
    );
  }
  f = message.getSignMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter
    );
  }
  f = message.getAntikleptoSignature();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      antiklepto_pb.AntiKleptoSignatureRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ETHPubRequest pub = 1;
 * @return {?proto.shiftcrypto.bitbox02.ETHPubRequest}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.getPub = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ETHPubRequest} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHPubRequest, 1));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ETHPubRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
*/
proto.shiftcrypto.bitbox02.ETHRequest.prototype.setPub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.clearPub = function() {
  return this.setPub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.hasPub = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ETHSignRequest sign = 2;
 * @return {?proto.shiftcrypto.bitbox02.ETHSignRequest}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.getSign = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignRequest} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignRequest, 2));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ETHSignRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
*/
proto.shiftcrypto.bitbox02.ETHRequest.prototype.setSign = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSign = function() {
  return this.setSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSign = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ETHSignMessageRequest sign_msg = 3;
 * @return {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.getSignMsg = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignMessageRequest} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignMessageRequest, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
*/
proto.shiftcrypto.bitbox02.ETHRequest.prototype.setSignMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSignMsg = function() {
  return this.setSignMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSignMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AntiKleptoSignatureRequest antiklepto_signature = 4;
 * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.getAntikleptoSignature = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} */ (
    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignatureRequest, 4));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
*/
proto.shiftcrypto.bitbox02.ETHRequest.prototype.setAntikleptoSignature = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.clearAntikleptoSignature = function() {
  return this.setAntikleptoSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHRequest.prototype.hasAntikleptoSignature = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  PUB: 1,
  SIGN: 2,
  ANTIKLEPTO_SIGNER_COMMITMENT: 3
};

/**
 * @return {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.getResponseCase = function() {
  return /** @type {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.shiftcrypto.bitbox02.ETHResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),
    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(includeInstance, f),
    antikleptoSignerCommitment: (f = msg.getAntikleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse}
 */
proto.shiftcrypto.bitbox02.ETHResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shiftcrypto.bitbox02.ETHResponse;
  return proto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse}
 */
proto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.PubResponse;
      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);
      msg.setPub(value);
      break;
    case 2:
      var value = new proto.shiftcrypto.bitbox02.ETHSignResponse;
      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader);
      msg.setSign(value);
      break;
    case 3:
      var value = new antiklepto_pb.AntiKleptoSignerCommitment;
      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);
      msg.setAntikleptoSignerCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shiftcrypto.bitbox02.ETHResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPub();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.PubResponse.serializeBinaryToWriter
    );
  }
  f = message.getSign();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter
    );
  }
  f = message.getAntikleptoSignerCommitment();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter
    );
  }
};


/**
 * optional PubResponse pub = 1;
 * @return {?proto.shiftcrypto.bitbox02.PubResponse}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.getPub = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.PubResponse, 1));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this
*/
proto.shiftcrypto.bitbox02.ETHResponse.prototype.setPub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.clearPub = function() {
  return this.setPub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.hasPub = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ETHSignResponse sign = 2;
 * @return {?proto.shiftcrypto.bitbox02.ETHSignResponse}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.getSign = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignResponse} */ (
    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignResponse, 2));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.ETHSignResponse|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this
*/
proto.shiftcrypto.bitbox02.ETHResponse.prototype.setSign = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.clearSign = function() {
  return this.setSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.hasSign = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AntiKleptoSignerCommitment antiklepto_signer_commitment = 3;
 * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.getAntikleptoSignerCommitment = function() {
  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (
    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 3));
};


/**
 * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this
*/
proto.shiftcrypto.bitbox02.ETHResponse.prototype.setAntikleptoSignerCommitment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.clearAntikleptoSignerCommitment = function() {
  return this.setAntikleptoSignerCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shiftcrypto.bitbox02.ETHResponse.prototype.hasAntikleptoSignerCommitment = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.shiftcrypto.bitbox02.ETHCoin = {
  ETH: 0,
  ROPSTENETH: 1,
  RINKEBYETH: 2
};

goog.object.extend(exports, proto.shiftcrypto.bitbox02);
