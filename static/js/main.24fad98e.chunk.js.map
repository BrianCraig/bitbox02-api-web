{"version":3,"sources":["proto/mnemonic_pb.js","proto/system_pb.js","proto/perform_attestation_pb.js","api/utils.ts","api/handshake.ts","api/messages.ts","api/uh2Frame.ts","api/errors.ts","api/device.ts","context/contexts.tsx","utils/hooks.ts","views/ConnectingView.tsx","App.tsx","reportWebVitals.ts","index.tsx","proto/eth_pb.js","proto/common_pb.js","proto/hww_pb.js","proto/antiklepto_pb.js","proto/backup_commands_pb.js","proto/bitbox02_system_pb.js","proto/btc_pb.js","proto/cardano_pb.js","proto/keystore_pb.js"],"names":["jspb","require","goog","global","this","window","self","Function","call","exportSymbol","proto","shiftcrypto","bitbox02","ShowMnemonicRequest","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","RestoreFromMnemonicRequest","SetMnemonicPassphraseEnabledRequest","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","obj","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","timestamp","getFieldWithDefault","timezoneOffset","value","readUint32","setTimestamp","readInt32","setTimezoneOffset","f","undefined","getTimestamp","writeUint32","getTimezoneOffset","writeInt32","setProto3IntField","enabled","getBooleanFieldWithDefault","readBool","setEnabled","getEnabled","writeBool","setProto3BooleanField","object","extend","exports","RebootRequest","purpose","readEnum","setPurpose","getPurpose","writeEnum","Purpose","UPGRADE","SETTINGS","setProto3EnumField","PerformAttestationRequest","PerformAttestationResponse","challenge","getChallenge_asB64","readBytes","setChallenge","getChallenge_asU8","length","writeBytes","getChallenge","bytesAsB64","bytesAsU8","setProto3BytesField","bootloaderHash","getBootloaderHash_asB64","devicePubkey","getDevicePubkey_asB64","certificate","getCertificate_asB64","rootPubkeyIdentifier","getRootPubkeyIdentifier_asB64","challengeSignature","getChallengeSignature_asB64","setBootloaderHash","setDevicePubkey","setCertificate","setRootPubkeyIdentifier","setChallengeSignature","getBootloaderHash_asU8","getDevicePubkey_asU8","getCertificate_asU8","getRootPubkeyIdentifier_asU8","getChallengeSignature_asU8","getBootloaderHash","getDevicePubkey","getCertificate","getRootPubkeyIdentifier","getChallengeSignature","add","accumulator","a","u8join","params","size","map","e","reduce","uint8","Uint8Array","pos","arr","set","HARDENED","getKeypathFromString","keypathString","levels","toLowerCase","split","Error","slice","level","hardened","substring","x","parseInt","isNaN","Rust","fakeAttestation","from","unlock","cleanYourHandsBeforeHandshake","inHandshake","device","send","info","attestation","unlocked","handshake","r","Noise","new","init","write","response","read","share","deviceStatus","encrypted","deviceAcceptedPairing","crypto","encrypt","data","out","decrypt","infoRequest","textDecoder","TextDecoder","infoDigest","vLength","vString","decode","versions","match","parseFloat","version","major","minor","patch","platformId","editionId","infoQuery","channel","sizeToPackets","Math","ceil","headerInfo","packets","bytesToPackages","Array","keys","totalToWrite","offset","i","packet","fill","maxLengthToWrite","writeOf","min","subarray","DataView","Uint16Array","buffer","getUint8","packagesToBytes","frame","start","BitBoxError","id","NotCompatibleBrowser","DevicePairingRejected","DeviceExternallyClosed","NoDeviceSelected","DeviceClosedByApp","sleep","ms","Promise","resolve","setTimeout","retryPacket","showCode","withOp","withoutOp","ethPublic","req","ETHPubRequest","setCoin","ETHCoin","ETH","setKeypathList","setDisplay","setOutputType","OutputType","ADDRESS","setContractAddress","wr","ETHRequest","setPub","wr2","Request","setEth","resp","Response","connect","onInfo","onClose","navigator","hid","requestDevice","filters","vendorId","HIDs","HID","opened","open","listenDisconnects","event","Object","is","target","removeEventListener","addEventListener","performance","now","sent","opCode","query","waitFrames","console","log","forEach","sendReport","prom","resolver","rejected","allPackets","oninputreport","then","catch","push","receivedData","time","toFixed","received","DOMException","defineProperty","get","newValue","enumerable","configurable","enc","close","eth","DeviceContext","createContext","DeviceContextProvider","children","useState","setInfo","asyncFunction","immediate","status","setStatus","setValue","error","setError","execute","useCallback","useEffect","useAsync","deviceConnect","Provider","connected","connecting","ConnectingBadges","useContext","direction","justify","variant","colorScheme","boxSize","as","UnlockIcon","LockIcon","ViewOffIcon","ViewIcon","ConnectingState","color","rounded","padding","backgroundColor","spacing","CheckIcon","TimeIcon","ConnectingView","App","h","maxWidth","width","margin","onClick","isLoading","loadingText","disabled","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","common_pb","antiklepto_pb","repeatedFields_","ETHSignRequest","ETHSignMessageRequest","ETHSignResponse","oneofGroups_","ETHResponse","keypathList","getRepeatedField","coin","outputType","display","contractAddress","getContractAddress_asB64","values","isDelimited","readPackedUint32","addKeypath","getKeypathList","writePackedUint32","getCoin","getOutputType","getDisplay","getContractAddress_asU8","XPUB","setField","opt_index","addToRepeatedField","clearKeypathList","getContractAddress","nonce","getNonce_asB64","gasPrice","getGasPrice_asB64","gasLimit","getGasLimit_asB64","recipient","getRecipient_asB64","getValue_asB64","getData_asB64","hostNonceCommitment","getHostNonceCommitment","AntiKleptoHostNonceCommitment","setNonce","setGasPrice","setGasLimit","setRecipient","setData","readMessage","setHostNonceCommitment","getNonce_asU8","getGasPrice_asU8","getGasLimit_asU8","getRecipient_asU8","getValue_asU8","getData_asU8","writeMessage","getNonce","getGasPrice","getGasLimit","getRecipient","getValue","getData","getWrapperField","setWrapperField","clearHostNonceCommitment","hasHostNonceCommitment","getField","getMsg_asB64","setMsg","getMsg_asU8","getMsg","signature","getSignature_asB64","setSignature","getSignature_asU8","getSignature","RequestCase","REQUEST_NOT_SET","PUB","SIGN","SIGN_MSG","ANTIKLEPTO_SIGNATURE","getRequestCase","computeOneofCase","pub","getPub","sign","getSign","signMsg","getSignMsg","antikleptoSignature","getAntikleptoSignature","AntiKleptoSignatureRequest","setSign","setSignMsg","setAntikleptoSignature","setOneofWrapperField","clearPub","hasPub","clearSign","hasSign","clearSignMsg","hasSignMsg","clearAntikleptoSignature","hasAntikleptoSignature","ResponseCase","RESPONSE_NOT_SET","ANTIKLEPTO_SIGNER_COMMITMENT","getResponseCase","PubResponse","antikleptoSignerCommitment","getAntikleptoSignerCommitment","AntiKleptoSignerCommitment","setAntikleptoSignerCommitment","clearAntikleptoSignerCommitment","hasAntikleptoSignerCommitment","ROPSTENETH","RINKEBYETH","RootFingerprintRequest","RootFingerprintResponse","XPub","Keypath","readString","writeString","setProto3StringField","fingerprint","getFingerprint_asB64","setFingerprint","getFingerprint_asU8","getFingerprint","depth","getDepth_asB64","parentFingerprint","getParentFingerprint_asB64","childNum","chainCode","getChainCode_asB64","publicKey","getPublicKey_asB64","setDepth","setParentFingerprint","setChildNum","setChainCode","setPublicKey","getDepth_asU8","getParentFingerprint_asU8","getChildNum","getChainCode_asU8","getPublicKey_asU8","getDepth","getParentFingerprint","getChainCode","getPublicKey","backup_commands_pb","bitbox02_system_pb","btc_pb","cardano_pb","eth_pb","keystore_pb","mnemonic_pb","system_pb","perform_attestation_pb","Success","code","setCode","setMessage","getCode","getMessage","DEVICE_NAME","DEVICE_LANGUAGE","DEVICE_INFO","SET_PASSWORD","CREATE_BACKUP","SHOW_MNEMONIC","BTC_PUB","BTC_SIGN_INIT","BTC_SIGN_INPUT","BTC_SIGN_OUTPUT","INSERT_REMOVE_SDCARD","CHECK_SDCARD","SET_MNEMONIC_PASSPHRASE_ENABLED","LIST_BACKUPS","RESTORE_BACKUP","PERFORM_ATTESTATION","REBOOT","CHECK_BACKUP","RESET","RESTORE_FROM_MNEMONIC","FINGERPRINT","BTC","ELECTRUM_ENCRYPTION_KEY","CARDANO","deviceName","getDeviceName","SetDeviceNameRequest","deviceLanguage","getDeviceLanguage","SetDeviceLanguageRequest","deviceInfo","getDeviceInfo","DeviceInfoRequest","setPassword","getSetPassword","SetPasswordRequest","createBackup","getCreateBackup","CreateBackupRequest","showMnemonic","getShowMnemonic","btcPub","getBtcPub","BTCPubRequest","btcSignInit","getBtcSignInit","BTCSignInitRequest","btcSignInput","getBtcSignInput","BTCSignInputRequest","btcSignOutput","getBtcSignOutput","BTCSignOutputRequest","insertRemoveSdcard","getInsertRemoveSdcard","InsertRemoveSDCardRequest","checkSdcard","getCheckSdcard","CheckSDCardRequest","setMnemonicPassphraseEnabled","getSetMnemonicPassphraseEnabled","listBackups","getListBackups","ListBackupsRequest","restoreBackup","getRestoreBackup","RestoreBackupRequest","performAttestation","getPerformAttestation","reboot","getReboot","checkBackup","getCheckBackup","CheckBackupRequest","getEth","reset","getReset","ResetRequest","restoreFromMnemonic","getRestoreFromMnemonic","btc","getBtc","BTCRequest","electrumEncryptionKey","getElectrumEncryptionKey","ElectrumEncryptionKeyRequest","cardano","getCardano","CardanoRequest","setDeviceName","setDeviceLanguage","setDeviceInfo","setSetPassword","setCreateBackup","setShowMnemonic","setBtcPub","setBtcSignInit","setBtcSignInput","setBtcSignOutput","setInsertRemoveSdcard","setCheckSdcard","setSetMnemonicPassphraseEnabled","setListBackups","setRestoreBackup","setPerformAttestation","setReboot","setCheckBackup","setReset","setRestoreFromMnemonic","setBtc","setElectrumEncryptionKey","setCardano","clearDeviceName","hasDeviceName","clearDeviceLanguage","hasDeviceLanguage","clearDeviceInfo","hasDeviceInfo","clearSetPassword","hasSetPassword","clearCreateBackup","hasCreateBackup","clearShowMnemonic","hasShowMnemonic","clearBtcPub","hasBtcPub","clearBtcSignInit","hasBtcSignInit","clearBtcSignInput","hasBtcSignInput","clearBtcSignOutput","hasBtcSignOutput","clearInsertRemoveSdcard","hasInsertRemoveSdcard","clearCheckSdcard","hasCheckSdcard","clearSetMnemonicPassphraseEnabled","hasSetMnemonicPassphraseEnabled","clearListBackups","hasListBackups","clearRestoreBackup","hasRestoreBackup","clearPerformAttestation","hasPerformAttestation","clearReboot","hasReboot","clearCheckBackup","hasCheckBackup","clearEth","hasEth","clearReset","hasReset","clearRestoreFromMnemonic","hasRestoreFromMnemonic","clearFingerprint","hasFingerprint","clearBtc","hasBtc","clearElectrumEncryptionKey","hasElectrumEncryptionKey","clearCardano","hasCardano","SUCCESS","ERROR","BTC_SIGN_NEXT","success","getSuccess","getError","DeviceInfoResponse","btcSignNext","getBtcSignNext","BTCSignNextResponse","ListBackupsResponse","CheckBackupResponse","CheckSDCardResponse","BTCResponse","ElectrumEncryptionKeyResponse","CardanoResponse","setSuccess","setBtcSignNext","clearSuccess","hasSuccess","clearError","hasError","clearBtcSignNext","hasBtcSignNext","commitment","getCommitment_asB64","setCommitment","getCommitment_asU8","getCommitment","hostNonce","getHostNonce_asB64","setHostNonce","getHostNonce_asU8","getHostNonce","BackupInfo","silent","setSilent","getSilent","setId","getId","name","setName","getName","infoList","toObjectList","getInfoList","addInfo","writeRepeatedMessage","getRepeatedWrapperField","setInfoList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearInfoList","inserted","setInserted","getInserted","initialized","mnemonicPassphraseEnabled","monotonicIncrementsRemaining","securechipModel","setInitialized","setVersion","setMonotonicIncrementsRemaining","setSecurechipModel","getInitialized","getVersion","getMnemonicPassphraseEnabled","getMonotonicIncrementsRemaining","getSecurechipModel","action","setAction","getAction","SDCardAction","REMOVE_CARD","INSERT_CARD","language","setLanguage","getLanguage","entropy","getEntropy_asB64","setEntropy","getEntropy_asU8","getEntropy","BTCScriptConfig","Multisig","BTCScriptConfigWithKeypath","BTCScriptConfigRegistration","BTCSuccess","BTCIsScriptConfigRegisteredRequest","BTCIsScriptConfigRegisteredResponse","BTCRegisterScriptConfigRequest","BTCPrevTxInitRequest","BTCPrevTxInputRequest","BTCPrevTxOutputRequest","BTCSignMessageRequest","BTCSignMessageResponse","ConfigCase","CONFIG_NOT_SET","SIMPLE_TYPE","MULTISIG","getConfigCase","simpleType","multisig","getMultisig","setSimpleType","setMultisig","SimpleType","P2WPKH_P2SH","P2WPKH","threshold","xpubsList","getXpubsList","ourXpubIndex","scriptType","setThreshold","addXpubs","setOurXpubIndex","setScriptType","getThreshold","getOurXpubIndex","getScriptType","ScriptType","P2WSH","P2WSH_P2SH","setXpubsList","clearXpubsList","getSimpleType","setOneofField","clearSimpleType","hasSimpleType","clearMultisig","hasMultisig","OutputCase","OUTPUT_NOT_SET","XPUB_TYPE","SCRIPT_CONFIG","getOutputCase","xpubType","scriptConfig","getScriptConfig","setXpubType","setScriptConfig","XPubType","TPUB","YPUB","ZPUB","VPUB","UPUB","CAPITAL_VPUB","CAPITAL_ZPUB","CAPITAL_UPUB","CAPITAL_YPUB","getXpubType","clearXpubType","hasXpubType","clearScriptConfig","hasScriptConfig","scriptConfigsList","getScriptConfigsList","numInputs","numOutputs","locktime","addScriptConfigs","setNumInputs","setNumOutputs","setLocktime","getNumInputs","getNumOutputs","getLocktime","setScriptConfigsList","clearScriptConfigsList","type","index","hasSignature","prevIndex","antiKleptoSignerCommitment","getAntiKleptoSignerCommitment","setType","setIndex","setHasSignature","setPrevIndex","setAntiKleptoSignerCommitment","getType","getIndex","getHasSignature","getPrevIndex","Type","INPUT","OUTPUT","DONE","PREVTX_INIT","PREVTX_INPUT","PREVTX_OUTPUT","HOST_NONCE","clearAntiKleptoSignerCommitment","hasAntiKleptoSignerCommitment","prevouthash","getPrevouthash_asB64","prevoutindex","prevoutvalue","sequence","scriptConfigIndex","setPrevouthash","setPrevoutindex","readUint64","setPrevoutvalue","setSequence","setScriptConfigIndex","getPrevouthash_asU8","getPrevoutindex","getPrevoutvalue","writeUint64","getSequence","getScriptConfigIndex","getPrevouthash","ours","hash","getHash_asB64","setOurs","setHash","getOurs","getHash_asU8","getHash","registration","getRegistration","setRegistration","clearRegistration","hasRegistration","isRegistered","setIsRegistered","getIsRegistered","AUTO_ELECTRUM","AUTO_XPUB_TPUB","prevOutHash","getPrevOutHash_asB64","prevOutIndex","signatureScript","getSignatureScript_asB64","setPrevOutHash","setPrevOutIndex","setSignatureScript","getPrevOutHash_asU8","getPrevOutIndex","getSignatureScript_asU8","getPrevOutHash","getSignatureScript","pubkeyScript","getPubkeyScript_asB64","setPubkeyScript","getPubkeyScript_asU8","getPubkeyScript","IS_SCRIPT_CONFIG_REGISTERED","REGISTER_SCRIPT_CONFIG","SIGN_MESSAGE","isScriptConfigRegistered","getIsScriptConfigRegistered","registerScriptConfig","getRegisterScriptConfig","prevtxInit","getPrevtxInit","prevtxInput","getPrevtxInput","prevtxOutput","getPrevtxOutput","signMessage","getSignMessage","setIsScriptConfigRegistered","setRegisterScriptConfig","setPrevtxInit","setPrevtxInput","setPrevtxOutput","setSignMessage","clearIsScriptConfigRegistered","hasIsScriptConfigRegistered","clearRegisterScriptConfig","hasRegisterScriptConfig","clearPrevtxInit","hasPrevtxInit","clearPrevtxInput","hasPrevtxInput","clearPrevtxOutput","hasPrevtxOutput","clearSignMessage","hasSignMessage","SIGN_NEXT","signNext","getSignNext","setSignNext","clearSignNext","hasSignNext","BTCCoin","TBTC","LTC","TLTC","BTCOutputType","UNKNOWN","P2PKH","P2SH","CardanoXpubsRequest","CardanoXpubsResponse","CardanoScriptConfig","PkhSkh","CardanoAddressRequest","CardanoSignTransactionRequest","Input","Output","Certificate","StakeDelegation","Withdrawal","CardanoSignTransactionResponse","ShelleyWitness","keypathsList","getKeypathsList","addKeypaths","setKeypathsList","clearKeypathsList","getXpubsList_asB64","getXpubsList_asU8","writeRepeatedBytes","bytesListAsB64","bytesListAsU8","PKH_SKH","pkhSkh","getPkhSkh","setPkhSkh","keypathPaymentList","keypathStakeList","addKeypathPayment","addKeypathStake","getKeypathPaymentList","getKeypathStakeList","setKeypathPaymentList","clearKeypathPaymentList","setKeypathStakeList","clearKeypathStakeList","clearPkhSkh","hasPkhSkh","network","setNetwork","getNetwork","inputsList","getInputsList","outputsList","getOutputsList","fee","ttl","certificatesList","getCertificatesList","withdrawalsList","getWithdrawalsList","validityIntervalStart","addInputs","addOutputs","setFee","setTtl","addCertificates","addWithdrawals","setValidityIntervalStart","getFee","getTtl","getValidityIntervalStart","encodedAddress","setEncodedAddress","getEncodedAddress","CertCase","CERT_NOT_SET","STAKE_REGISTRATION","STAKE_DEREGISTRATION","STAKE_DELEGATION","getCertCase","stakeRegistration","getStakeRegistration","stakeDeregistration","getStakeDeregistration","stakeDelegation","getStakeDelegation","setStakeRegistration","setStakeDeregistration","setStakeDelegation","poolKeyhash","getPoolKeyhash_asB64","setPoolKeyhash","getPoolKeyhash_asU8","getPoolKeyhash","clearStakeRegistration","hasStakeRegistration","clearStakeDeregistration","hasStakeDeregistration","clearStakeDelegation","hasStakeDelegation","setInputsList","clearInputsList","setOutputsList","clearOutputsList","setCertificatesList","clearCertificatesList","setWithdrawalsList","clearWithdrawalsList","shelleyWitnessesList","getShelleyWitnessesList","addShelleyWitnesses","setShelleyWitnessesList","clearShelleyWitnessesList","XPUBS","SIGN_TRANSACTION","xpubs","getXpubs","address","getAddress","signTransaction","getSignTransaction","setXpubs","setAddress","setSignTransaction","clearXpubs","hasXpubs","clearAddress","hasAddress","clearSignTransaction","hasSignTransaction","CardanoNetwork","CARDANOMAINNET","CARDANOTESTNET","key","setKey","getKey"],"mappings":"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","file":"static/js/main.24fad98e.chunk.js","sourcesContent":["// source: mnemonic.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ShowMnemonicRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ShowMnemonicRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ShowMnemonicRequest.displayName = 'proto.shiftcrypto.bitbox02.ShowMnemonicRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.displayName = 'proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.displayName = 'proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ShowMnemonicRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ShowMnemonicRequest;\n  return proto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ShowMnemonicRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest;\n  return proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 timestamp = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest;\n  return proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setEnabled(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEnabled();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool enabled = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.getEnabled = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.setEnabled = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: system.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RebootRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RebootRequest.Purpose', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RebootRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RebootRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RebootRequest.displayName = 'proto.shiftcrypto.bitbox02.RebootRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RebootRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RebootRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    purpose: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RebootRequest;\n  return proto.shiftcrypto.bitbox02.RebootRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} */ (reader.readEnum());\n      msg.setPurpose(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RebootRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RebootRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPurpose();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.Purpose = {\n  UPGRADE: 0,\n  SETTINGS: 1\n};\n\n/**\n * optional Purpose purpose = 1;\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.getPurpose = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} value\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.setPurpose = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: perform_attestation.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PerformAttestationRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PerformAttestationResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PerformAttestationRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PerformAttestationRequest.displayName = 'proto.shiftcrypto.bitbox02.PerformAttestationRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PerformAttestationResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PerformAttestationResponse.displayName = 'proto.shiftcrypto.bitbox02.PerformAttestationResponse';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PerformAttestationRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    challenge: msg.getChallenge_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PerformAttestationRequest;\n  return proto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChallenge(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PerformAttestationRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getChallenge_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes challenge = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes challenge = 1;\n * This is a type-conversion wrapper around `getChallenge()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChallenge()));\n};\n\n\n/**\n * optional bytes challenge = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChallenge()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChallenge()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.setChallenge = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PerformAttestationResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    bootloaderHash: msg.getBootloaderHash_asB64(),\n    devicePubkey: msg.getDevicePubkey_asB64(),\n    certificate: msg.getCertificate_asB64(),\n    rootPubkeyIdentifier: msg.getRootPubkeyIdentifier_asB64(),\n    challengeSignature: msg.getChallengeSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PerformAttestationResponse;\n  return proto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBootloaderHash(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDevicePubkey(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCertificate(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRootPubkeyIdentifier(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChallengeSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PerformAttestationResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getBootloaderHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getDevicePubkey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getCertificate_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getRootPubkeyIdentifier_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getChallengeSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * This is a type-conversion wrapper around `getBootloaderHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBootloaderHash()));\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBootloaderHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBootloaderHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setBootloaderHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * This is a type-conversion wrapper around `getDevicePubkey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDevicePubkey()));\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDevicePubkey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDevicePubkey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setDevicePubkey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes certificate = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes certificate = 3;\n * This is a type-conversion wrapper around `getCertificate()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCertificate()));\n};\n\n\n/**\n * optional bytes certificate = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCertificate()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCertificate()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setCertificate = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * This is a type-conversion wrapper around `getRootPubkeyIdentifier()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRootPubkeyIdentifier()));\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRootPubkeyIdentifier()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRootPubkeyIdentifier()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setRootPubkeyIdentifier = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * This is a type-conversion wrapper around `getChallengeSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChallengeSignature()));\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChallengeSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChallengeSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setChallengeSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","function add(accumulator: number, a: number) {\n  return accumulator + a;\n}\n\nexport const u8join = (...params: Uint8Array[]): Uint8Array => { \n  let size = params.map(e => e.length).reduce(add, 0);\n  const uint8 = new Uint8Array(size); \n  let pos = 0;\n  for(let arr of params){\n    uint8.set(arr, pos);\n    pos += arr.length;\n  }\n  return uint8;\n}\n\n\nconst HARDENED = 0x80000000;\n\n\n/**\n * @param keypathString keypath in string format e.g. m/44'/1'/0'/0\n * @returns keypath as array e.g. [2147483692, 2147483649, 2147483648, 0]\n */\n export const getKeypathFromString = (keypathString: string) => {\n  let levels = keypathString.toLowerCase().split('/');\n  if (levels[0] !== 'm') throw new Error('Invalid keypath');\n  levels = levels.slice(1);\n\n  return levels.map(level => {\n      let hardened = false;\n      if (level.substring(level.length - 1) === \"'\") {\n          hardened = true\n      }\n      let x = parseInt(level, 10);\n      if (isNaN(x) || x < 0 || x >= HARDENED) {\n          throw new Error('Invalid keypath');\n      }\n      if (hardened) x += HARDENED;\n      return x;\n  })\n}\n","import { Device, Encryption } from './device'\nimport { u8join } from './utils';\nconst Rust = import('noise-wasm');\n\nconst fakeAttestation = Uint8Array.from([0, 97, 39, 192, 192, 192, 72, 254, 120, 86, 137, 4, 226, 24, 107, 229, 59, 102, 237, 166, 155, 79, 42, 155, 132, 103, 119, 237, 246, 254, 75, 172, 108, 74])\nconst unlock = Uint8Array.from([0, 117]);\nconst cleanYourHandsBeforeHandshake = Uint8Array.from([0, 104]);\nconst inHandshake = Uint8Array.from([0, 72]);\n\nexport const initialize = async (device: Pick<Device, \"send\" | \"info\">) => {\n  const { send } = device;\n  await send(fakeAttestation);\n\n  device.info = {...device.info, attestation: true}\n\n  if (!device.info.unlocked){\n    await send(unlock);\n    device.info = {...device.info, unlocked: true}\n  }\n}\n\nexport const handshake = async (device: Pick<Device, \"send\" | \"info\">) => {\n  await device.send(cleanYourHandsBeforeHandshake);\n\n  let r = (await Rust).Noise.new()\n  // send initial 32 bytes handshake\n  let init = new Uint8Array(32);\n  r.write(new Uint8Array(), init);\n  let response = await device.send(u8join(inHandshake, init));\n\n  //digest info\n  r.read(response.slice(2,98), new Uint8Array(0));\n\n  // send final ack\n  let share = new Uint8Array(64)\n  r.write(new Uint8Array(), share);\n\n  let deviceStatus = (await device.send(u8join(inHandshake, share)))[2];\n\n  device.info = { ...device.info, encrypted: true, deviceAcceptedPairing: deviceStatus === 0 ? true : null }\n\n  const crypto: Encryption = {\n    encrypt: (data) => {\n      let out = new Uint8Array(data.length + 16);\n      r.encrypt(data, out);\n      return out\n    },\n    decrypt: (data) => {\n      let out = new Uint8Array(data.length - 16);\n      r.decrypt(data, out);\n      return out\n    }\n  }\n\n  return crypto;\n}\n","import { Device } from \"./device\";\n\nexport const infoRequest = Uint8Array.from([105]);\n\nconst textDecoder = new TextDecoder();\n\nexport interface Info {\n  version?: {\n    major: number\n    minor: number\n    patch: number\n  }\n  platformId?: number\n  editionId?: number\n  unlocked?: boolean\n  attestation?: boolean\n  encrypted?: boolean \n  deviceAcceptedPairing?: null | boolean // undefined: unknown, null: checking, false: rejected, true: accepted \n}\n\nexport const infoDigest = (data: Uint8Array): Info => {\n  const vLength = data[0];\n  const vString = textDecoder.decode(data.slice(1, 1 + vLength));\n  const info = data.slice(1 + vLength);\n  const versions = vString.match(/[0-9]+/g)!.map(parseFloat);\n  return {\n    version: {\n      major: versions[0],\n      minor: versions[1],\n      patch: versions[2]\n    },\n    platformId: info[0],\n    editionId: info[1],\n    unlocked: !!info[2]\n  }\n}\n\nexport const infoQuery = async (device: Pick<Device, \"send\" | \"info\">) => {\n  device.info = { \n    ...device.info, \n    ...infoDigest(await device.send(infoRequest))\n  };\n}\n","const channel = Uint8Array.from([255, 0, 0, 0]);\nconst command = 193\n\nconst sizeToPackets = (size: number) => Math.ceil((size-57) / 59) + 1\n\nexport const headerInfo = (bytes: Uint8Array) => {\n  const size = bytes[5] * 256 + bytes[6] \n  return {\n    size,\n    packets: sizeToPackets(size)\n  }\n} \n\nexport const bytesToPackages = (bytes: Uint8Array): Uint8Array[] => {\n  const packets = Array.from(Array(sizeToPackets(bytes.length)).keys(), () => new Uint8Array(64));\n\n  const totalToWrite = bytes.length;\n  let offset = 0;\n\n  for(let i = 0; i < packets.length; i++){\n    const packet = packets[i];\n    packet.fill(238);\n    packet.set(channel);\n    packet.set([i === 0 ? command : (i-i)], 4);\n\n    const maxLengthToWrite = 64 - ( i===0 ? 7 : 5 );\n    const writeOf = Math.min(totalToWrite - offset, maxLengthToWrite);\n    \n    packet.set(bytes.subarray(offset, offset + writeOf), i===0 ? 7 : 5) \n\n    offset += writeOf;\n  }\n  let length = new DataView(Uint16Array.from([bytes.length]).buffer)\n  packets[0].set([length.getUint8(1), length.getUint8(0)], 5);\n  return packets;\n}\n\nexport const packagesToBytes = (packets: Uint8Array[]): Uint8Array => {\n  const { size } = headerInfo(packets[0]); \n  let frame = new Uint8Array(size);\n  let pos = 0;\n  for(let i = 0; i < packets.length; i++){\n    let read = Math.min(size-pos, i===0 ? 57 : 59)\n    let start = i===0 ? 7 : 5\n    frame.set(\n      packets[i].slice(start, start + read),\n      pos\n    )\n    pos += read;\n  }\n  return frame;\n}\n","export class BitBoxError extends Error {\n  public id: number;\n  constructor(message: string, id: number){\n    super(message);\n    this.id = id;\n  }\n}\n\nexport const NotCompatibleBrowser = new BitBoxError(\"Not compatible browser\", 0);\n\nexport const DeviceVersionMismatch = new BitBoxError(\"Device version must be greater than 7.0.0\", 1);\n\nexport const UserDisconnectedDevice = new BitBoxError(\"User disconnected the BitBox device\", 2);\n\nexport const DevicePairingRejected = new BitBoxError(\"Device rejected pairing code\", 3);\n\nexport const DeviceExternallyClosed = new BitBoxError(\"Device Disconnected or Owned by another Application\", 4);\n\nexport const NoDeviceSelected = new BitBoxError(\"No device has been selected on the Browser\", 5);\n\nexport const DeviceClosedByApp = new BitBoxError(\"Device Closed imperatively by App\", 6);\n","import { handshake, initialize } from \"./handshake\"\nimport { Info, infoQuery } from \"./messages\"\nimport { packagesToBytes, bytesToPackages, headerInfo } from \"./uh2Frame\"\nimport { ETHCoin, ETHPubRequest, ETHRequest } from '../proto/eth_pb';\nimport { Request, Response } from '../proto/hww_pb'\nimport { getKeypathFromString, u8join } from \"./utils\";\nimport { DeviceExternallyClosed, DevicePairingRejected, NoDeviceSelected, NotCompatibleBrowser, BitBoxError, DeviceClosedByApp } from \"./errors\";\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst retryPacket = bytesToPackages(Uint8Array.from([1]))[0];\n\nconst showCode = Uint8Array.from([0, 118]);\n\nexport type SendHID = (data: Uint8Array) => Promise<Uint8Array>\n\nexport interface Encryption {\n  encrypt: (data: Uint8Array) => Uint8Array\n  decrypt: (data: Uint8Array) => Uint8Array\n}\nexport interface Device {\n  send: SendHID\n  info: Info\n  close: () => void\n  eth: () => Promise<Response.AsObject>\n}\ninterface connectOptions {\n  onInfo?: (info: Info) => any;\n  onClose?: (error: BitBoxError) => any;\n}\n\nconst withOp = (data: Uint8Array) => u8join(Uint8Array.from([0, 110]), data) \nconst withoutOp = (data: Uint8Array) => data.slice(2) \n\nconst ethPublic = (send: SendHID, {encrypt, decrypt}: Encryption ) => async (): Promise<Response.AsObject> => {\n  let req = new ETHPubRequest()\n  req.setCoin(ETHCoin.ETH)\n  req.setKeypathList(getKeypathFromString(\"m/44'/60'/0'/0/0\"))\n  req.setDisplay(true)\n  req.setOutputType(ETHPubRequest.OutputType.ADDRESS)\n  req.setContractAddress(new Uint8Array())\n  let wr = new ETHRequest();\n  wr.setPub(req);\n  let wr2 = new Request();\n  wr2.setEth(wr);\n  let data = wr2.serializeBinary();\n  let resp = decrypt(withoutOp(await send(withOp(encrypt(data)))));\n  return Response.deserializeBinary(resp).toObject();\n}\n\nexport const connect = async ({ onInfo, onClose }: connectOptions = {}): Promise<Device> => {\n  if(!window.navigator.hid) throw NotCompatibleBrowser;\n  const HIDs = await window.navigator.hid.requestDevice({ filters: [{ vendorId: 0x03eb }] })\n  if(HIDs.length === 0){\n    throw NoDeviceSelected;\n  }\n  const HID = HIDs[0]\n\n  if(!HID.opened) {\n    await HID.open()\n  }\n\n  let listenDisconnects = (event: HIDConnectionEvent) => {\n    if(Object.is(event.target, HID)){\n      onClose?.(DeviceExternallyClosed);\n    }\n    window.navigator.hid.removeEventListener(\"disconnect\", listenDisconnects)\n  }\n\n  window.navigator.hid.addEventListener(\"disconnect\", listenDisconnects)\n\n  const send = async (data: Uint8Array): Promise<Uint8Array> => {\n    const start = performance.now();\n    let info: any = {\n      sent: {\n        data,\n        opCode: data[0],\n        query: data[0] === 0 ? data[1] : undefined,\n      },\n      waitFrames: 0\n    }\n    console.log(info);\n    bytesToPackages(data).forEach((packet) => HID.sendReport(0, packet));\n    let prom = new Promise<Uint8Array>((resolver, rejected) => {\n      const allPackets: Uint8Array[] = [];\n      HID.oninputreport = ({ data }) => {\n        try {\n          const packet = new Uint8Array(data.buffer)\n          if(allPackets.length === 0 && packet[7] === 1) { //waiting for input\n            sleep(200).then(() => HID.sendReport(0, retryPacket)).catch(() => rejected(DeviceExternallyClosed));\n            info.waitFrames++;\n            return;\n          }\n          allPackets.push(packet)\n          const { packets } = headerInfo(allPackets[0]);\n          if(allPackets.length === packets){\n            const receivedData = packagesToBytes(allPackets);\n            info.time = (performance.now() - start).toFixed(6);\n            info.received = {\n              data: receivedData,\n              opCode: receivedData[0],\n              query: receivedData[0] === 0 ? receivedData[1] : undefined\n            }\n            resolver(receivedData);\n          }\n        } catch (e) {\n          if (e instanceof DOMException) {\n            rejected(DeviceExternallyClosed);\n          } else {\n            rejected(e);\n          }\n        }\n      }\n    })\n    return prom;\n  }\n\n  let device: Pick<Device, \"send\" | \"info\"> = {\n    send,\n    info: {}\n  }; \n\n  let info = {};\n  Object.defineProperty(device, 'info', {\n    get: function() { return info; },\n    set: function(newValue) { info = newValue; onInfo?.(newValue) },\n    enumerable: true,\n    configurable: true\n  });\n\n  await infoQuery(device);\n\n  await initialize(device);\n\n  let enc = await handshake(device);\n\n  if(!device.info.deviceAcceptedPairing) {\n    let status = await(device.send(showCode));\n    if(status[1] === 1){\n      device.info = {...device.info, deviceAcceptedPairing: false}\n      throw DevicePairingRejected\n    }\n    device.info = {...device.info, deviceAcceptedPairing: true}\n  }\n\n  return ({\n    ...device,\n    close: () => {\n      window.navigator.hid.removeEventListener(\"disconnect\", listenDisconnects)\n      HID.close()\n      onClose?.(DeviceClosedByApp)\n    },\n    eth: ethPublic(send, enc)\n  })\n}\n","import { createContext, FunctionComponent, useState } from \"react\";\nimport { connect as deviceConnect, Device } from \"../api/device\";\nimport { Info } from \"../api/messages\";\nimport { useAsync } from \"../utils/hooks\";\n\ninterface Context {\n  connected: boolean\n  connect: () => void\n  connecting: boolean\n  info: Info\n  error?: Error\n  device?: Device\n}\n\nexport const DeviceContext = createContext<Context>({} as any);\n\nexport const DeviceContextProvider: FunctionComponent = ({children}) => {\n  const [info, setInfo] = useState<Info>({});\n  const {execute: connect, error, status, value: device} = useAsync(() => deviceConnect({\n    onInfo: setInfo\n  }), false);\n\n  return <DeviceContext.Provider value={{\n    connected: status === \"success\",\n    connect,\n    connecting: status === \"pending\",\n    error,\n    info,\n    device\n  }}>{children}</DeviceContext.Provider>\n}\n","import React, { useCallback, useEffect, useState } from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: React.Dispatch<React.SetStateAction<T>> = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(value);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n// Hook\nexport const useAsync = <T, E = Error>(\n  asyncFunction: () => Promise<T>,\n  immediate = true\n) => {\n  const [status, setStatus] = useState<\n    \"idle\" | \"pending\" | \"success\" | \"error\"\n  >(\"idle\");\n  const [value, setValue] = useState<T | undefined>(undefined);\n  const [error, setError] = useState<E | undefined>(undefined);\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(() => {\n    setStatus(\"pending\");\n    setValue(undefined);\n    setError(undefined);\n    return asyncFunction()\n      .then((response: any) => {\n        setValue(response);\n        setStatus(\"success\");\n      })\n      .catch((error: any) => {\n        setError(error);\n        setStatus(\"error\");\n      });\n  }, [asyncFunction]);\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [immediate]);\n  return { execute, status, value, error };\n};\n\nexport const useToggle = (initialState: boolean = false): readonly [boolean, () => void, () => void, () => void] => {\n  const [state, setState] = useState<boolean>(initialState);\n\n  const toggle = useCallback((): void => setState(state => !state), []);\n  const setTrue = useCallback((): void => setState(true), []);\n  const setFalse = useCallback((): void => setState(false), []);\n  return [state, toggle, setTrue, setFalse] as const;\n}\n\nexport const useIntervalUpdate = (miliseconds: number = 1000) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [update, setUpdate] = useState<number>(0);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setUpdate(Math.random());\n    }, miliseconds)\n    return () => clearInterval(intervalId);\n  }, [setUpdate, miliseconds])\n}\n\nexport const useCallbackAsync = (ex: (...params: any[]) => Promise<any>, execute: boolean, deps: React.DependencyList) => {\n  useEffect(() => {\n    if (execute) {\n      ex();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\nexport const useInput = (defaultValue = \"\") => {\n  const [val, setVal] = useState<string>(defaultValue)\n  const setEv = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setVal(ev.target.value), [setVal]);\n  return [val, setEv] as const\n}\n","import { Alert, AlertDescription, AlertIcon, Box, List, ListIcon, ListItem, Stack, Tag, TagLabel, TagLeftIcon } from \"@chakra-ui/react\"\nimport { CheckIcon, UnlockIcon, TimeIcon, LockIcon, ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\"\nimport { Fragment, useContext } from \"react\";\nimport { DeviceContext } from \"../context/contexts\";\n\nconst ConnectingBadges = () => {\n  let {\n    info: {\n      version,\n      unlocked,\n      encrypted\n    }\n  } = useContext(DeviceContext);\n  return <Stack direction={\"row\"} justify={\"end\"}>\n    {version && <Tag size={\"lg\"} variant='subtle' colorScheme={'blue'}>\n      <TagLabel>Version {version.major}.{version.minor}.{version.patch}</TagLabel>\n    </Tag>}\n    <Tag size={\"lg\"} variant='subtle' colorScheme={unlocked ? 'blue' : 'red'}>\n      <TagLeftIcon boxSize='12px' as={unlocked ? UnlockIcon : LockIcon} />\n      <TagLabel>{unlocked ? \"Unlocked\" : \"Locked\"}</TagLabel>\n    </Tag>\n    <Tag size={\"lg\"} variant='subtle' colorScheme={encrypted ? 'blue' : 'red'}>\n      <TagLeftIcon boxSize='12px' as={encrypted ? ViewOffIcon : ViewIcon} />\n      <TagLabel>{encrypted ? \"Encrypted\" : \"Cleartext\"}</TagLabel>\n    </Tag>\n  </Stack>\n}\n\nconst ConnectingState = () => {\n  let { info: {\n    version,\n    attestation,\n    unlocked,\n    encrypted,\n    deviceAcceptedPairing\n  } } = useContext(DeviceContext);\n  let color = 'blue.500';\n  return <Box rounded={8} padding={4} backgroundColor={\"gray.200\"}>\n    <List spacing={3}>\n      <ListItem>\n        <ListIcon as={version ? CheckIcon : TimeIcon} color={color} />\n        Querying device Info\n      </ListItem>\n      <ListItem>\n        <ListIcon as={attestation ? CheckIcon : TimeIcon} color={color} />\n        Attestation Check. Verification not implemented\n      </ListItem>\n      <ListItem>\n        <ListIcon as={unlocked ? CheckIcon : TimeIcon} color={color} />\n        Unlocking device\n      </ListItem>\n      <ListItem>\n        <ListIcon as={encrypted ? CheckIcon : TimeIcon} color={color} />\n        Encryption handshake\n      </ListItem>\n      <ListItem>\n        <ListIcon as={deviceAcceptedPairing ? CheckIcon : TimeIcon} color={color} />\n        Pairing code Verification\n      </ListItem>\n    </List>\n  </Box>\n}\n\nexport const ConnectingView = () => {\n  let { error } = useContext(DeviceContext);\n  return <Fragment>\n    <ConnectingBadges />\n    <ConnectingState />\n    { error && <Alert status='error' rounded={8}>\n      <AlertIcon />\n      <AlertDescription>{error.message}</AlertDescription>\n    </Alert> }\n  </Fragment>\n}\n","import './App.css';\nimport { Button, Center, Stack } from '@chakra-ui/react';\nimport { useContext } from 'react';\nimport { DeviceContext } from './context/contexts';\nimport { ConnectingView } from './views/ConnectingView';\n\nfunction App() {\n  const { connect, device, connecting, connected} = useContext(DeviceContext);\n\n  return (\n    <Center h='100vh'>\n      <Stack direction={\"column\"} maxWidth={540} width={540} margin={4}>\n        <ConnectingView />\n        <Button onClick={connect} colorScheme={\"blue\"} isLoading={connecting} loadingText={\"Connecting...\"} disabled={connected || connecting}>Connect</Button>\n        <Button onClick={device?.close}>Close</Button>\n        <Button onClick={() => device?.eth().then(console.log)}>Eth</Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { DeviceContextProvider } from './context/contexts';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <DeviceContextProvider>\n        <App />\n      </DeviceContextProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// source: eth.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar antiklepto_pb = require('./antiklepto_pb.js');\ngoog.object.extend(proto, antiklepto_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHCoin', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignMessageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHPubRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHPubRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHPubRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignMessageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignMessageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHSignResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    coin: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    outputType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n    contractAddress: msg.getContractAddress_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHPubRequest;\n  return proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (reader.readEnum());\n      msg.setOutputType(value);\n      break;\n    case 4:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setContractAddress(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getOutputType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n  f = message.getContractAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.OutputType = {\n  ADDRESS: 0,\n  XPUB: 1\n};\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional ETHCoin coin = 2;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional OutputType output_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getOutputType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setOutputType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * optional bool display = 4;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getContractAddress()));\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getContractAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setContractAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    nonce: msg.getNonce_asB64(),\n    gasPrice: msg.getGasPrice_asB64(),\n    gasLimit: msg.getGasLimit_asB64(),\n    recipient: msg.getRecipient_asB64(),\n    value: msg.getValue_asB64(),\n    data: msg.getData_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignRequest;\n  return proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setNonce(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setGasPrice(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setGasLimit(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRecipient(value);\n      break;\n    case 7:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setValue(value);\n      break;\n    case 8:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 9:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = message.getNonce_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getGasPrice_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getGasLimit_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n  f = message.getRecipient_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f = message.getValue_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      7,\n      f\n    );\n  }\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      8,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes nonce = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes nonce = 3;\n * This is a type-conversion wrapper around `getNonce()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getNonce()));\n};\n\n\n/**\n * optional bytes nonce = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getNonce()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getNonce()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setNonce = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * This is a type-conversion wrapper around `getGasPrice()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getGasPrice()));\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getGasPrice()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getGasPrice()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasPrice = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * This is a type-conversion wrapper around `getGasLimit()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getGasLimit()));\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getGasLimit()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getGasLimit()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasLimit = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n/**\n * optional bytes recipient = 6;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * optional bytes recipient = 6;\n * This is a type-conversion wrapper around `getRecipient()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRecipient()));\n};\n\n\n/**\n * optional bytes recipient = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRecipient()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRecipient()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setRecipient = function(value) {\n  return jspb.Message.setProto3BytesField(this, 6, value);\n};\n\n\n/**\n * optional bytes value = 7;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * optional bytes value = 7;\n * This is a type-conversion wrapper around `getValue()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getValue()));\n};\n\n\n/**\n * optional bytes value = 7;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getValue()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getValue()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3BytesField(this, 7, value);\n};\n\n\n/**\n * optional bytes data = 8;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/**\n * optional bytes data = 8;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 8;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setData = function(value) {\n  return jspb.Message.setProto3BytesField(this, 8, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 9;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 9, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    msg: msg.getMsg_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;\n  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = message.getMsg_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes msg = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes msg = 3;\n * This is a type-conversion wrapper around `getMsg()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getMsg()));\n};\n\n\n/**\n * optional bytes msg = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getMsg()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getMsg()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setMsg = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 4, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignResponse;\n  return proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_ = [[1,2,3,4]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  PUB: 1,\n  SIGN: 2,\n  SIGN_MSG: 3,\n  ANTIKLEPTO_SIGNATURE: 4\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: (f = msg.getPub()) && proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(includeInstance, f),\n    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(includeInstance, f),\n    signMsg: (f = msg.getSignMsg()) && proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(includeInstance, f),\n    antikleptoSignature: (f = msg.getAntikleptoSignature()) && antiklepto_pb.AntiKleptoSignatureRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHRequest;\n  return proto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.ETHPubRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader);\n      msg.setSign(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader);\n      msg.setSignMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoSignatureRequest;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignatureRequest.deserializeBinaryFromReader);\n      msg.setAntikleptoSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSign();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMsg();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignature();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoSignatureRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHPubRequest pub = 1;\n * @return {?proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHPubRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHPubRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHPubRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional ETHSignRequest sign = 2;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getSign = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setSign = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSign = function() {\n  return this.setSign(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSign = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional ETHSignMessageRequest sign_msg = 3;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getSignMsg = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignMessageRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignMessageRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setSignMsg = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSignMsg = function() {\n  return this.setSignMsg(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSignMsg = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional AntiKleptoSignatureRequest antiklepto_signature = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getAntikleptoSignature = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignatureRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setAntikleptoSignature = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearAntikleptoSignature = function() {\n  return this.setAntikleptoSignature(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasAntikleptoSignature = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  PUB: 1,\n  SIGN: 2,\n  ANTIKLEPTO_SIGNER_COMMITMENT: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(includeInstance, f),\n    antikleptoSignerCommitment: (f = msg.getAntikleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHResponse;\n  return proto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader);\n      msg.setSign(value);\n      break;\n    case 3:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntikleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSign();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional PubResponse pub = 1;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional ETHSignResponse sign = 2;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getSign = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setSign = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearSign = function() {\n  return this.setSign(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasSign = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment antiklepto_signer_commitment = 3;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getAntikleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setAntikleptoSignerCommitment = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearAntikleptoSignerCommitment = function() {\n  return this.setAntikleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasAntikleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHCoin = {\n  ETH: 0,\n  ROPSTENETH: 1,\n  RINKEBYETH: 2\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: common.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Keypath', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PubResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RootFingerprintRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RootFingerprintResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.XPub', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PubResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PubResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PubResponse.displayName = 'proto.shiftcrypto.bitbox02.PubResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RootFingerprintRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RootFingerprintRequest.displayName = 'proto.shiftcrypto.bitbox02.RootFingerprintRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RootFingerprintResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RootFingerprintResponse.displayName = 'proto.shiftcrypto.bitbox02.RootFingerprintResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.XPub = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.XPub, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.XPub.displayName = 'proto.shiftcrypto.bitbox02.XPub';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Keypath = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.Keypath.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Keypath, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Keypath.displayName = 'proto.shiftcrypto.bitbox02.Keypath';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PubResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PubResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.PubResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PubResponse;\n  return proto.shiftcrypto.bitbox02.PubResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.PubResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPub(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PubResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PubResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string pub = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.getPub = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.PubResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.setPub = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RootFingerprintRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RootFingerprintRequest;\n  return proto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RootFingerprintRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RootFingerprintResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    fingerprint: msg.getFingerprint_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RootFingerprintResponse;\n  return proto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setFingerprint(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RootFingerprintResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFingerprint_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * This is a type-conversion wrapper around `getFingerprint()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getFingerprint()));\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFingerprint()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getFingerprint()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} returns this\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.setFingerprint = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.XPub.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.XPub} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.XPub.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    depth: msg.getDepth_asB64(),\n    parentFingerprint: msg.getParentFingerprint_asB64(),\n    childNum: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    chainCode: msg.getChainCode_asB64(),\n    publicKey: msg.getPublicKey_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.XPub.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.XPub;\n  return proto.shiftcrypto.bitbox02.XPub.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.XPub} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.XPub.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDepth(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setParentFingerprint(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setChildNum(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChainCode(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPublicKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.XPub.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.XPub} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.XPub.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDepth_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getParentFingerprint_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getChildNum();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getChainCode_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getPublicKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes depth = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes depth = 1;\n * This is a type-conversion wrapper around `getDepth()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDepth()));\n};\n\n\n/**\n * optional bytes depth = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDepth()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDepth()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setDepth = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * This is a type-conversion wrapper around `getParentFingerprint()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getParentFingerprint()));\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getParentFingerprint()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getParentFingerprint()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setParentFingerprint = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional uint32 child_num = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChildNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setChildNum = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * This is a type-conversion wrapper around `getChainCode()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChainCode()));\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChainCode()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChainCode()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setChainCode = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes public_key = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes public_key = 5;\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPublicKey()));\n};\n\n\n/**\n * optional bytes public_key = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPublicKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setPublicKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Keypath.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Keypath.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Keypath} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Keypath.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.Keypath.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Keypath;\n  return proto.shiftcrypto.bitbox02.Keypath.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Keypath} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.Keypath.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Keypath.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Keypath} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Keypath.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: hww.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar backup_commands_pb = require('./backup_commands_pb.js');\ngoog.object.extend(proto, backup_commands_pb);\nvar bitbox02_system_pb = require('./bitbox02_system_pb.js');\ngoog.object.extend(proto, bitbox02_system_pb);\nvar btc_pb = require('./btc_pb.js');\ngoog.object.extend(proto, btc_pb);\nvar cardano_pb = require('./cardano_pb.js');\ngoog.object.extend(proto, cardano_pb);\nvar eth_pb = require('./eth_pb.js');\ngoog.object.extend(proto, eth_pb);\nvar keystore_pb = require('./keystore_pb.js');\ngoog.object.extend(proto, keystore_pb);\nvar mnemonic_pb = require('./mnemonic_pb.js');\ngoog.object.extend(proto, mnemonic_pb);\nvar system_pb = require('./system_pb.js');\ngoog.object.extend(proto, system_pb);\nvar perform_attestation_pb = require('./perform_attestation_pb.js');\ngoog.object.extend(proto, perform_attestation_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Error', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Request', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Request.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Response', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Response.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Success', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Error = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Error, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Error.displayName = 'proto.shiftcrypto.bitbox02.Error';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Success = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Success, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Success.displayName = 'proto.shiftcrypto.bitbox02.Success';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Request = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Request.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Request, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Request.displayName = 'proto.shiftcrypto.bitbox02.Request';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Response = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Response.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Response, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Response.displayName = 'proto.shiftcrypto.bitbox02.Response';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Error.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Error} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Error.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    code: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    message: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Error.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Error;\n  return proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Error} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setCode(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Error} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCode();\n  if (f !== 0) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int32 code = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.getCode = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.Error} returns this\n */\nproto.shiftcrypto.bitbox02.Error.prototype.setCode = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional string message = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.Error} returns this\n */\nproto.shiftcrypto.bitbox02.Error.prototype.setMessage = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Success.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Success.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Success} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Success.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Success.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Success;\n  return proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Success} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Success.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Success} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Request.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.Request.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  DEVICE_NAME: 2,\n  DEVICE_LANGUAGE: 3,\n  DEVICE_INFO: 4,\n  SET_PASSWORD: 5,\n  CREATE_BACKUP: 6,\n  SHOW_MNEMONIC: 7,\n  BTC_PUB: 8,\n  BTC_SIGN_INIT: 9,\n  BTC_SIGN_INPUT: 10,\n  BTC_SIGN_OUTPUT: 11,\n  INSERT_REMOVE_SDCARD: 12,\n  CHECK_SDCARD: 13,\n  SET_MNEMONIC_PASSPHRASE_ENABLED: 14,\n  LIST_BACKUPS: 15,\n  RESTORE_BACKUP: 16,\n  PERFORM_ATTESTATION: 17,\n  REBOOT: 18,\n  CHECK_BACKUP: 19,\n  ETH: 20,\n  RESET: 21,\n  RESTORE_FROM_MNEMONIC: 22,\n  FINGERPRINT: 24,\n  BTC: 25,\n  ELECTRUM_ENCRYPTION_KEY: 26,\n  CARDANO: 27\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.Request.RequestCase}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.Request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Request.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Request} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Request.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    deviceName: (f = msg.getDeviceName()) && bitbox02_system_pb.SetDeviceNameRequest.toObject(includeInstance, f),\n    deviceLanguage: (f = msg.getDeviceLanguage()) && bitbox02_system_pb.SetDeviceLanguageRequest.toObject(includeInstance, f),\n    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoRequest.toObject(includeInstance, f),\n    setPassword: (f = msg.getSetPassword()) && bitbox02_system_pb.SetPasswordRequest.toObject(includeInstance, f),\n    createBackup: (f = msg.getCreateBackup()) && backup_commands_pb.CreateBackupRequest.toObject(includeInstance, f),\n    showMnemonic: (f = msg.getShowMnemonic()) && mnemonic_pb.ShowMnemonicRequest.toObject(includeInstance, f),\n    btcPub: (f = msg.getBtcPub()) && btc_pb.BTCPubRequest.toObject(includeInstance, f),\n    btcSignInit: (f = msg.getBtcSignInit()) && btc_pb.BTCSignInitRequest.toObject(includeInstance, f),\n    btcSignInput: (f = msg.getBtcSignInput()) && btc_pb.BTCSignInputRequest.toObject(includeInstance, f),\n    btcSignOutput: (f = msg.getBtcSignOutput()) && btc_pb.BTCSignOutputRequest.toObject(includeInstance, f),\n    insertRemoveSdcard: (f = msg.getInsertRemoveSdcard()) && bitbox02_system_pb.InsertRemoveSDCardRequest.toObject(includeInstance, f),\n    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardRequest.toObject(includeInstance, f),\n    setMnemonicPassphraseEnabled: (f = msg.getSetMnemonicPassphraseEnabled()) && mnemonic_pb.SetMnemonicPassphraseEnabledRequest.toObject(includeInstance, f),\n    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsRequest.toObject(includeInstance, f),\n    restoreBackup: (f = msg.getRestoreBackup()) && backup_commands_pb.RestoreBackupRequest.toObject(includeInstance, f),\n    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationRequest.toObject(includeInstance, f),\n    reboot: (f = msg.getReboot()) && system_pb.RebootRequest.toObject(includeInstance, f),\n    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupRequest.toObject(includeInstance, f),\n    eth: (f = msg.getEth()) && eth_pb.ETHRequest.toObject(includeInstance, f),\n    reset: (f = msg.getReset()) && bitbox02_system_pb.ResetRequest.toObject(includeInstance, f),\n    restoreFromMnemonic: (f = msg.getRestoreFromMnemonic()) && mnemonic_pb.RestoreFromMnemonicRequest.toObject(includeInstance, f),\n    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintRequest.toObject(includeInstance, f),\n    btc: (f = msg.getBtc()) && btc_pb.BTCRequest.toObject(includeInstance, f),\n    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyRequest.toObject(includeInstance, f),\n    cardano: (f = msg.getCardano()) && cardano_pb.CardanoRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Request}\n */\nproto.shiftcrypto.bitbox02.Request.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Request;\n  return proto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Request} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Request}\n */\nproto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new bitbox02_system_pb.SetDeviceNameRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetDeviceNameRequest.deserializeBinaryFromReader);\n      msg.setDeviceName(value);\n      break;\n    case 3:\n      var value = new bitbox02_system_pb.SetDeviceLanguageRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetDeviceLanguageRequest.deserializeBinaryFromReader);\n      msg.setDeviceLanguage(value);\n      break;\n    case 4:\n      var value = new bitbox02_system_pb.DeviceInfoRequest;\n      reader.readMessage(value,bitbox02_system_pb.DeviceInfoRequest.deserializeBinaryFromReader);\n      msg.setDeviceInfo(value);\n      break;\n    case 5:\n      var value = new bitbox02_system_pb.SetPasswordRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetPasswordRequest.deserializeBinaryFromReader);\n      msg.setSetPassword(value);\n      break;\n    case 6:\n      var value = new backup_commands_pb.CreateBackupRequest;\n      reader.readMessage(value,backup_commands_pb.CreateBackupRequest.deserializeBinaryFromReader);\n      msg.setCreateBackup(value);\n      break;\n    case 7:\n      var value = new mnemonic_pb.ShowMnemonicRequest;\n      reader.readMessage(value,mnemonic_pb.ShowMnemonicRequest.deserializeBinaryFromReader);\n      msg.setShowMnemonic(value);\n      break;\n    case 8:\n      var value = new btc_pb.BTCPubRequest;\n      reader.readMessage(value,btc_pb.BTCPubRequest.deserializeBinaryFromReader);\n      msg.setBtcPub(value);\n      break;\n    case 9:\n      var value = new btc_pb.BTCSignInitRequest;\n      reader.readMessage(value,btc_pb.BTCSignInitRequest.deserializeBinaryFromReader);\n      msg.setBtcSignInit(value);\n      break;\n    case 10:\n      var value = new btc_pb.BTCSignInputRequest;\n      reader.readMessage(value,btc_pb.BTCSignInputRequest.deserializeBinaryFromReader);\n      msg.setBtcSignInput(value);\n      break;\n    case 11:\n      var value = new btc_pb.BTCSignOutputRequest;\n      reader.readMessage(value,btc_pb.BTCSignOutputRequest.deserializeBinaryFromReader);\n      msg.setBtcSignOutput(value);\n      break;\n    case 12:\n      var value = new bitbox02_system_pb.InsertRemoveSDCardRequest;\n      reader.readMessage(value,bitbox02_system_pb.InsertRemoveSDCardRequest.deserializeBinaryFromReader);\n      msg.setInsertRemoveSdcard(value);\n      break;\n    case 13:\n      var value = new bitbox02_system_pb.CheckSDCardRequest;\n      reader.readMessage(value,bitbox02_system_pb.CheckSDCardRequest.deserializeBinaryFromReader);\n      msg.setCheckSdcard(value);\n      break;\n    case 14:\n      var value = new mnemonic_pb.SetMnemonicPassphraseEnabledRequest;\n      reader.readMessage(value,mnemonic_pb.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader);\n      msg.setSetMnemonicPassphraseEnabled(value);\n      break;\n    case 15:\n      var value = new backup_commands_pb.ListBackupsRequest;\n      reader.readMessage(value,backup_commands_pb.ListBackupsRequest.deserializeBinaryFromReader);\n      msg.setListBackups(value);\n      break;\n    case 16:\n      var value = new backup_commands_pb.RestoreBackupRequest;\n      reader.readMessage(value,backup_commands_pb.RestoreBackupRequest.deserializeBinaryFromReader);\n      msg.setRestoreBackup(value);\n      break;\n    case 17:\n      var value = new perform_attestation_pb.PerformAttestationRequest;\n      reader.readMessage(value,perform_attestation_pb.PerformAttestationRequest.deserializeBinaryFromReader);\n      msg.setPerformAttestation(value);\n      break;\n    case 18:\n      var value = new system_pb.RebootRequest;\n      reader.readMessage(value,system_pb.RebootRequest.deserializeBinaryFromReader);\n      msg.setReboot(value);\n      break;\n    case 19:\n      var value = new backup_commands_pb.CheckBackupRequest;\n      reader.readMessage(value,backup_commands_pb.CheckBackupRequest.deserializeBinaryFromReader);\n      msg.setCheckBackup(value);\n      break;\n    case 20:\n      var value = new eth_pb.ETHRequest;\n      reader.readMessage(value,eth_pb.ETHRequest.deserializeBinaryFromReader);\n      msg.setEth(value);\n      break;\n    case 21:\n      var value = new bitbox02_system_pb.ResetRequest;\n      reader.readMessage(value,bitbox02_system_pb.ResetRequest.deserializeBinaryFromReader);\n      msg.setReset(value);\n      break;\n    case 22:\n      var value = new mnemonic_pb.RestoreFromMnemonicRequest;\n      reader.readMessage(value,mnemonic_pb.RestoreFromMnemonicRequest.deserializeBinaryFromReader);\n      msg.setRestoreFromMnemonic(value);\n      break;\n    case 24:\n      var value = new common_pb.RootFingerprintRequest;\n      reader.readMessage(value,common_pb.RootFingerprintRequest.deserializeBinaryFromReader);\n      msg.setFingerprint(value);\n      break;\n    case 25:\n      var value = new btc_pb.BTCRequest;\n      reader.readMessage(value,btc_pb.BTCRequest.deserializeBinaryFromReader);\n      msg.setBtc(value);\n      break;\n    case 26:\n      var value = new keystore_pb.ElectrumEncryptionKeyRequest;\n      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader);\n      msg.setElectrumEncryptionKey(value);\n      break;\n    case 27:\n      var value = new cardano_pb.CardanoRequest;\n      reader.readMessage(value,cardano_pb.CardanoRequest.deserializeBinaryFromReader);\n      msg.setCardano(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Request} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDeviceName();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      bitbox02_system_pb.SetDeviceNameRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceLanguage();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      bitbox02_system_pb.SetDeviceLanguageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceInfo();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      bitbox02_system_pb.DeviceInfoRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSetPassword();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      bitbox02_system_pb.SetPasswordRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCreateBackup();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      backup_commands_pb.CreateBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getShowMnemonic();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      mnemonic_pb.ShowMnemonicRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcPub();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      btc_pb.BTCPubRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignInit();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      btc_pb.BTCSignInitRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignInput();\n  if (f != null) {\n    writer.writeMessage(\n      10,\n      f,\n      btc_pb.BTCSignInputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignOutput();\n  if (f != null) {\n    writer.writeMessage(\n      11,\n      f,\n      btc_pb.BTCSignOutputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getInsertRemoveSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      12,\n      f,\n      bitbox02_system_pb.InsertRemoveSDCardRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      13,\n      f,\n      bitbox02_system_pb.CheckSDCardRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSetMnemonicPassphraseEnabled();\n  if (f != null) {\n    writer.writeMessage(\n      14,\n      f,\n      mnemonic_pb.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getListBackups();\n  if (f != null) {\n    writer.writeMessage(\n      15,\n      f,\n      backup_commands_pb.ListBackupsRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRestoreBackup();\n  if (f != null) {\n    writer.writeMessage(\n      16,\n      f,\n      backup_commands_pb.RestoreBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPerformAttestation();\n  if (f != null) {\n    writer.writeMessage(\n      17,\n      f,\n      perform_attestation_pb.PerformAttestationRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getReboot();\n  if (f != null) {\n    writer.writeMessage(\n      18,\n      f,\n      system_pb.RebootRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckBackup();\n  if (f != null) {\n    writer.writeMessage(\n      19,\n      f,\n      backup_commands_pb.CheckBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getEth();\n  if (f != null) {\n    writer.writeMessage(\n      20,\n      f,\n      eth_pb.ETHRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getReset();\n  if (f != null) {\n    writer.writeMessage(\n      21,\n      f,\n      bitbox02_system_pb.ResetRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRestoreFromMnemonic();\n  if (f != null) {\n    writer.writeMessage(\n      22,\n      f,\n      mnemonic_pb.RestoreFromMnemonicRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getFingerprint();\n  if (f != null) {\n    writer.writeMessage(\n      24,\n      f,\n      common_pb.RootFingerprintRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtc();\n  if (f != null) {\n    writer.writeMessage(\n      25,\n      f,\n      btc_pb.BTCRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getElectrumEncryptionKey();\n  if (f != null) {\n    writer.writeMessage(\n      26,\n      f,\n      keystore_pb.ElectrumEncryptionKeyRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCardano();\n  if (f != null) {\n    writer.writeMessage(\n      27,\n      f,\n      cardano_pb.CardanoRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional SetDeviceNameRequest device_name = 2;\n * @return {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceName = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceNameRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceNameRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceName = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceName = function() {\n  return this.setDeviceName(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceName = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional SetDeviceLanguageRequest device_language = 3;\n * @return {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceLanguage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceLanguageRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceLanguage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceLanguage = function() {\n  return this.setDeviceLanguage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceLanguage = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional DeviceInfoRequest device_info = 4;\n * @return {?proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceInfo = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.DeviceInfoRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceInfo = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceInfo = function() {\n  return this.setDeviceInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceInfo = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional SetPasswordRequest set_password = 5;\n * @return {?proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getSetPassword = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetPasswordRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetPasswordRequest, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetPasswordRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setSetPassword = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearSetPassword = function() {\n  return this.setSetPassword(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasSetPassword = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional CreateBackupRequest create_backup = 6;\n * @return {?proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCreateBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CreateBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CreateBackupRequest, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CreateBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCreateBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCreateBackup = function() {\n  return this.setCreateBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCreateBackup = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional ShowMnemonicRequest show_mnemonic = 7;\n * @return {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getShowMnemonic = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ShowMnemonicRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.ShowMnemonicRequest, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setShowMnemonic = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearShowMnemonic = function() {\n  return this.setShowMnemonic(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasShowMnemonic = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional BTCPubRequest btc_pub = 8;\n * @return {?proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPubRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCPubRequest, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPubRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcPub = function() {\n  return this.setBtcPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcPub = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional BTCSignInitRequest btc_sign_init = 9;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInit = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInitRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignInitRequest, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignInitRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInit = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInit = function() {\n  return this.setBtcSignInit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInit = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional BTCSignInputRequest btc_sign_input = 10;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInputRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignInputRequest, 10));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignInputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInput = function() {\n  return this.setBtcSignInput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInput = function() {\n  return jspb.Message.getField(this, 10) != null;\n};\n\n\n/**\n * optional BTCSignOutputRequest btc_sign_output = 11;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignOutput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignOutputRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignOutputRequest, 11));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignOutput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignOutput = function() {\n  return this.setBtcSignOutput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignOutput = function() {\n  return jspb.Message.getField(this, 11) != null;\n};\n\n\n/**\n * optional InsertRemoveSDCardRequest insert_remove_sdcard = 12;\n * @return {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getInsertRemoveSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.InsertRemoveSDCardRequest, 12));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setInsertRemoveSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearInsertRemoveSdcard = function() {\n  return this.setInsertRemoveSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasInsertRemoveSdcard = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n/**\n * optional CheckSDCardRequest check_sdcard = 13;\n * @return {?proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCheckSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardRequest, 13));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckSDCardRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCheckSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCheckSdcard = function() {\n  return this.setCheckSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCheckSdcard = function() {\n  return jspb.Message.getField(this, 13) != null;\n};\n\n\n/**\n * optional SetMnemonicPassphraseEnabledRequest set_mnemonic_passphrase_enabled = 14;\n * @return {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getSetMnemonicPassphraseEnabled = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.SetMnemonicPassphraseEnabledRequest, 14));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setSetMnemonicPassphraseEnabled = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearSetMnemonicPassphraseEnabled = function() {\n  return this.setSetMnemonicPassphraseEnabled(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasSetMnemonicPassphraseEnabled = function() {\n  return jspb.Message.getField(this, 14) != null;\n};\n\n\n/**\n * optional ListBackupsRequest list_backups = 15;\n * @return {?proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getListBackups = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsRequest, 15));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ListBackupsRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setListBackups = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearListBackups = function() {\n  return this.setListBackups(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasListBackups = function() {\n  return jspb.Message.getField(this, 15) != null;\n};\n\n\n/**\n * optional RestoreBackupRequest restore_backup = 16;\n * @return {?proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRestoreBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RestoreBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.RestoreBackupRequest, 16));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RestoreBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setRestoreBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 16, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearRestoreBackup = function() {\n  return this.setRestoreBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasRestoreBackup = function() {\n  return jspb.Message.getField(this, 16) != null;\n};\n\n\n/**\n * optional PerformAttestationRequest perform_attestation = 17;\n * @return {?proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getPerformAttestation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationRequest} */ (\n    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationRequest, 17));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PerformAttestationRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setPerformAttestation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 17, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearPerformAttestation = function() {\n  return this.setPerformAttestation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasPerformAttestation = function() {\n  return jspb.Message.getField(this, 17) != null;\n};\n\n\n/**\n * optional RebootRequest reboot = 18;\n * @return {?proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getReboot = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RebootRequest} */ (\n    jspb.Message.getWrapperField(this, system_pb.RebootRequest, 18));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RebootRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setReboot = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 18, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearReboot = function() {\n  return this.setReboot(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasReboot = function() {\n  return jspb.Message.getField(this, 18) != null;\n};\n\n\n/**\n * optional CheckBackupRequest check_backup = 19;\n * @return {?proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCheckBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupRequest, 19));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCheckBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 19, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCheckBackup = function() {\n  return this.setCheckBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCheckBackup = function() {\n  return jspb.Message.getField(this, 19) != null;\n};\n\n\n/**\n * optional ETHRequest eth = 20;\n * @return {?proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getEth = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHRequest} */ (\n    jspb.Message.getWrapperField(this, eth_pb.ETHRequest, 20));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setEth = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 20, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearEth = function() {\n  return this.setEth(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasEth = function() {\n  return jspb.Message.getField(this, 20) != null;\n};\n\n\n/**\n * optional ResetRequest reset = 21;\n * @return {?proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getReset = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ResetRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.ResetRequest, 21));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ResetRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setReset = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 21, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearReset = function() {\n  return this.setReset(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasReset = function() {\n  return jspb.Message.getField(this, 21) != null;\n};\n\n\n/**\n * optional RestoreFromMnemonicRequest restore_from_mnemonic = 22;\n * @return {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRestoreFromMnemonic = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.RestoreFromMnemonicRequest, 22));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setRestoreFromMnemonic = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 22, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearRestoreFromMnemonic = function() {\n  return this.setRestoreFromMnemonic(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasRestoreFromMnemonic = function() {\n  return jspb.Message.getField(this, 22) != null;\n};\n\n\n/**\n * optional RootFingerprintRequest fingerprint = 24;\n * @return {?proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getFingerprint = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintRequest} */ (\n    jspb.Message.getWrapperField(this, common_pb.RootFingerprintRequest, 24));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RootFingerprintRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setFingerprint = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 24, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearFingerprint = function() {\n  return this.setFingerprint(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasFingerprint = function() {\n  return jspb.Message.getField(this, 24) != null;\n};\n\n\n/**\n * optional BTCRequest btc = 25;\n * @return {?proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtc = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCRequest, 25));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtc = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 25, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtc = function() {\n  return this.setBtc(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtc = function() {\n  return jspb.Message.getField(this, 25) != null;\n};\n\n\n/**\n * optional ElectrumEncryptionKeyRequest electrum_encryption_key = 26;\n * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getElectrumEncryptionKey = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} */ (\n    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyRequest, 26));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setElectrumEncryptionKey = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 26, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearElectrumEncryptionKey = function() {\n  return this.setElectrumEncryptionKey(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasElectrumEncryptionKey = function() {\n  return jspb.Message.getField(this, 26) != null;\n};\n\n\n/**\n * optional CardanoRequest cardano = 27;\n * @return {?proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCardano = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoRequest} */ (\n    jspb.Message.getWrapperField(this, cardano_pb.CardanoRequest, 27));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCardano = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 27, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCardano = function() {\n  return this.setCardano(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCardano = function() {\n  return jspb.Message.getField(this, 27) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Response.oneofGroups_ = [[1,2,4,5,6,7,8,9,10,11,12,13,14,15]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.Response.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  SUCCESS: 1,\n  ERROR: 2,\n  DEVICE_INFO: 4,\n  PUB: 5,\n  BTC_SIGN_NEXT: 6,\n  LIST_BACKUPS: 7,\n  CHECK_BACKUP: 8,\n  PERFORM_ATTESTATION: 9,\n  CHECK_SDCARD: 10,\n  ETH: 11,\n  FINGERPRINT: 12,\n  BTC: 13,\n  ELECTRUM_ENCRYPTION_KEY: 14,\n  CARDANO: 15\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.Response.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.Response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Response.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Response} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Response.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    success: (f = msg.getSuccess()) && proto.shiftcrypto.bitbox02.Success.toObject(includeInstance, f),\n    error: (f = msg.getError()) && proto.shiftcrypto.bitbox02.Error.toObject(includeInstance, f),\n    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoResponse.toObject(includeInstance, f),\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    btcSignNext: (f = msg.getBtcSignNext()) && btc_pb.BTCSignNextResponse.toObject(includeInstance, f),\n    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsResponse.toObject(includeInstance, f),\n    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupResponse.toObject(includeInstance, f),\n    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationResponse.toObject(includeInstance, f),\n    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardResponse.toObject(includeInstance, f),\n    eth: (f = msg.getEth()) && eth_pb.ETHResponse.toObject(includeInstance, f),\n    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintResponse.toObject(includeInstance, f),\n    btc: (f = msg.getBtc()) && btc_pb.BTCResponse.toObject(includeInstance, f),\n    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyResponse.toObject(includeInstance, f),\n    cardano: (f = msg.getCardano()) && cardano_pb.CardanoResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Response}\n */\nproto.shiftcrypto.bitbox02.Response.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Response;\n  return proto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Response} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Response}\n */\nproto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.Success;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader);\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.Error;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader);\n      msg.setError(value);\n      break;\n    case 4:\n      var value = new bitbox02_system_pb.DeviceInfoResponse;\n      reader.readMessage(value,bitbox02_system_pb.DeviceInfoResponse.deserializeBinaryFromReader);\n      msg.setDeviceInfo(value);\n      break;\n    case 5:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 6:\n      var value = new btc_pb.BTCSignNextResponse;\n      reader.readMessage(value,btc_pb.BTCSignNextResponse.deserializeBinaryFromReader);\n      msg.setBtcSignNext(value);\n      break;\n    case 7:\n      var value = new backup_commands_pb.ListBackupsResponse;\n      reader.readMessage(value,backup_commands_pb.ListBackupsResponse.deserializeBinaryFromReader);\n      msg.setListBackups(value);\n      break;\n    case 8:\n      var value = new backup_commands_pb.CheckBackupResponse;\n      reader.readMessage(value,backup_commands_pb.CheckBackupResponse.deserializeBinaryFromReader);\n      msg.setCheckBackup(value);\n      break;\n    case 9:\n      var value = new perform_attestation_pb.PerformAttestationResponse;\n      reader.readMessage(value,perform_attestation_pb.PerformAttestationResponse.deserializeBinaryFromReader);\n      msg.setPerformAttestation(value);\n      break;\n    case 10:\n      var value = new bitbox02_system_pb.CheckSDCardResponse;\n      reader.readMessage(value,bitbox02_system_pb.CheckSDCardResponse.deserializeBinaryFromReader);\n      msg.setCheckSdcard(value);\n      break;\n    case 11:\n      var value = new eth_pb.ETHResponse;\n      reader.readMessage(value,eth_pb.ETHResponse.deserializeBinaryFromReader);\n      msg.setEth(value);\n      break;\n    case 12:\n      var value = new common_pb.RootFingerprintResponse;\n      reader.readMessage(value,common_pb.RootFingerprintResponse.deserializeBinaryFromReader);\n      msg.setFingerprint(value);\n      break;\n    case 13:\n      var value = new btc_pb.BTCResponse;\n      reader.readMessage(value,btc_pb.BTCResponse.deserializeBinaryFromReader);\n      msg.setBtc(value);\n      break;\n    case 14:\n      var value = new keystore_pb.ElectrumEncryptionKeyResponse;\n      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader);\n      msg.setElectrumEncryptionKey(value);\n      break;\n    case 15:\n      var value = new cardano_pb.CardanoResponse;\n      reader.readMessage(value,cardano_pb.CardanoResponse.deserializeBinaryFromReader);\n      msg.setCardano(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Response} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSuccess();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter\n    );\n  }\n  f = message.getError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceInfo();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      bitbox02_system_pb.DeviceInfoResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignNext();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      btc_pb.BTCSignNextResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getListBackups();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      backup_commands_pb.ListBackupsResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckBackup();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      backup_commands_pb.CheckBackupResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPerformAttestation();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      perform_attestation_pb.PerformAttestationResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      10,\n      f,\n      bitbox02_system_pb.CheckSDCardResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getEth();\n  if (f != null) {\n    writer.writeMessage(\n      11,\n      f,\n      eth_pb.ETHResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getFingerprint();\n  if (f != null) {\n    writer.writeMessage(\n      12,\n      f,\n      common_pb.RootFingerprintResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtc();\n  if (f != null) {\n    writer.writeMessage(\n      13,\n      f,\n      btc_pb.BTCResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getElectrumEncryptionKey();\n  if (f != null) {\n    writer.writeMessage(\n      14,\n      f,\n      keystore_pb.ElectrumEncryptionKeyResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCardano();\n  if (f != null) {\n    writer.writeMessage(\n      15,\n      f,\n      cardano_pb.CardanoResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional Success success = 1;\n * @return {?proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getSuccess = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Success} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Success, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Success|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setSuccess = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearSuccess = function() {\n  return this.setSuccess(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasSuccess = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Error error = 2;\n * @return {?proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getError = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Error} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Error, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Error|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setError = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearError = function() {\n  return this.setError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional DeviceInfoResponse device_info = 4;\n * @return {?proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getDeviceInfo = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoResponse} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoResponse, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.DeviceInfoResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setDeviceInfo = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearDeviceInfo = function() {\n  return this.setDeviceInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasDeviceInfo = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional PubResponse pub = 5;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional BTCSignNextResponse btc_sign_next = 6;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getBtcSignNext = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignNextResponse} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignNextResponse, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignNextResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setBtcSignNext = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearBtcSignNext = function() {\n  return this.setBtcSignNext(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasBtcSignNext = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional ListBackupsResponse list_backups = 7;\n * @return {?proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getListBackups = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsResponse} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsResponse, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ListBackupsResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setListBackups = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearListBackups = function() {\n  return this.setListBackups(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasListBackups = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional CheckBackupResponse check_backup = 8;\n * @return {?proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCheckBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupResponse} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupResponse, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckBackupResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCheckBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCheckBackup = function() {\n  return this.setCheckBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCheckBackup = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional PerformAttestationResponse perform_attestation = 9;\n * @return {?proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getPerformAttestation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationResponse} */ (\n    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationResponse, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PerformAttestationResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setPerformAttestation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearPerformAttestation = function() {\n  return this.setPerformAttestation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasPerformAttestation = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional CheckSDCardResponse check_sdcard = 10;\n * @return {?proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCheckSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardResponse} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardResponse, 10));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckSDCardResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCheckSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCheckSdcard = function() {\n  return this.setCheckSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCheckSdcard = function() {\n  return jspb.Message.getField(this, 10) != null;\n};\n\n\n/**\n * optional ETHResponse eth = 11;\n * @return {?proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getEth = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHResponse} */ (\n    jspb.Message.getWrapperField(this, eth_pb.ETHResponse, 11));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setEth = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearEth = function() {\n  return this.setEth(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasEth = function() {\n  return jspb.Message.getField(this, 11) != null;\n};\n\n\n/**\n * optional RootFingerprintResponse fingerprint = 12;\n * @return {?proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getFingerprint = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.RootFingerprintResponse, 12));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RootFingerprintResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setFingerprint = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearFingerprint = function() {\n  return this.setFingerprint(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasFingerprint = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n/**\n * optional BTCResponse btc = 13;\n * @return {?proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getBtc = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCResponse} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCResponse, 13));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setBtc = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearBtc = function() {\n  return this.setBtc(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasBtc = function() {\n  return jspb.Message.getField(this, 13) != null;\n};\n\n\n/**\n * optional ElectrumEncryptionKeyResponse electrum_encryption_key = 14;\n * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getElectrumEncryptionKey = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} */ (\n    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyResponse, 14));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setElectrumEncryptionKey = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearElectrumEncryptionKey = function() {\n  return this.setElectrumEncryptionKey(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasElectrumEncryptionKey = function() {\n  return jspb.Message.getField(this, 14) != null;\n};\n\n\n/**\n * optional CardanoResponse cardano = 15;\n * @return {?proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCardano = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoResponse} */ (\n    jspb.Message.getWrapperField(this, cardano_pb.CardanoResponse, 15));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCardano = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCardano = function() {\n  return this.setCardano(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCardano = function() {\n  return jspb.Message.getField(this, 15) != null;\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: antiklepto.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    commitment: msg.getCommitment_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment;\n  return proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCommitment_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes commitment = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCommitment()));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCommitment()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.setCommitment = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    commitment: msg.getCommitment_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment;\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCommitment_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes commitment = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCommitment()));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCommitment()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.setCommitment = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    hostNonce: msg.getHostNonce_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest;\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setHostNonce(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getHostNonce_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * This is a type-conversion wrapper around `getHostNonce()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getHostNonce()));\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getHostNonce()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getHostNonce()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.setHostNonce = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: backup_commands.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BackupInfo', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckBackupRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckBackupResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CreateBackupRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ListBackupsRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ListBackupsResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RestoreBackupRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.CheckBackupRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckBackupResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckBackupResponse.displayName = 'proto.shiftcrypto.bitbox02.CheckBackupResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CreateBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CreateBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.CreateBackupRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ListBackupsRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ListBackupsRequest.displayName = 'proto.shiftcrypto.bitbox02.ListBackupsRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BackupInfo = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BackupInfo, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BackupInfo.displayName = 'proto.shiftcrypto.bitbox02.BackupInfo';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ListBackupsResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ListBackupsResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ListBackupsResponse.displayName = 'proto.shiftcrypto.bitbox02.ListBackupsResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RestoreBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RestoreBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.RestoreBackupRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    silent: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckBackupRequest;\n  return proto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setSilent(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSilent();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool silent = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.getSilent = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.setSilent = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckBackupResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckBackupResponse;\n  return proto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckBackupResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CreateBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CreateBackupRequest;\n  return proto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CreateBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 timestamp = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ListBackupsRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ListBackupsRequest;\n  return proto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ListBackupsRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BackupInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BackupInfo.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    name: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BackupInfo;\n  return proto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint32 timestamp = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string name = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ListBackupsResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    infoList: jspb.Message.toObjectList(msg.getInfoList(),\n    proto.shiftcrypto.bitbox02.BackupInfo.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ListBackupsResponse;\n  return proto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BackupInfo;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader);\n      msg.addInfo(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ListBackupsResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInfoList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated BackupInfo info = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.BackupInfo>}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.getInfoList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.BackupInfo>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.BackupInfo, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.BackupInfo>} value\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.setInfoList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.addInfo = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.BackupInfo, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.clearInfoList = function() {\n  return this.setInfoList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RestoreBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RestoreBackupRequest;\n  return proto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RestoreBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint32 timestamp = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: bitbox02_system.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckSDCardRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckSDCardResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.DeviceInfoRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.DeviceInfoResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ResetRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetDeviceNameRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetPasswordRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckSDCardRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckSDCardRequest.displayName = 'proto.shiftcrypto.bitbox02.CheckSDCardRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckSDCardResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckSDCardResponse.displayName = 'proto.shiftcrypto.bitbox02.CheckSDCardResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.DeviceInfoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.DeviceInfoRequest.displayName = 'proto.shiftcrypto.bitbox02.DeviceInfoRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.DeviceInfoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.DeviceInfoResponse.displayName = 'proto.shiftcrypto.bitbox02.DeviceInfoResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.displayName = 'proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ResetRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ResetRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ResetRequest.displayName = 'proto.shiftcrypto.bitbox02.ResetRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.displayName = 'proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetDeviceNameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetDeviceNameRequest.displayName = 'proto.shiftcrypto.bitbox02.SetDeviceNameRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetPasswordRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetPasswordRequest.displayName = 'proto.shiftcrypto.bitbox02.SetPasswordRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckSDCardRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckSDCardRequest;\n  return proto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckSDCardRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckSDCardResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    inserted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckSDCardResponse;\n  return proto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setInserted(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckSDCardResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInserted();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool inserted = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.getInserted = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.setInserted = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.DeviceInfoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.DeviceInfoRequest;\n  return proto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.DeviceInfoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.DeviceInfoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    initialized: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n    version: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    mnemonicPassphraseEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n    monotonicIncrementsRemaining: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    securechipModel: jspb.Message.getFieldWithDefault(msg, 6, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.DeviceInfoResponse;\n  return proto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setInitialized(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setVersion(value);\n      break;\n    case 4:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setMnemonicPassphraseEnabled(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setMonotonicIncrementsRemaining(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setSecurechipModel(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.DeviceInfoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getInitialized();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f = message.getVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getMnemonicPassphraseEnabled();\n  if (f) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n  f = message.getMonotonicIncrementsRemaining();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getSecurechipModel();\n  if (f.length > 0) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bool initialized = 2;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getInitialized = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setInitialized = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n/**\n * optional string version = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional bool mnemonic_passphrase_enabled = 4;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getMnemonicPassphraseEnabled = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setMnemonicPassphraseEnabled = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n\n\n/**\n * optional uint32 monotonic_increments_remaining = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getMonotonicIncrementsRemaining = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setMonotonicIncrementsRemaining = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional string securechip_model = 6;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getSecurechipModel = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setSecurechipModel = function(value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    action: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest;\n  return proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} */ (reader.readEnum());\n      msg.setAction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAction();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction = {\n  REMOVE_CARD: 0,\n  INSERT_CARD: 1\n};\n\n/**\n * optional SDCardAction action = 1;\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.getAction = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} value\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} returns this\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.setAction = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ResetRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ResetRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ResetRequest;\n  return proto.shiftcrypto.bitbox02.ResetRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ResetRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ResetRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    language: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest;\n  return proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLanguage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLanguage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string language = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.getLanguage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.setLanguage = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetDeviceNameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetDeviceNameRequest;\n  return proto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetDeviceNameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetPasswordRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    entropy: msg.getEntropy_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetPasswordRequest;\n  return proto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setEntropy(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetPasswordRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEntropy_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes entropy = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes entropy = 1;\n * This is a type-conversion wrapper around `getEntropy()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getEntropy()));\n};\n\n\n/**\n * optional bytes entropy = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getEntropy()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getEntropy()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.setEntropy = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: btc.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar antiklepto_pb = require('./antiklepto_pb.js');\ngoog.object.extend(proto, antiklepto_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCCoin', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCOutputType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignInitRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignInputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignMessageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignMessageResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignNextResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignOutputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSuccess', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCPubRequest.repeatedFields_, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPubRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPubRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPubRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignInitRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignInitRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignInitRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignInitRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignNextResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignNextResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCSignNextResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignInputRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignInputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignInputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignInputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignOutputRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignOutputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignOutputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignOutputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSuccess = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSuccess, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSuccess.displayName = 'proto.shiftcrypto.bitbox02.BTCSuccess';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignMessageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignMessageRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignMessageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignMessageResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignMessageResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCSignMessageResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCResponse';\n}\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase = {\n  CONFIG_NOT_SET: 0,\n  SIMPLE_TYPE: 1,\n  MULTISIG: 2\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getConfigCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    simpleType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    multisig: (f = msg.getMultisig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (reader.readEnum());\n      msg.setSimpleType(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader);\n      msg.setMultisig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getMultisig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType = {\n  P2WPKH_P2SH: 0,\n  P2WPKH: 1\n};\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    xpubsList: jspb.Message.toObjectList(msg.getXpubsList(),\n    common_pb.XPub.toObject, includeInstance),\n    ourXpubIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    scriptType: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setThreshold(value);\n      break;\n    case 2:\n      var value = new common_pb.XPub;\n      reader.readMessage(value,common_pb.XPub.deserializeBinaryFromReader);\n      msg.addXpubs(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setOurXpubIndex(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} */ (reader.readEnum());\n      msg.setScriptType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getThreshold();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getXpubsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      common_pb.XPub.serializeBinaryToWriter\n    );\n  }\n  f = message.getOurXpubIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getScriptType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType = {\n  P2WSH: 0,\n  P2WSH_P2SH: 1\n};\n\n/**\n * optional uint32 threshold = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getThreshold = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setThreshold = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * repeated XPub xpubs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.XPub>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getXpubsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.XPub>} */ (\n    jspb.Message.getRepeatedWrapperField(this, common_pb.XPub, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.XPub>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setXpubsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.XPub=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.addXpubs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.XPub, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.clearXpubsList = function() {\n  return this.setXpubsList([]);\n};\n\n\n/**\n * optional uint32 our_xpub_index = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getOurXpubIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setOurXpubIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional ScriptType script_type = 4;\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getScriptType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setScriptType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 4, value);\n};\n\n\n/**\n * optional SimpleType simple_type = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getSimpleType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.setSimpleType = function(value) {\n  return jspb.Message.setOneofField(this, 1, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.clearSimpleType = function() {\n  return jspb.Message.setOneofField(this, 1, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.hasSimpleType = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Multisig multisig = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getMultisig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.setMultisig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.clearMultisig = function() {\n  return this.setMultisig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.hasMultisig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.repeatedFields_ = [2];\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_ = [[3,4]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase = {\n  OUTPUT_NOT_SET: 0,\n  XPUB_TYPE: 3,\n  SCRIPT_CONFIG: 4\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getOutputCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPubRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    xpubType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPubRequest;\n  return proto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (reader.readEnum());\n      msg.setXpubType(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 5:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPubRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.XPubType = {\n  TPUB: 0,\n  XPUB: 1,\n  YPUB: 2,\n  ZPUB: 3,\n  VPUB: 4,\n  UPUB: 5,\n  CAPITAL_VPUB: 6,\n  CAPITAL_ZPUB: 7,\n  CAPITAL_UPUB: 8,\n  CAPITAL_YPUB: 9\n};\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional XPubType xpub_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getXpubType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setXpubType = function(value) {\n  return jspb.Message.setOneofField(this, 3, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearXpubType = function() {\n  return jspb.Message.setOneofField(this, 3, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.hasXpubType = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional bool display = 5;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.repeatedFields_ = [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated uint32 keypath = 3;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignInitRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfigsList: jspb.Message.toObjectList(msg.getScriptConfigsList(),\n    proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject, includeInstance),\n    version: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    numInputs: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    numOutputs: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    locktime: jspb.Message.getFieldWithDefault(msg, 7, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignInitRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader);\n      msg.addScriptConfigs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVersion(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumInputs(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumOutputs(value);\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLocktime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignInitRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getNumInputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getNumOutputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n  f = message.getLocktime();\n  if (f !== 0) {\n    writer.writeUint32(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated BTCScriptConfigWithKeypath script_configs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getScriptConfigsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setScriptConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.addScriptConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.clearScriptConfigsList = function() {\n  return this.setScriptConfigsList([]);\n};\n\n\n/**\n * optional uint32 version = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional uint32 num_inputs = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getNumInputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setNumInputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional uint32 num_outputs = 6;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getNumOutputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setNumOutputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional uint32 locktime = 7;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getLocktime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setLocktime = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    index: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    hasSignature: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n    signature: msg.getSignature_asB64(),\n    prevIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    antiKleptoSignerCommitment: (f = msg.getAntiKleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignNextResponse;\n  return proto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setIndex(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setHasSignature(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevIndex(value);\n      break;\n    case 6:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntiKleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getHasSignature();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getPrevIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getAntiKleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.Type = {\n  INPUT: 0,\n  OUTPUT: 1,\n  DONE: 2,\n  PREVTX_INIT: 3,\n  PREVTX_INPUT: 4,\n  PREVTX_OUTPUT: 5,\n  HOST_NONCE: 6\n};\n\n/**\n * optional Type type = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional uint32 index = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bool has_signature = 3;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getHasSignature = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setHasSignature = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n/**\n * optional bytes signature = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes signature = 4;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional uint32 prev_index = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getPrevIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setPrevIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getAntiKleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setAntiKleptoSignerCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 6, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.clearAntiKleptoSignerCommitment = function() {\n  return this.setAntiKleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.hasAntiKleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.repeatedFields_ = [6];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignInputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    prevouthash: msg.getPrevouthash_asB64(),\n    prevoutindex: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    prevoutvalue: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,\n    scriptConfigIndex: jspb.Message.getFieldWithDefault(msg, 7, 0),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignInputRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevouthash(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevoutindex(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setPrevoutvalue(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setSequence(value);\n      break;\n    case 6:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setScriptConfigIndex(value);\n      break;\n    case 8:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignInputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPrevouthash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getPrevoutindex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getPrevoutvalue();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f = message.getSequence();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      6,\n      f\n    );\n  }\n  f = message.getScriptConfigIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      7,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * This is a type-conversion wrapper around `getPrevouthash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevouthash()));\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevouthash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevouthash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevouthash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional uint32 prevOutIndex = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevoutindex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevoutindex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint64 prevOutValue = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevoutvalue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevoutvalue = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setSequence = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * repeated uint32 keypath = 6;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 6, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint32 script_config_index = 7;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getScriptConfigIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setScriptConfigIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 8;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 8, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.repeatedFields_ = [5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignOutputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ours: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n    type: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    value: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    hash: msg.getHash_asB64(),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n    scriptConfigIndex: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignOutputRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setOurs(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCOutputType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setHash(value);\n      break;\n    case 5:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setScriptConfigIndex(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignOutputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOurs();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f = message.getHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      5,\n      f\n    );\n  }\n  f = message.getScriptConfigIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool ours = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getOurs = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setOurs = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n/**\n * optional BTCOutputType type = 2;\n * @return {!proto.shiftcrypto.bitbox02.BTCOutputType}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCOutputType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCOutputType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional uint64 value = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes hash = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes hash = 4;\n * This is a type-conversion wrapper around `getHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getHash()));\n};\n\n\n/**\n * optional bytes hash = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * repeated uint32 keypath = 5;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 5, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint32 script_config_index = 6;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getScriptConfigIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setScriptConfigIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.repeatedFields_ = [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated uint32 keypath = 3;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSuccess.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSuccess;\n  return proto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    registration: (f = msg.getRegistration()) && proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest;\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader);\n      msg.setRegistration(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCScriptConfigRegistration registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.getRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.setRegistration = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.clearRegistration = function() {\n  return this.setRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.hasRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    isRegistered: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse;\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsRegistered(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getIsRegistered();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool is_registered = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.getIsRegistered = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.setIsRegistered = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    registration: (f = msg.getRegistration()) && proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(includeInstance, f),\n    name: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    xpubType: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest;\n  return proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader);\n      msg.setRegistration(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} */ (reader.readEnum());\n      msg.setXpubType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter\n    );\n  }\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getXpubType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType = {\n  AUTO_ELECTRUM: 0,\n  AUTO_XPUB_TPUB: 1\n};\n\n/**\n * optional BTCScriptConfigRegistration registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setRegistration = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.clearRegistration = function() {\n  return this.setRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.hasRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string name = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional XPubType xpub_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getXpubType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setXpubType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    version: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    numInputs: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    numOutputs: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    locktime: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVersion(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumInputs(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumOutputs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLocktime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getNumInputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getNumOutputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getLocktime();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 version = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 num_inputs = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getNumInputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setNumInputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 num_outputs = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getNumOutputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setNumOutputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 locktime = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getLocktime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setLocktime = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    prevOutHash: msg.getPrevOutHash_asB64(),\n    prevOutIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    signatureScript: msg.getSignatureScript_asB64(),\n    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevOutHash(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevOutIndex(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignatureScript(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setSequence(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPrevOutHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getPrevOutIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getSignatureScript_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getSequence();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setPrevOutHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional uint32 prev_out_index = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setPrevOutIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * This is a type-conversion wrapper around `getSignatureScript()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignatureScript()));\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignatureScript()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignatureScript()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setSignatureScript = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setSequence = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    value: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    pubkeyScript: msg.getPubkeyScript_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPubkeyScript(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getPubkeyScript_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 value = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * This is a type-conversion wrapper around `getPubkeyScript()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPubkeyScript()));\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPubkeyScript()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPubkeyScript()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.setPubkeyScript = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject(includeInstance, f),\n    msg: msg.getMsg_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignMessageRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getMsg_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional BTCScriptConfigWithKeypath script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional bytes msg = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes msg = 3;\n * This is a type-conversion wrapper around `getMsg()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getMsg()));\n};\n\n\n/**\n * optional bytes msg = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getMsg()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getMsg()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setMsg = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 4, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignMessageResponse;\n  return proto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_ = [[1,2,3,4,5,6,7]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  IS_SCRIPT_CONFIG_REGISTERED: 1,\n  REGISTER_SCRIPT_CONFIG: 2,\n  PREVTX_INIT: 3,\n  PREVTX_INPUT: 4,\n  PREVTX_OUTPUT: 5,\n  SIGN_MESSAGE: 6,\n  ANTIKLEPTO_SIGNATURE: 7\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    isScriptConfigRegistered: (f = msg.getIsScriptConfigRegistered()) && proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject(includeInstance, f),\n    registerScriptConfig: (f = msg.getRegisterScriptConfig()) && proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject(includeInstance, f),\n    prevtxInit: (f = msg.getPrevtxInit()) && proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject(includeInstance, f),\n    prevtxInput: (f = msg.getPrevtxInput()) && proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject(includeInstance, f),\n    prevtxOutput: (f = msg.getPrevtxOutput()) && proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject(includeInstance, f),\n    signMessage: (f = msg.getSignMessage()) && proto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject(includeInstance, f),\n    antikleptoSignature: (f = msg.getAntikleptoSignature()) && antiklepto_pb.AntiKleptoSignatureRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCRequest;\n  return proto.shiftcrypto.bitbox02.BTCRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader);\n      msg.setIsScriptConfigRegistered(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader);\n      msg.setRegisterScriptConfig(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader);\n      msg.setPrevtxInit(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader);\n      msg.setPrevtxInput(value);\n      break;\n    case 5:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader);\n      msg.setPrevtxOutput(value);\n      break;\n    case 6:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignMessageRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader);\n      msg.setSignMessage(value);\n      break;\n    case 7:\n      var value = new antiklepto_pb.AntiKleptoSignatureRequest;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignatureRequest.deserializeBinaryFromReader);\n      msg.setAntikleptoSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getIsScriptConfigRegistered();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRegisterScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxInit();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxInput();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxOutput();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMessage();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignature();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      antiklepto_pb.AntiKleptoSignatureRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getIsScriptConfigRegistered = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setIsScriptConfigRegistered = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearIsScriptConfigRegistered = function() {\n  return this.setIsScriptConfigRegistered(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasIsScriptConfigRegistered = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional BTCRegisterScriptConfigRequest register_script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getRegisterScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setRegisterScriptConfig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearRegisterScriptConfig = function() {\n  return this.setRegisterScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasRegisterScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional BTCPrevTxInitRequest prevtx_init = 3;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxInit = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxInit = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxInit = function() {\n  return this.setPrevtxInit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxInit = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCPrevTxInputRequest prevtx_input = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxInput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxInput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxInput = function() {\n  return this.setPrevtxInput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxInput = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional BTCPrevTxOutputRequest prevtx_output = 5;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxOutput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxOutput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxOutput = function() {\n  return this.setPrevtxOutput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxOutput = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional BTCSignMessageRequest sign_message = 6;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getSignMessage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignMessageRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignMessageRequest, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignMessageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setSignMessage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearSignMessage = function() {\n  return this.setSignMessage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasSignMessage = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional AntiKleptoSignatureRequest antiklepto_signature = 7;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getAntikleptoSignature = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignatureRequest, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setAntikleptoSignature = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearAntikleptoSignature = function() {\n  return this.setAntikleptoSignature(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasAntikleptoSignature = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_ = [[1,2,3,4,5]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  SUCCESS: 1,\n  IS_SCRIPT_CONFIG_REGISTERED: 2,\n  SIGN_NEXT: 3,\n  SIGN_MESSAGE: 4,\n  ANTIKLEPTO_SIGNER_COMMITMENT: 5\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    success: (f = msg.getSuccess()) && proto.shiftcrypto.bitbox02.BTCSuccess.toObject(includeInstance, f),\n    isScriptConfigRegistered: (f = msg.getIsScriptConfigRegistered()) && proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject(includeInstance, f),\n    signNext: (f = msg.getSignNext()) && proto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject(includeInstance, f),\n    signMessage: (f = msg.getSignMessage()) && proto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject(includeInstance, f),\n    antikleptoSignerCommitment: (f = msg.getAntikleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCResponse;\n  return proto.shiftcrypto.bitbox02.BTCResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCSuccess;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader);\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader);\n      msg.setIsScriptConfigRegistered(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignNextResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader);\n      msg.setSignNext(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignMessageResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader);\n      msg.setSignMessage(value);\n      break;\n    case 5:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntikleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSuccess();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter\n    );\n  }\n  f = message.getIsScriptConfigRegistered();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignNext();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMessage();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCSuccess success = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSuccess = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSuccess} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSuccess, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSuccess|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSuccess = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSuccess = function() {\n  return this.setSuccess(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSuccess = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getIsScriptConfigRegistered = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setIsScriptConfigRegistered = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearIsScriptConfigRegistered = function() {\n  return this.setIsScriptConfigRegistered(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasIsScriptConfigRegistered = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional BTCSignNextResponse sign_next = 3;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSignNext = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignNextResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignNextResponse, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignNextResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSignNext = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSignNext = function() {\n  return this.setSignNext(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSignNext = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCSignMessageResponse sign_message = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSignMessage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignMessageResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignMessageResponse, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignMessageResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSignMessage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSignMessage = function() {\n  return this.setSignMessage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSignMessage = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getAntikleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setAntikleptoSignerCommitment = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearAntikleptoSignerCommitment = function() {\n  return this.setAntikleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasAntikleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCCoin = {\n  BTC: 0,\n  TBTC: 1,\n  LTC: 2,\n  TLTC: 3\n};\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCOutputType = {\n  UNKNOWN: 0,\n  P2PKH: 1,\n  P2SH: 2,\n  P2WPKH: 3,\n  P2WSH: 4\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: cardano.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoAddressRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoNetwork', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoAddressRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoAddressRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoAddressRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathsList: jspb.Message.toObjectList(msg.getKeypathsList(),\n    common_pb.Keypath.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;\n  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.addKeypaths(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated Keypath keypaths = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.Keypath>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.getKeypathsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.Keypath>} */ (\n    jspb.Message.getRepeatedWrapperField(this, common_pb.Keypath, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.Keypath>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.setKeypathsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.Keypath=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.addKeypaths = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.Keypath, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.clearKeypathsList = function() {\n  return this.setKeypathsList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubsList: msg.getXpubsList_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;\n  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addXpubs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubsList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * @return {!Array<string>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * This is a type-conversion wrapper around `getXpubsList()`\n * @return {!Array<string>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getXpubsList()));\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getXpubsList()`\n * @return {!Array<!Uint8Array>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getXpubsList()));\n};\n\n\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.setXpubsList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.addXpubs = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.clearXpubsList = function() {\n  return this.setXpubsList([]);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_ = [[1]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase = {\n  CONFIG_NOT_SET: 0,\n  PKH_SKH: 1\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getConfigCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pkhSkh: (f = msg.getPkhSkh()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader);\n      msg.setPkhSkh(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPkhSkh();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_ = [1,2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathPaymentList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    keypathStakeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypathPayment(values[i]);\n      }\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypathStake(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathPaymentList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathStakeList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath_payment = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathPaymentList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathPaymentList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathPayment = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathPaymentList = function() {\n  return this.setKeypathPaymentList([]);\n};\n\n\n/**\n * repeated uint32 keypath_stake = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathStakeList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathStakeList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathStake = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathStakeList = function() {\n  return this.setKeypathStakeList([]);\n};\n\n\n/**\n * optional PkhSkh pkh_skh = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getPkhSkh = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.setPkhSkh = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.clearPkhSkh = function() {\n  return this.setPkhSkh(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.hasPkhSkh = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    network: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;\n  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());\n      msg.setNetwork(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getNetwork();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoNetwork network = 1;\n * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getNetwork = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setNetwork = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional bool display = 2;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n/**\n * optional CardanoScriptConfig script_config = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_ = [2,3,6,7];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    network: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    inputsList: jspb.Message.toObjectList(msg.getInputsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject, includeInstance),\n    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject, includeInstance),\n    fee: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    ttl: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    certificatesList: jspb.Message.toObjectList(msg.getCertificatesList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject, includeInstance),\n    withdrawalsList: jspb.Message.toObjectList(msg.getWithdrawalsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject, includeInstance),\n    validityIntervalStart: jspb.Message.getFieldWithDefault(msg, 8, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());\n      msg.setNetwork(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader);\n      msg.addInputs(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader);\n      msg.addOutputs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setFee(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setTtl(value);\n      break;\n    case 6:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader);\n      msg.addCertificates(value);\n      break;\n    case 7:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader);\n      msg.addWithdrawals(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValidityIntervalStart(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getNetwork();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getInputsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter\n    );\n  }\n  f = message.getOutputsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter\n    );\n  }\n  f = message.getFee();\n  if (f !== 0) {\n    writer.writeUint64(\n      4,\n      f\n    );\n  }\n  f = message.getTtl();\n  if (f !== 0) {\n    writer.writeUint64(\n      5,\n      f\n    );\n  }\n  f = message.getCertificatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      6,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter\n    );\n  }\n  f = message.getWithdrawalsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      7,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter\n    );\n  }\n  f = message.getValidityIntervalStart();\n  if (f !== 0) {\n    writer.writeUint64(\n      8,\n      f\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    prevOutHash: msg.getPrevOutHash_asB64(),\n    prevOutIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevOutHash(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevOutIndex(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getPrevOutHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getPrevOutIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional uint32 prev_out_index = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    encodedAddress: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    value: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setEncodedAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEncodedAddress();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string encoded_address = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getEncodedAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setEncodedAddress = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint64 value = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional CardanoScriptConfig script_config = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase = {\n  CERT_NOT_SET: 0,\n  STAKE_REGISTRATION: 1,\n  STAKE_DEREGISTRATION: 2,\n  STAKE_DELEGATION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getCertCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    stakeRegistration: (f = msg.getStakeRegistration()) && common_pb.Keypath.toObject(includeInstance, f),\n    stakeDeregistration: (f = msg.getStakeDeregistration()) && common_pb.Keypath.toObject(includeInstance, f),\n    stakeDelegation: (f = msg.getStakeDelegation()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.setStakeRegistration(value);\n      break;\n    case 2:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.setStakeDeregistration(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader);\n      msg.setStakeDelegation(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getStakeRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getStakeDeregistration();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getStakeDelegation();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    poolKeyhash: msg.getPoolKeyhash_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPoolKeyhash(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getPoolKeyhash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * This is a type-conversion wrapper around `getPoolKeyhash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPoolKeyhash()));\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPoolKeyhash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPoolKeyhash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setPoolKeyhash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional Keypath stake_registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (\n    jspb.Message.getWrapperField(this, common_pb.Keypath, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeRegistration = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeRegistration = function() {\n  return this.setStakeRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Keypath stake_deregistration = 2;\n * @return {?proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDeregistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (\n    jspb.Message.getWrapperField(this, common_pb.Keypath, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDeregistration = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDeregistration = function() {\n  return this.setStakeDeregistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDeregistration = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional StakeDelegation stake_delegation = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDelegation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDelegation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDelegation = function() {\n  return this.setStakeDelegation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDelegation = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    value: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint64 value = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional CardanoNetwork network = 1;\n * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getNetwork = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setNetwork = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated Input inputs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getInputsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setInputsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addInputs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearInputsList = function() {\n  return this.setInputsList([]);\n};\n\n\n/**\n * repeated Output outputs = 3;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getOutputsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, 3));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setOutputsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addOutputs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearOutputsList = function() {\n  return this.setOutputsList([]);\n};\n\n\n/**\n * optional uint64 fee = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getFee = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setFee = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional uint64 ttl = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getTtl = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setTtl = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * repeated Certificate certificates = 6;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getCertificatesList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, 6));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setCertificatesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addCertificates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearCertificatesList = function() {\n  return this.setCertificatesList([]);\n};\n\n\n/**\n * repeated Withdrawal withdrawals = 7;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getWithdrawalsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, 7));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setWithdrawalsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addWithdrawals = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearWithdrawalsList = function() {\n  return this.setWithdrawalsList([]);\n};\n\n\n/**\n * optional uint64 validity_interval_start = 8;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getValidityIntervalStart = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setValidityIntervalStart = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    shelleyWitnessesList: jspb.Message.toObjectList(msg.getShelleyWitnessesList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader);\n      msg.addShelleyWitnesses(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getShelleyWitnessesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    publicKey: msg.getPublicKey_asB64(),\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPublicKey(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPublicKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes public_key = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes public_key = 1;\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPublicKey()));\n};\n\n\n/**\n * optional bytes public_key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPublicKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setPublicKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes signature = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes signature = 2;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * repeated ShelleyWitness shelley_witnesses = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.getShelleyWitnessesList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.setShelleyWitnessesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.addShelleyWitnesses = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.clearShelleyWitnessesList = function() {\n  return this.setShelleyWitnessesList([]);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  XPUBS: 1,\n  ADDRESS: 2,\n  SIGN_TRANSACTION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(includeInstance, f),\n    address: (f = msg.getAddress()) && proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(includeInstance, f),\n    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoRequest;\n  return proto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader);\n      msg.setXpubs(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader);\n      msg.setAddress(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader);\n      msg.setSignTransaction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubs();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAddress();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignTransaction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoXpubsRequest xpubs = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getXpubs = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setXpubs = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearXpubs = function() {\n  return this.setXpubs(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasXpubs = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional CardanoAddressRequest address = 2;\n * @return {?proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getAddress = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoAddressRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoAddressRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoAddressRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setAddress = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearAddress = function() {\n  return this.setAddress(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasAddress = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional CardanoSignTransactionRequest sign_transaction = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getSignTransaction = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setSignTransaction = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearSignTransaction = function() {\n  return this.setSignTransaction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasSignTransaction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  XPUBS: 1,\n  PUB: 2,\n  SIGN_TRANSACTION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(includeInstance, f),\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoResponse;\n  return proto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader);\n      msg.setXpubs(value);\n      break;\n    case 2:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader);\n      msg.setSignTransaction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubs();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignTransaction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoXpubsResponse xpubs = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getXpubs = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsResponse, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setXpubs = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearXpubs = function() {\n  return this.setXpubs(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasXpubs = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional PubResponse pub = 2;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional CardanoSignTransactionResponse sign_transaction = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getSignTransaction = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setSignTransaction = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearSignTransaction = function() {\n  return this.setSignTransaction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasSignTransaction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoNetwork = {\n  CARDANOMAINNET: 0,\n  CARDANOTESTNET: 1\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: keystore.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.displayName = 'proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.displayName = 'proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest;\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    key: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse;\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKey();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string key = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.getKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.setKey = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n"],"sourceRoot":""}