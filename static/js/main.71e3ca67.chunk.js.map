{"version":3,"sources":["proto/mnemonic_pb.js","proto/system_pb.js","proto/perform_attestation_pb.js","api/utils.ts","api/handshake.ts","api/messages.ts","api/uh2Frame.ts","api/errors.ts","api/device.ts","context/contexts.tsx","utils/hooks.ts","views/ConnectingView.tsx","App.tsx","reportWebVitals.ts","index.tsx","proto/eth_pb.js","proto/common_pb.js","proto/hww_pb.js","proto/antiklepto_pb.js","proto/backup_commands_pb.js","proto/bitbox02_system_pb.js","proto/btc_pb.js","proto/cardano_pb.js","proto/keystore_pb.js"],"names":["jspb","require","goog","global","this","window","self","Function","call","exportSymbol","proto","shiftcrypto","bitbox02","ShowMnemonicRequest","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","RestoreFromMnemonicRequest","SetMnemonicPassphraseEnabledRequest","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","obj","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","timestamp","getFieldWithDefault","timezoneOffset","value","readUint32","setTimestamp","readInt32","setTimezoneOffset","f","undefined","getTimestamp","writeUint32","getTimezoneOffset","writeInt32","setProto3IntField","enabled","getBooleanFieldWithDefault","readBool","setEnabled","getEnabled","writeBool","setProto3BooleanField","object","extend","exports","RebootRequest","purpose","readEnum","setPurpose","getPurpose","writeEnum","Purpose","UPGRADE","SETTINGS","setProto3EnumField","PerformAttestationRequest","PerformAttestationResponse","challenge","getChallenge_asB64","readBytes","setChallenge","getChallenge_asU8","length","writeBytes","getChallenge","bytesAsB64","bytesAsU8","setProto3BytesField","bootloaderHash","getBootloaderHash_asB64","devicePubkey","getDevicePubkey_asB64","certificate","getCertificate_asB64","rootPubkeyIdentifier","getRootPubkeyIdentifier_asB64","challengeSignature","getChallengeSignature_asB64","setBootloaderHash","setDevicePubkey","setCertificate","setRootPubkeyIdentifier","setChallengeSignature","getBootloaderHash_asU8","getDevicePubkey_asU8","getCertificate_asU8","getRootPubkeyIdentifier_asU8","getChallengeSignature_asU8","getBootloaderHash","getDevicePubkey","getCertificate","getRootPubkeyIdentifier","getChallengeSignature","add","accumulator","a","u8join","params","size","map","e","reduce","uint8","Uint8Array","pos","arr","set","HARDENED","getKeypathFromString","keypathString","levels","toLowerCase","split","Error","slice","level","hardened","substring","x","parseInt","isNaN","Rust","fakeAttestation","from","unlock","cleanYourHandsBeforeHandshake","inHandshake","device","send","info","attestation","unlocked","handshake","r","Noise","new","init","write","response","read","share","deviceStatus","encrypted","deviceAcceptedPairing","crypto","encrypt","data","out","decrypt","infoRequest","textDecoder","TextDecoder","infoDigest","vLength","vString","decode","versions","match","parseFloat","version","major","minor","patch","platformId","editionId","infoQuery","channel","sizeToPackets","Math","ceil","headerInfo","packets","bytesToPackages","Array","keys","totalToWrite","offset","i","packet","fill","maxLengthToWrite","writeOf","min","subarray","DataView","Uint16Array","buffer","getUint8","packagesToBytes","frame","start","BitBoxError","id","NotCompatibleBrowser","DevicePairingRejected","DeviceExternallyClosed","NoDeviceSelected","DeviceClosedByApp","sleep","ms","Promise","resolve","setTimeout","retryPacket","showCode","withOp","withoutOp","ethPublic","req","ETHPubRequest","setCoin","ETHCoin","ETH","setKeypathList","setDisplay","setOutputType","OutputType","ADDRESS","setContractAddress","wr","ETHRequest","setPub","wr2","Request","setEth","resp","Response","connect","onInfo","onClose","navigator","hid","requestDevice","filters","vendorId","HIDs","HID","opened","open","listenDisconnects","event","Object","is","removeEventListener","addEventListener","performance","now","sent","opCode","query","waitFrames","console","log","forEach","sendReport","prom","resolver","rejected","allPackets","oninputreport","then","catch","push","receivedData","time","toFixed","received","DOMException","defineProperty","get","newValue","enumerable","configurable","enc","close","eth","DeviceContext","createContext","DeviceContextProvider","children","useState","setInfo","closeError","setCloseError","asyncFunction","immediate","status","setStatus","setValue","error","setError","execute","useCallback","useEffect","useAsync","deviceConnect","Provider","connected","connecting","ConnectingBadges","useContext","direction","justify","variant","colorScheme","boxSize","as","UnlockIcon","LockIcon","ViewOffIcon","ViewIcon","ConnectingState","color","rounded","padding","backgroundColor","spacing","CheckIcon","TimeIcon","ConnectingView","App","h","maxWidth","width","margin","onClick","isLoading","loadingText","disabled","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","common_pb","antiklepto_pb","repeatedFields_","ETHSignRequest","ETHSignMessageRequest","ETHSignResponse","oneofGroups_","ETHResponse","keypathList","getRepeatedField","coin","outputType","display","contractAddress","getContractAddress_asB64","values","isDelimited","readPackedUint32","addKeypath","getKeypathList","writePackedUint32","getCoin","getOutputType","getDisplay","getContractAddress_asU8","XPUB","setField","opt_index","addToRepeatedField","clearKeypathList","getContractAddress","nonce","getNonce_asB64","gasPrice","getGasPrice_asB64","gasLimit","getGasLimit_asB64","recipient","getRecipient_asB64","getValue_asB64","getData_asB64","hostNonceCommitment","getHostNonceCommitment","AntiKleptoHostNonceCommitment","setNonce","setGasPrice","setGasLimit","setRecipient","setData","readMessage","setHostNonceCommitment","getNonce_asU8","getGasPrice_asU8","getGasLimit_asU8","getRecipient_asU8","getValue_asU8","getData_asU8","writeMessage","getNonce","getGasPrice","getGasLimit","getRecipient","getValue","getData","getWrapperField","setWrapperField","clearHostNonceCommitment","hasHostNonceCommitment","getField","getMsg_asB64","setMsg","getMsg_asU8","getMsg","signature","getSignature_asB64","setSignature","getSignature_asU8","getSignature","RequestCase","REQUEST_NOT_SET","PUB","SIGN","SIGN_MSG","ANTIKLEPTO_SIGNATURE","getRequestCase","computeOneofCase","pub","getPub","sign","getSign","signMsg","getSignMsg","antikleptoSignature","getAntikleptoSignature","AntiKleptoSignatureRequest","setSign","setSignMsg","setAntikleptoSignature","setOneofWrapperField","clearPub","hasPub","clearSign","hasSign","clearSignMsg","hasSignMsg","clearAntikleptoSignature","hasAntikleptoSignature","ResponseCase","RESPONSE_NOT_SET","ANTIKLEPTO_SIGNER_COMMITMENT","getResponseCase","PubResponse","antikleptoSignerCommitment","getAntikleptoSignerCommitment","AntiKleptoSignerCommitment","setAntikleptoSignerCommitment","clearAntikleptoSignerCommitment","hasAntikleptoSignerCommitment","ROPSTENETH","RINKEBYETH","RootFingerprintRequest","RootFingerprintResponse","XPub","Keypath","readString","writeString","setProto3StringField","fingerprint","getFingerprint_asB64","setFingerprint","getFingerprint_asU8","getFingerprint","depth","getDepth_asB64","parentFingerprint","getParentFingerprint_asB64","childNum","chainCode","getChainCode_asB64","publicKey","getPublicKey_asB64","setDepth","setParentFingerprint","setChildNum","setChainCode","setPublicKey","getDepth_asU8","getParentFingerprint_asU8","getChildNum","getChainCode_asU8","getPublicKey_asU8","getDepth","getParentFingerprint","getChainCode","getPublicKey","backup_commands_pb","bitbox02_system_pb","btc_pb","cardano_pb","eth_pb","keystore_pb","mnemonic_pb","system_pb","perform_attestation_pb","Success","code","setCode","setMessage","getCode","getMessage","DEVICE_NAME","DEVICE_LANGUAGE","DEVICE_INFO","SET_PASSWORD","CREATE_BACKUP","SHOW_MNEMONIC","BTC_PUB","BTC_SIGN_INIT","BTC_SIGN_INPUT","BTC_SIGN_OUTPUT","INSERT_REMOVE_SDCARD","CHECK_SDCARD","SET_MNEMONIC_PASSPHRASE_ENABLED","LIST_BACKUPS","RESTORE_BACKUP","PERFORM_ATTESTATION","REBOOT","CHECK_BACKUP","RESET","RESTORE_FROM_MNEMONIC","FINGERPRINT","BTC","ELECTRUM_ENCRYPTION_KEY","CARDANO","deviceName","getDeviceName","SetDeviceNameRequest","deviceLanguage","getDeviceLanguage","SetDeviceLanguageRequest","deviceInfo","getDeviceInfo","DeviceInfoRequest","setPassword","getSetPassword","SetPasswordRequest","createBackup","getCreateBackup","CreateBackupRequest","showMnemonic","getShowMnemonic","btcPub","getBtcPub","BTCPubRequest","btcSignInit","getBtcSignInit","BTCSignInitRequest","btcSignInput","getBtcSignInput","BTCSignInputRequest","btcSignOutput","getBtcSignOutput","BTCSignOutputRequest","insertRemoveSdcard","getInsertRemoveSdcard","InsertRemoveSDCardRequest","checkSdcard","getCheckSdcard","CheckSDCardRequest","setMnemonicPassphraseEnabled","getSetMnemonicPassphraseEnabled","listBackups","getListBackups","ListBackupsRequest","restoreBackup","getRestoreBackup","RestoreBackupRequest","performAttestation","getPerformAttestation","reboot","getReboot","checkBackup","getCheckBackup","CheckBackupRequest","getEth","reset","getReset","ResetRequest","restoreFromMnemonic","getRestoreFromMnemonic","btc","getBtc","BTCRequest","electrumEncryptionKey","getElectrumEncryptionKey","ElectrumEncryptionKeyRequest","cardano","getCardano","CardanoRequest","setDeviceName","setDeviceLanguage","setDeviceInfo","setSetPassword","setCreateBackup","setShowMnemonic","setBtcPub","setBtcSignInit","setBtcSignInput","setBtcSignOutput","setInsertRemoveSdcard","setCheckSdcard","setSetMnemonicPassphraseEnabled","setListBackups","setRestoreBackup","setPerformAttestation","setReboot","setCheckBackup","setReset","setRestoreFromMnemonic","setBtc","setElectrumEncryptionKey","setCardano","clearDeviceName","hasDeviceName","clearDeviceLanguage","hasDeviceLanguage","clearDeviceInfo","hasDeviceInfo","clearSetPassword","hasSetPassword","clearCreateBackup","hasCreateBackup","clearShowMnemonic","hasShowMnemonic","clearBtcPub","hasBtcPub","clearBtcSignInit","hasBtcSignInit","clearBtcSignInput","hasBtcSignInput","clearBtcSignOutput","hasBtcSignOutput","clearInsertRemoveSdcard","hasInsertRemoveSdcard","clearCheckSdcard","hasCheckSdcard","clearSetMnemonicPassphraseEnabled","hasSetMnemonicPassphraseEnabled","clearListBackups","hasListBackups","clearRestoreBackup","hasRestoreBackup","clearPerformAttestation","hasPerformAttestation","clearReboot","hasReboot","clearCheckBackup","hasCheckBackup","clearEth","hasEth","clearReset","hasReset","clearRestoreFromMnemonic","hasRestoreFromMnemonic","clearFingerprint","hasFingerprint","clearBtc","hasBtc","clearElectrumEncryptionKey","hasElectrumEncryptionKey","clearCardano","hasCardano","SUCCESS","ERROR","BTC_SIGN_NEXT","success","getSuccess","getError","DeviceInfoResponse","btcSignNext","getBtcSignNext","BTCSignNextResponse","ListBackupsResponse","CheckBackupResponse","CheckSDCardResponse","BTCResponse","ElectrumEncryptionKeyResponse","CardanoResponse","setSuccess","setBtcSignNext","clearSuccess","hasSuccess","clearError","hasError","clearBtcSignNext","hasBtcSignNext","commitment","getCommitment_asB64","setCommitment","getCommitment_asU8","getCommitment","hostNonce","getHostNonce_asB64","setHostNonce","getHostNonce_asU8","getHostNonce","BackupInfo","silent","setSilent","getSilent","setId","getId","name","setName","getName","infoList","toObjectList","getInfoList","addInfo","writeRepeatedMessage","getRepeatedWrapperField","setInfoList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearInfoList","inserted","setInserted","getInserted","initialized","mnemonicPassphraseEnabled","monotonicIncrementsRemaining","securechipModel","setInitialized","setVersion","setMonotonicIncrementsRemaining","setSecurechipModel","getInitialized","getVersion","getMnemonicPassphraseEnabled","getMonotonicIncrementsRemaining","getSecurechipModel","action","setAction","getAction","SDCardAction","REMOVE_CARD","INSERT_CARD","language","setLanguage","getLanguage","entropy","getEntropy_asB64","setEntropy","getEntropy_asU8","getEntropy","BTCScriptConfig","Multisig","BTCScriptConfigWithKeypath","BTCScriptConfigRegistration","BTCSuccess","BTCIsScriptConfigRegisteredRequest","BTCIsScriptConfigRegisteredResponse","BTCRegisterScriptConfigRequest","BTCPrevTxInitRequest","BTCPrevTxInputRequest","BTCPrevTxOutputRequest","BTCSignMessageRequest","BTCSignMessageResponse","ConfigCase","CONFIG_NOT_SET","SIMPLE_TYPE","MULTISIG","getConfigCase","simpleType","multisig","getMultisig","setSimpleType","setMultisig","SimpleType","P2WPKH_P2SH","P2WPKH","threshold","xpubsList","getXpubsList","ourXpubIndex","scriptType","setThreshold","addXpubs","setOurXpubIndex","setScriptType","getThreshold","getOurXpubIndex","getScriptType","ScriptType","P2WSH","P2WSH_P2SH","setXpubsList","clearXpubsList","getSimpleType","setOneofField","clearSimpleType","hasSimpleType","clearMultisig","hasMultisig","OutputCase","OUTPUT_NOT_SET","XPUB_TYPE","SCRIPT_CONFIG","getOutputCase","xpubType","scriptConfig","getScriptConfig","setXpubType","setScriptConfig","XPubType","TPUB","YPUB","ZPUB","VPUB","UPUB","CAPITAL_VPUB","CAPITAL_ZPUB","CAPITAL_UPUB","CAPITAL_YPUB","getXpubType","clearXpubType","hasXpubType","clearScriptConfig","hasScriptConfig","scriptConfigsList","getScriptConfigsList","numInputs","numOutputs","locktime","addScriptConfigs","setNumInputs","setNumOutputs","setLocktime","getNumInputs","getNumOutputs","getLocktime","setScriptConfigsList","clearScriptConfigsList","type","index","hasSignature","prevIndex","antiKleptoSignerCommitment","getAntiKleptoSignerCommitment","setType","setIndex","setHasSignature","setPrevIndex","setAntiKleptoSignerCommitment","getType","getIndex","getHasSignature","getPrevIndex","Type","INPUT","OUTPUT","DONE","PREVTX_INIT","PREVTX_INPUT","PREVTX_OUTPUT","HOST_NONCE","clearAntiKleptoSignerCommitment","hasAntiKleptoSignerCommitment","prevouthash","getPrevouthash_asB64","prevoutindex","prevoutvalue","sequence","scriptConfigIndex","setPrevouthash","setPrevoutindex","readUint64","setPrevoutvalue","setSequence","setScriptConfigIndex","getPrevouthash_asU8","getPrevoutindex","getPrevoutvalue","writeUint64","getSequence","getScriptConfigIndex","getPrevouthash","ours","hash","getHash_asB64","setOurs","setHash","getOurs","getHash_asU8","getHash","registration","getRegistration","setRegistration","clearRegistration","hasRegistration","isRegistered","setIsRegistered","getIsRegistered","AUTO_ELECTRUM","AUTO_XPUB_TPUB","prevOutHash","getPrevOutHash_asB64","prevOutIndex","signatureScript","getSignatureScript_asB64","setPrevOutHash","setPrevOutIndex","setSignatureScript","getPrevOutHash_asU8","getPrevOutIndex","getSignatureScript_asU8","getPrevOutHash","getSignatureScript","pubkeyScript","getPubkeyScript_asB64","setPubkeyScript","getPubkeyScript_asU8","getPubkeyScript","IS_SCRIPT_CONFIG_REGISTERED","REGISTER_SCRIPT_CONFIG","SIGN_MESSAGE","isScriptConfigRegistered","getIsScriptConfigRegistered","registerScriptConfig","getRegisterScriptConfig","prevtxInit","getPrevtxInit","prevtxInput","getPrevtxInput","prevtxOutput","getPrevtxOutput","signMessage","getSignMessage","setIsScriptConfigRegistered","setRegisterScriptConfig","setPrevtxInit","setPrevtxInput","setPrevtxOutput","setSignMessage","clearIsScriptConfigRegistered","hasIsScriptConfigRegistered","clearRegisterScriptConfig","hasRegisterScriptConfig","clearPrevtxInit","hasPrevtxInit","clearPrevtxInput","hasPrevtxInput","clearPrevtxOutput","hasPrevtxOutput","clearSignMessage","hasSignMessage","SIGN_NEXT","signNext","getSignNext","setSignNext","clearSignNext","hasSignNext","BTCCoin","TBTC","LTC","TLTC","BTCOutputType","UNKNOWN","P2PKH","P2SH","CardanoXpubsRequest","CardanoXpubsResponse","CardanoScriptConfig","PkhSkh","CardanoAddressRequest","CardanoSignTransactionRequest","Input","Output","Certificate","StakeDelegation","Withdrawal","CardanoSignTransactionResponse","ShelleyWitness","keypathsList","getKeypathsList","addKeypaths","setKeypathsList","clearKeypathsList","getXpubsList_asB64","getXpubsList_asU8","writeRepeatedBytes","bytesListAsB64","bytesListAsU8","PKH_SKH","pkhSkh","getPkhSkh","setPkhSkh","keypathPaymentList","keypathStakeList","addKeypathPayment","addKeypathStake","getKeypathPaymentList","getKeypathStakeList","setKeypathPaymentList","clearKeypathPaymentList","setKeypathStakeList","clearKeypathStakeList","clearPkhSkh","hasPkhSkh","network","setNetwork","getNetwork","inputsList","getInputsList","outputsList","getOutputsList","fee","ttl","certificatesList","getCertificatesList","withdrawalsList","getWithdrawalsList","validityIntervalStart","addInputs","addOutputs","setFee","setTtl","addCertificates","addWithdrawals","setValidityIntervalStart","getFee","getTtl","getValidityIntervalStart","encodedAddress","setEncodedAddress","getEncodedAddress","CertCase","CERT_NOT_SET","STAKE_REGISTRATION","STAKE_DEREGISTRATION","STAKE_DELEGATION","getCertCase","stakeRegistration","getStakeRegistration","stakeDeregistration","getStakeDeregistration","stakeDelegation","getStakeDelegation","setStakeRegistration","setStakeDeregistration","setStakeDelegation","poolKeyhash","getPoolKeyhash_asB64","setPoolKeyhash","getPoolKeyhash_asU8","getPoolKeyhash","clearStakeRegistration","hasStakeRegistration","clearStakeDeregistration","hasStakeDeregistration","clearStakeDelegation","hasStakeDelegation","setInputsList","clearInputsList","setOutputsList","clearOutputsList","setCertificatesList","clearCertificatesList","setWithdrawalsList","clearWithdrawalsList","shelleyWitnessesList","getShelleyWitnessesList","addShelleyWitnesses","setShelleyWitnessesList","clearShelleyWitnessesList","XPUBS","SIGN_TRANSACTION","xpubs","getXpubs","address","getAddress","signTransaction","getSignTransaction","setXpubs","setAddress","setSignTransaction","clearXpubs","hasXpubs","clearAddress","hasAddress","clearSignTransaction","hasSignTransaction","CardanoNetwork","CARDANOMAINNET","CARDANOTESTNET","key","setKey","getKey"],"mappings":"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","file":"static/js/main.71e3ca67.chunk.js","sourcesContent":["// source: mnemonic.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ShowMnemonicRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ShowMnemonicRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ShowMnemonicRequest.displayName = 'proto.shiftcrypto.bitbox02.ShowMnemonicRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.displayName = 'proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.displayName = 'proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ShowMnemonicRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ShowMnemonicRequest;\n  return proto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ShowMnemonicRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest;\n  return proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 timestamp = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest;\n  return proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setEnabled(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEnabled();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool enabled = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.getEnabled = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.setEnabled = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: system.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RebootRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RebootRequest.Purpose', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RebootRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RebootRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RebootRequest.displayName = 'proto.shiftcrypto.bitbox02.RebootRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RebootRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RebootRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    purpose: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RebootRequest;\n  return proto.shiftcrypto.bitbox02.RebootRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} */ (reader.readEnum());\n      msg.setPurpose(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RebootRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RebootRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPurpose();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.Purpose = {\n  UPGRADE: 0,\n  SETTINGS: 1\n};\n\n/**\n * optional Purpose purpose = 1;\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.getPurpose = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} value\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.setPurpose = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: perform_attestation.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PerformAttestationRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PerformAttestationResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PerformAttestationRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PerformAttestationRequest.displayName = 'proto.shiftcrypto.bitbox02.PerformAttestationRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PerformAttestationResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PerformAttestationResponse.displayName = 'proto.shiftcrypto.bitbox02.PerformAttestationResponse';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PerformAttestationRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    challenge: msg.getChallenge_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PerformAttestationRequest;\n  return proto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChallenge(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PerformAttestationRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getChallenge_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes challenge = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes challenge = 1;\n * This is a type-conversion wrapper around `getChallenge()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChallenge()));\n};\n\n\n/**\n * optional bytes challenge = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChallenge()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChallenge()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.setChallenge = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PerformAttestationResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    bootloaderHash: msg.getBootloaderHash_asB64(),\n    devicePubkey: msg.getDevicePubkey_asB64(),\n    certificate: msg.getCertificate_asB64(),\n    rootPubkeyIdentifier: msg.getRootPubkeyIdentifier_asB64(),\n    challengeSignature: msg.getChallengeSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PerformAttestationResponse;\n  return proto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBootloaderHash(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDevicePubkey(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCertificate(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRootPubkeyIdentifier(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChallengeSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PerformAttestationResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getBootloaderHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getDevicePubkey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getCertificate_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getRootPubkeyIdentifier_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getChallengeSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * This is a type-conversion wrapper around `getBootloaderHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBootloaderHash()));\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBootloaderHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBootloaderHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setBootloaderHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * This is a type-conversion wrapper around `getDevicePubkey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDevicePubkey()));\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDevicePubkey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDevicePubkey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setDevicePubkey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes certificate = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes certificate = 3;\n * This is a type-conversion wrapper around `getCertificate()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCertificate()));\n};\n\n\n/**\n * optional bytes certificate = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCertificate()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCertificate()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setCertificate = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * This is a type-conversion wrapper around `getRootPubkeyIdentifier()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRootPubkeyIdentifier()));\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRootPubkeyIdentifier()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRootPubkeyIdentifier()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setRootPubkeyIdentifier = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * This is a type-conversion wrapper around `getChallengeSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChallengeSignature()));\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChallengeSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChallengeSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setChallengeSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","function add(accumulator: number, a: number) {\n  return accumulator + a;\n}\n\nexport const u8join = (...params: Uint8Array[]): Uint8Array => { \n  let size = params.map(e => e.length).reduce(add, 0);\n  const uint8 = new Uint8Array(size); \n  let pos = 0;\n  for(let arr of params){\n    uint8.set(arr, pos);\n    pos += arr.length;\n  }\n  return uint8;\n}\n\n\nconst HARDENED = 0x80000000;\n\n\n/**\n * @param keypathString keypath in string format e.g. m/44'/1'/0'/0\n * @returns keypath as array e.g. [2147483692, 2147483649, 2147483648, 0]\n */\n export const getKeypathFromString = (keypathString: string) => {\n  let levels = keypathString.toLowerCase().split('/');\n  if (levels[0] !== 'm') throw new Error('Invalid keypath');\n  levels = levels.slice(1);\n\n  return levels.map(level => {\n      let hardened = false;\n      if (level.substring(level.length - 1) === \"'\") {\n          hardened = true\n      }\n      let x = parseInt(level, 10);\n      if (isNaN(x) || x < 0 || x >= HARDENED) {\n          throw new Error('Invalid keypath');\n      }\n      if (hardened) x += HARDENED;\n      return x;\n  })\n}\n","import { Device, Encryption } from './device'\nimport { u8join } from './utils';\nconst Rust = import('noise-wasm');\n\nconst fakeAttestation = Uint8Array.from([0, 97, 39, 192, 192, 192, 72, 254, 120, 86, 137, 4, 226, 24, 107, 229, 59, 102, 237, 166, 155, 79, 42, 155, 132, 103, 119, 237, 246, 254, 75, 172, 108, 74])\nconst unlock = Uint8Array.from([0, 117]);\nconst cleanYourHandsBeforeHandshake = Uint8Array.from([0, 104]);\nconst inHandshake = Uint8Array.from([0, 72]);\n\nexport const initialize = async (device: Pick<Device, \"send\" | \"info\">) => {\n  const { send } = device;\n  await send(fakeAttestation);\n\n  device.info = {...device.info, attestation: true}\n\n  if (!device.info.unlocked){\n    await send(unlock);\n    device.info = {...device.info, unlocked: true}\n  }\n}\n\nexport const handshake = async (device: Pick<Device, \"send\" | \"info\">) => {\n  await device.send(cleanYourHandsBeforeHandshake);\n\n  let r = (await Rust).Noise.new()\n  // send initial 32 bytes handshake\n  let init = new Uint8Array(32);\n  r.write(new Uint8Array(), init);\n  let response = await device.send(u8join(inHandshake, init));\n\n  //digest info\n  r.read(response.slice(2,98), new Uint8Array(0));\n\n  // send final ack\n  let share = new Uint8Array(64)\n  r.write(new Uint8Array(), share);\n\n  let deviceStatus = (await device.send(u8join(inHandshake, share)))[2];\n\n  device.info = { ...device.info, encrypted: true, deviceAcceptedPairing: deviceStatus === 0 ? true : null }\n\n  const crypto: Encryption = {\n    encrypt: (data) => {\n      let out = new Uint8Array(data.length + 16);\n      r.encrypt(data, out);\n      return out\n    },\n    decrypt: (data) => {\n      let out = new Uint8Array(data.length - 16);\n      r.decrypt(data, out);\n      return out\n    }\n  }\n\n  return crypto;\n}\n","import { Device } from \"./device\";\n\nexport const infoRequest = Uint8Array.from([105]);\n\nconst textDecoder = new TextDecoder();\n\nexport interface Info {\n  version?: {\n    major: number\n    minor: number\n    patch: number\n  }\n  platformId?: number\n  editionId?: number\n  unlocked?: boolean\n  attestation?: boolean\n  encrypted?: boolean \n  deviceAcceptedPairing?: null | boolean // undefined: unknown, null: checking, false: rejected, true: accepted \n}\n\nexport const infoDigest = (data: Uint8Array): Info => {\n  const vLength = data[0];\n  const vString = textDecoder.decode(data.slice(1, 1 + vLength));\n  const info = data.slice(1 + vLength);\n  const versions = vString.match(/[0-9]+/g)!.map(parseFloat);\n  return {\n    version: {\n      major: versions[0],\n      minor: versions[1],\n      patch: versions[2]\n    },\n    platformId: info[0],\n    editionId: info[1],\n    unlocked: !!info[2]\n  }\n}\n\nexport const infoQuery = async (device: Pick<Device, \"send\" | \"info\">) => {\n  device.info = { \n    ...device.info, \n    ...infoDigest(await device.send(infoRequest))\n  };\n}\n","const channel = Uint8Array.from([255, 0, 0, 0]);\nconst command = 193\n\nconst sizeToPackets = (size: number) => Math.ceil((size-57) / 59) + 1\n\nexport const headerInfo = (bytes: Uint8Array) => {\n  const size = bytes[5] * 256 + bytes[6] \n  return {\n    size,\n    packets: sizeToPackets(size)\n  }\n} \n\nexport const bytesToPackages = (bytes: Uint8Array): Uint8Array[] => {\n  const packets = Array.from(Array(sizeToPackets(bytes.length)).keys(), () => new Uint8Array(64));\n\n  const totalToWrite = bytes.length;\n  let offset = 0;\n\n  for(let i = 0; i < packets.length; i++){\n    const packet = packets[i];\n    packet.fill(238);\n    packet.set(channel);\n    packet.set([i === 0 ? command : (i-i)], 4);\n\n    const maxLengthToWrite = 64 - ( i===0 ? 7 : 5 );\n    const writeOf = Math.min(totalToWrite - offset, maxLengthToWrite);\n    \n    packet.set(bytes.subarray(offset, offset + writeOf), i===0 ? 7 : 5) \n\n    offset += writeOf;\n  }\n  let length = new DataView(Uint16Array.from([bytes.length]).buffer)\n  packets[0].set([length.getUint8(1), length.getUint8(0)], 5);\n  return packets;\n}\n\nexport const packagesToBytes = (packets: Uint8Array[]): Uint8Array => {\n  const { size } = headerInfo(packets[0]); \n  let frame = new Uint8Array(size);\n  let pos = 0;\n  for(let i = 0; i < packets.length; i++){\n    let read = Math.min(size-pos, i===0 ? 57 : 59)\n    let start = i===0 ? 7 : 5\n    frame.set(\n      packets[i].slice(start, start + read),\n      pos\n    )\n    pos += read;\n  }\n  return frame;\n}\n","export class BitBoxError extends Error {\n  public id: number;\n  constructor(message: string, id: number){\n    super(message);\n    this.id = id;\n  }\n}\n\nexport const NotCompatibleBrowser = new BitBoxError(\"Not compatible browser\", 0);\n\nexport const DeviceVersionMismatch = new BitBoxError(\"Device version must be greater than 7.0.0\", 1);\n\nexport const UserDisconnectedDevice = new BitBoxError(\"User disconnected the BitBox device\", 2);\n\nexport const DevicePairingRejected = new BitBoxError(\"Device rejected pairing code\", 3);\n\nexport const DeviceExternallyClosed = new BitBoxError(\"Device Disconnected or Owned by another Application\", 4);\n\nexport const NoDeviceSelected = new BitBoxError(\"No device has been selected on the Browser\", 5);\n\nexport const DeviceClosedByApp = new BitBoxError(\"Device Closed imperatively by App\", 6);\n","import { handshake, initialize } from \"./handshake\"\nimport { Info, infoQuery } from \"./messages\"\nimport { packagesToBytes, bytesToPackages, headerInfo } from \"./uh2Frame\"\nimport { ETHCoin, ETHPubRequest, ETHRequest } from '../proto/eth_pb';\nimport { Request, Response } from '../proto/hww_pb'\nimport { getKeypathFromString, u8join } from \"./utils\";\nimport { DeviceExternallyClosed, DevicePairingRejected, NoDeviceSelected, NotCompatibleBrowser, BitBoxError, DeviceClosedByApp } from \"./errors\";\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst retryPacket = bytesToPackages(Uint8Array.from([1]))[0];\n\nconst showCode = Uint8Array.from([0, 118]);\n\nexport type SendHID = (data: Uint8Array) => Promise<Uint8Array>\n\nexport interface Encryption {\n  encrypt: (data: Uint8Array) => Uint8Array\n  decrypt: (data: Uint8Array) => Uint8Array\n}\nexport interface Device {\n  send: SendHID\n  info: Info\n  close: () => void\n  eth: () => Promise<Response.AsObject>\n}\ninterface connectOptions {\n  onInfo?: (info: Info) => any;\n  onClose?: (error: BitBoxError) => any;\n}\n\nconst withOp = (data: Uint8Array) => u8join(Uint8Array.from([0, 110]), data) \nconst withoutOp = (data: Uint8Array) => data.slice(2) \n\nconst ethPublic = (send: SendHID, {encrypt, decrypt}: Encryption ) => async (): Promise<Response.AsObject> => {\n  let req = new ETHPubRequest()\n  req.setCoin(ETHCoin.ETH)\n  req.setKeypathList(getKeypathFromString(\"m/44'/60'/0'/0/0\"))\n  req.setDisplay(true)\n  req.setOutputType(ETHPubRequest.OutputType.ADDRESS)\n  req.setContractAddress(new Uint8Array())\n  let wr = new ETHRequest();\n  wr.setPub(req);\n  let wr2 = new Request();\n  wr2.setEth(wr);\n  let data = wr2.serializeBinary();\n  let resp = decrypt(withoutOp(await send(withOp(encrypt(data)))));\n  return Response.deserializeBinary(resp).toObject();\n}\n\nexport const connect = async ({ onInfo, onClose }: connectOptions = {}): Promise<Device> => {\n  if(!window.navigator.hid) throw NotCompatibleBrowser;\n  const HIDs = await window.navigator.hid.requestDevice({ filters: [{ vendorId: 0x03eb }] })\n  if(HIDs.length === 0){\n    throw NoDeviceSelected;\n  }\n  const HID = HIDs[0]\n\n  if(!HID.opened) {\n    await HID.open()\n  }\n\n  let listenDisconnects = (event: HIDConnectionEvent) => {\n    if(Object.is(event.device, HID)){\n      window.navigator.hid.removeEventListener(\"disconnect\", listenDisconnects);\n      onClose?.(DeviceExternallyClosed);\n    }\n  }\n\n  window.navigator.hid.addEventListener(\"disconnect\", listenDisconnects)\n\n  const send = async (data: Uint8Array): Promise<Uint8Array> => {\n    const start = performance.now();\n    let info: any = {\n      sent: {\n        data,\n        opCode: data[0],\n        query: data[0] === 0 ? data[1] : undefined,\n      },\n      waitFrames: 0\n    }\n    console.log(info);\n    bytesToPackages(data).forEach((packet) => HID.sendReport(0, packet));\n    let prom = new Promise<Uint8Array>((resolver, rejected) => {\n      const allPackets: Uint8Array[] = [];\n      HID.oninputreport = ({ data }) => {\n        try {\n          const packet = new Uint8Array(data.buffer)\n          if(allPackets.length === 0 && packet[7] === 1) { //waiting for input\n            sleep(200).then(() => HID.sendReport(0, retryPacket)).catch(() => rejected(DeviceExternallyClosed));\n            info.waitFrames++;\n            return;\n          }\n          allPackets.push(packet)\n          const { packets } = headerInfo(allPackets[0]);\n          if(allPackets.length === packets){\n            const receivedData = packagesToBytes(allPackets);\n            info.time = (performance.now() - start).toFixed(6);\n            info.received = {\n              data: receivedData,\n              opCode: receivedData[0],\n              query: receivedData[0] === 0 ? receivedData[1] : undefined\n            }\n            resolver(receivedData);\n          }\n        } catch (e) {\n          if (e instanceof DOMException) {\n            rejected(DeviceExternallyClosed);\n          } else {\n            rejected(e);\n          }\n        }\n      }\n    })\n    return prom;\n  }\n\n  let device: Pick<Device, \"send\" | \"info\"> = {\n    send,\n    info: {}\n  }; \n\n  let info = {};\n  Object.defineProperty(device, 'info', {\n    get: function() { return info; },\n    set: function(newValue) { info = newValue; onInfo?.(newValue) },\n    enumerable: true,\n    configurable: true\n  });\n\n  await infoQuery(device);\n\n  await initialize(device);\n\n  let enc = await handshake(device);\n\n  if(!device.info.deviceAcceptedPairing) {\n    let status = await(device.send(showCode));\n    if(status[1] === 1){\n      device.info = {...device.info, deviceAcceptedPairing: false}\n      throw DevicePairingRejected\n    }\n    device.info = {...device.info, deviceAcceptedPairing: true}\n  }\n\n  return ({\n    ...device,\n    close: () => {\n      window.navigator.hid.removeEventListener(\"disconnect\", listenDisconnects)\n      HID.close()\n      onClose?.(DeviceClosedByApp)\n    },\n    eth: ethPublic(send, enc)\n  })\n}\n","import { createContext, FunctionComponent, useState } from \"react\";\nimport { connect as deviceConnect, Device } from \"../api/device\";\nimport { BitBoxError } from \"../api/errors\";\nimport { Info } from \"../api/messages\";\nimport { useAsync } from \"../utils/hooks\";\n\ninterface Context {\n  connected: boolean\n  connect: () => void\n  connecting: boolean\n  info: Info\n  error?: Error\n  device?: Device\n}\n\nexport const DeviceContext = createContext<Context>({} as any);\n\nexport const DeviceContextProvider: FunctionComponent = ({children}) => {\n  const [info, setInfo] = useState<Info>({});\n  const [closeError, setCloseError] = useState<BitBoxError>();\n  const {execute, error, status, value: device} = useAsync(() => deviceConnect({\n    onInfo: setInfo,\n    onClose: setCloseError\n  }), false);\n\n  let connect = () => {\n    execute();\n    setInfo({});\n    setCloseError(undefined);\n  }\n\n  return <DeviceContext.Provider value={{\n    connect,\n    connected: (status === \"success\") && !closeError, \n    connecting: status === \"pending\",\n    error: error || closeError,\n    info,\n    device\n  }}>{children}</DeviceContext.Provider>\n}\n","import React, { useCallback, useEffect, useState } from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: React.Dispatch<React.SetStateAction<T>> = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(value);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n// Hook\nexport const useAsync = <T, E = Error>(\n  asyncFunction: () => Promise<T>,\n  immediate = true\n) => {\n  const [status, setStatus] = useState<\n    \"idle\" | \"pending\" | \"success\" | \"error\"\n  >(\"idle\");\n  const [value, setValue] = useState<T | undefined>(undefined);\n  const [error, setError] = useState<E | undefined>(undefined);\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(() => {\n    setStatus(\"pending\");\n    setValue(undefined);\n    setError(undefined);\n    return asyncFunction()\n      .then((response: any) => {\n        setValue(response);\n        setStatus(\"success\");\n      })\n      .catch((error: any) => {\n        setError(error);\n        setStatus(\"error\");\n      });\n  }, [asyncFunction]);\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [immediate]);\n  return { execute, status, value, error };\n};\n\nexport const useToggle = (initialState: boolean = false): readonly [boolean, () => void, () => void, () => void] => {\n  const [state, setState] = useState<boolean>(initialState);\n\n  const toggle = useCallback((): void => setState(state => !state), []);\n  const setTrue = useCallback((): void => setState(true), []);\n  const setFalse = useCallback((): void => setState(false), []);\n  return [state, toggle, setTrue, setFalse] as const;\n}\n\nexport const useIntervalUpdate = (miliseconds: number = 1000) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [update, setUpdate] = useState<number>(0);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setUpdate(Math.random());\n    }, miliseconds)\n    return () => clearInterval(intervalId);\n  }, [setUpdate, miliseconds])\n}\n\nexport const useCallbackAsync = (ex: (...params: any[]) => Promise<any>, execute: boolean, deps: React.DependencyList) => {\n  useEffect(() => {\n    if (execute) {\n      ex();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\nexport const useInput = (defaultValue = \"\") => {\n  const [val, setVal] = useState<string>(defaultValue)\n  const setEv = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setVal(ev.target.value), [setVal]);\n  return [val, setEv] as const\n}\n","import { Alert, AlertDescription, AlertIcon, Box, List, ListIcon, ListItem, Stack, Tag, TagLabel, TagLeftIcon } from \"@chakra-ui/react\"\nimport { CheckIcon, UnlockIcon, TimeIcon, LockIcon, ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\"\nimport { Fragment, useContext } from \"react\";\nimport { DeviceContext } from \"../context/contexts\";\n\nconst ConnectingBadges = () => {\n  let {\n    info: {\n      version,\n      unlocked,\n      encrypted\n    }\n  } = useContext(DeviceContext);\n  return <Stack direction={\"row\"} justify={\"end\"}>\n    {version && <Tag size={\"lg\"} variant='subtle' colorScheme={'blue'}>\n      <TagLabel>Version {version.major}.{version.minor}.{version.patch}</TagLabel>\n    </Tag>}\n    <Tag size={\"lg\"} variant='subtle' colorScheme={unlocked ? 'blue' : 'red'}>\n      <TagLeftIcon boxSize='12px' as={unlocked ? UnlockIcon : LockIcon} />\n      <TagLabel>{unlocked ? \"Unlocked\" : \"Locked\"}</TagLabel>\n    </Tag>\n    <Tag size={\"lg\"} variant='subtle' colorScheme={encrypted ? 'blue' : 'red'}>\n      <TagLeftIcon boxSize='12px' as={encrypted ? ViewOffIcon : ViewIcon} />\n      <TagLabel>{encrypted ? \"Encrypted\" : \"Cleartext\"}</TagLabel>\n    </Tag>\n  </Stack>\n}\n\nconst ConnectingState = () => {\n  let { info: {\n    version,\n    attestation,\n    unlocked,\n    encrypted,\n    deviceAcceptedPairing\n  } } = useContext(DeviceContext);\n  let color = 'blue.500';\n  return <Box rounded={8} padding={4} backgroundColor={\"gray.200\"}>\n    <List spacing={3}>\n      <ListItem>\n        <ListIcon as={version ? CheckIcon : TimeIcon} color={color} />\n        Querying device Info\n      </ListItem>\n      <ListItem>\n        <ListIcon as={attestation ? CheckIcon : TimeIcon} color={color} />\n        Attestation Check. Verification not implemented\n      </ListItem>\n      <ListItem>\n        <ListIcon as={unlocked ? CheckIcon : TimeIcon} color={color} />\n        Unlocking device\n      </ListItem>\n      <ListItem>\n        <ListIcon as={encrypted ? CheckIcon : TimeIcon} color={color} />\n        Encryption handshake\n      </ListItem>\n      <ListItem>\n        <ListIcon as={deviceAcceptedPairing ? CheckIcon : TimeIcon} color={color} />\n        Pairing code Verification\n      </ListItem>\n    </List>\n  </Box>\n}\n\nexport const ConnectingView = () => {\n  let { error } = useContext(DeviceContext);\n  return <Fragment>\n    <ConnectingBadges />\n    <ConnectingState />\n    { error && <Alert status='error' rounded={8}>\n      <AlertIcon />\n      <AlertDescription>{error.message}</AlertDescription>\n    </Alert> }\n  </Fragment>\n}\n","import './App.css';\nimport { Button, Center, Stack } from '@chakra-ui/react';\nimport { useContext } from 'react';\nimport { DeviceContext } from './context/contexts';\nimport { ConnectingView } from './views/ConnectingView';\n\nfunction App() {\n  const { connect, device, connecting, connected} = useContext(DeviceContext);\n\n  return (\n    <Center h='100vh'>\n      <Stack direction={\"column\"} maxWidth={540} width={540} margin={4}>\n        <ConnectingView />\n        <Button onClick={connect} colorScheme={\"blue\"} isLoading={connecting} loadingText={\"Connecting...\"} disabled={connected || connecting}>Connect</Button>\n        <Button onClick={device?.close}>Close</Button>\n        <Button onClick={() => device?.eth().then(console.log)}>Eth</Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { DeviceContextProvider } from './context/contexts';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <DeviceContextProvider>\n        <App />\n      </DeviceContextProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// source: eth.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar antiklepto_pb = require('./antiklepto_pb.js');\ngoog.object.extend(proto, antiklepto_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHCoin', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignMessageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHPubRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHPubRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHPubRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignMessageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignMessageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHSignResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    coin: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    outputType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n    contractAddress: msg.getContractAddress_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHPubRequest;\n  return proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (reader.readEnum());\n      msg.setOutputType(value);\n      break;\n    case 4:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setContractAddress(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getOutputType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n  f = message.getContractAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.OutputType = {\n  ADDRESS: 0,\n  XPUB: 1\n};\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional ETHCoin coin = 2;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional OutputType output_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getOutputType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setOutputType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * optional bool display = 4;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getContractAddress()));\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getContractAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setContractAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    nonce: msg.getNonce_asB64(),\n    gasPrice: msg.getGasPrice_asB64(),\n    gasLimit: msg.getGasLimit_asB64(),\n    recipient: msg.getRecipient_asB64(),\n    value: msg.getValue_asB64(),\n    data: msg.getData_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignRequest;\n  return proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setNonce(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setGasPrice(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setGasLimit(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRecipient(value);\n      break;\n    case 7:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setValue(value);\n      break;\n    case 8:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 9:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = message.getNonce_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getGasPrice_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getGasLimit_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n  f = message.getRecipient_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f = message.getValue_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      7,\n      f\n    );\n  }\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      8,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes nonce = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes nonce = 3;\n * This is a type-conversion wrapper around `getNonce()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getNonce()));\n};\n\n\n/**\n * optional bytes nonce = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getNonce()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getNonce()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setNonce = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * This is a type-conversion wrapper around `getGasPrice()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getGasPrice()));\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getGasPrice()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getGasPrice()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasPrice = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * This is a type-conversion wrapper around `getGasLimit()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getGasLimit()));\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getGasLimit()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getGasLimit()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasLimit = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n/**\n * optional bytes recipient = 6;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * optional bytes recipient = 6;\n * This is a type-conversion wrapper around `getRecipient()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRecipient()));\n};\n\n\n/**\n * optional bytes recipient = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRecipient()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRecipient()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setRecipient = function(value) {\n  return jspb.Message.setProto3BytesField(this, 6, value);\n};\n\n\n/**\n * optional bytes value = 7;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * optional bytes value = 7;\n * This is a type-conversion wrapper around `getValue()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getValue()));\n};\n\n\n/**\n * optional bytes value = 7;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getValue()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getValue()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3BytesField(this, 7, value);\n};\n\n\n/**\n * optional bytes data = 8;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/**\n * optional bytes data = 8;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 8;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setData = function(value) {\n  return jspb.Message.setProto3BytesField(this, 8, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 9;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 9, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    msg: msg.getMsg_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;\n  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = message.getMsg_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes msg = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes msg = 3;\n * This is a type-conversion wrapper around `getMsg()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getMsg()));\n};\n\n\n/**\n * optional bytes msg = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getMsg()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getMsg()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setMsg = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 4, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignResponse;\n  return proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_ = [[1,2,3,4]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  PUB: 1,\n  SIGN: 2,\n  SIGN_MSG: 3,\n  ANTIKLEPTO_SIGNATURE: 4\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: (f = msg.getPub()) && proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(includeInstance, f),\n    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(includeInstance, f),\n    signMsg: (f = msg.getSignMsg()) && proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(includeInstance, f),\n    antikleptoSignature: (f = msg.getAntikleptoSignature()) && antiklepto_pb.AntiKleptoSignatureRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHRequest;\n  return proto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.ETHPubRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader);\n      msg.setSign(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader);\n      msg.setSignMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoSignatureRequest;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignatureRequest.deserializeBinaryFromReader);\n      msg.setAntikleptoSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSign();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMsg();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignature();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoSignatureRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHPubRequest pub = 1;\n * @return {?proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHPubRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHPubRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHPubRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional ETHSignRequest sign = 2;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getSign = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setSign = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSign = function() {\n  return this.setSign(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSign = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional ETHSignMessageRequest sign_msg = 3;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getSignMsg = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignMessageRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignMessageRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setSignMsg = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSignMsg = function() {\n  return this.setSignMsg(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSignMsg = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional AntiKleptoSignatureRequest antiklepto_signature = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getAntikleptoSignature = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignatureRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setAntikleptoSignature = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearAntikleptoSignature = function() {\n  return this.setAntikleptoSignature(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasAntikleptoSignature = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  PUB: 1,\n  SIGN: 2,\n  ANTIKLEPTO_SIGNER_COMMITMENT: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(includeInstance, f),\n    antikleptoSignerCommitment: (f = msg.getAntikleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHResponse;\n  return proto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader);\n      msg.setSign(value);\n      break;\n    case 3:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntikleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSign();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional PubResponse pub = 1;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional ETHSignResponse sign = 2;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getSign = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setSign = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearSign = function() {\n  return this.setSign(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasSign = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment antiklepto_signer_commitment = 3;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getAntikleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setAntikleptoSignerCommitment = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearAntikleptoSignerCommitment = function() {\n  return this.setAntikleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasAntikleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHCoin = {\n  ETH: 0,\n  ROPSTENETH: 1,\n  RINKEBYETH: 2\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: common.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Keypath', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PubResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RootFingerprintRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RootFingerprintResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.XPub', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PubResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PubResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PubResponse.displayName = 'proto.shiftcrypto.bitbox02.PubResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RootFingerprintRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RootFingerprintRequest.displayName = 'proto.shiftcrypto.bitbox02.RootFingerprintRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RootFingerprintResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RootFingerprintResponse.displayName = 'proto.shiftcrypto.bitbox02.RootFingerprintResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.XPub = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.XPub, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.XPub.displayName = 'proto.shiftcrypto.bitbox02.XPub';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Keypath = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.Keypath.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Keypath, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Keypath.displayName = 'proto.shiftcrypto.bitbox02.Keypath';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PubResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PubResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.PubResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PubResponse;\n  return proto.shiftcrypto.bitbox02.PubResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.PubResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPub(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PubResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PubResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string pub = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.getPub = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.PubResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.setPub = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RootFingerprintRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RootFingerprintRequest;\n  return proto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RootFingerprintRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RootFingerprintResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    fingerprint: msg.getFingerprint_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RootFingerprintResponse;\n  return proto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setFingerprint(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RootFingerprintResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFingerprint_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * This is a type-conversion wrapper around `getFingerprint()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getFingerprint()));\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFingerprint()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getFingerprint()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} returns this\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.setFingerprint = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.XPub.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.XPub} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.XPub.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    depth: msg.getDepth_asB64(),\n    parentFingerprint: msg.getParentFingerprint_asB64(),\n    childNum: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    chainCode: msg.getChainCode_asB64(),\n    publicKey: msg.getPublicKey_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.XPub.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.XPub;\n  return proto.shiftcrypto.bitbox02.XPub.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.XPub} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.XPub.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDepth(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setParentFingerprint(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setChildNum(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChainCode(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPublicKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.XPub.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.XPub} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.XPub.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDepth_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getParentFingerprint_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getChildNum();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getChainCode_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getPublicKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes depth = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes depth = 1;\n * This is a type-conversion wrapper around `getDepth()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDepth()));\n};\n\n\n/**\n * optional bytes depth = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDepth()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDepth()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setDepth = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * This is a type-conversion wrapper around `getParentFingerprint()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getParentFingerprint()));\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getParentFingerprint()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getParentFingerprint()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setParentFingerprint = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional uint32 child_num = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChildNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setChildNum = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * This is a type-conversion wrapper around `getChainCode()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChainCode()));\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChainCode()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChainCode()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setChainCode = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes public_key = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes public_key = 5;\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPublicKey()));\n};\n\n\n/**\n * optional bytes public_key = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPublicKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setPublicKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Keypath.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Keypath.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Keypath} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Keypath.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.Keypath.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Keypath;\n  return proto.shiftcrypto.bitbox02.Keypath.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Keypath} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.Keypath.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Keypath.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Keypath} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Keypath.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: hww.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar backup_commands_pb = require('./backup_commands_pb.js');\ngoog.object.extend(proto, backup_commands_pb);\nvar bitbox02_system_pb = require('./bitbox02_system_pb.js');\ngoog.object.extend(proto, bitbox02_system_pb);\nvar btc_pb = require('./btc_pb.js');\ngoog.object.extend(proto, btc_pb);\nvar cardano_pb = require('./cardano_pb.js');\ngoog.object.extend(proto, cardano_pb);\nvar eth_pb = require('./eth_pb.js');\ngoog.object.extend(proto, eth_pb);\nvar keystore_pb = require('./keystore_pb.js');\ngoog.object.extend(proto, keystore_pb);\nvar mnemonic_pb = require('./mnemonic_pb.js');\ngoog.object.extend(proto, mnemonic_pb);\nvar system_pb = require('./system_pb.js');\ngoog.object.extend(proto, system_pb);\nvar perform_attestation_pb = require('./perform_attestation_pb.js');\ngoog.object.extend(proto, perform_attestation_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Error', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Request', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Request.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Response', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Response.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Success', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Error = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Error, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Error.displayName = 'proto.shiftcrypto.bitbox02.Error';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Success = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Success, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Success.displayName = 'proto.shiftcrypto.bitbox02.Success';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Request = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Request.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Request, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Request.displayName = 'proto.shiftcrypto.bitbox02.Request';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Response = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Response.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Response, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Response.displayName = 'proto.shiftcrypto.bitbox02.Response';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Error.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Error} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Error.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    code: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    message: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Error.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Error;\n  return proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Error} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setCode(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Error} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCode();\n  if (f !== 0) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int32 code = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.getCode = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.Error} returns this\n */\nproto.shiftcrypto.bitbox02.Error.prototype.setCode = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional string message = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.Error} returns this\n */\nproto.shiftcrypto.bitbox02.Error.prototype.setMessage = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Success.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Success.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Success} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Success.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Success.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Success;\n  return proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Success} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Success.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Success} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Request.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.Request.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  DEVICE_NAME: 2,\n  DEVICE_LANGUAGE: 3,\n  DEVICE_INFO: 4,\n  SET_PASSWORD: 5,\n  CREATE_BACKUP: 6,\n  SHOW_MNEMONIC: 7,\n  BTC_PUB: 8,\n  BTC_SIGN_INIT: 9,\n  BTC_SIGN_INPUT: 10,\n  BTC_SIGN_OUTPUT: 11,\n  INSERT_REMOVE_SDCARD: 12,\n  CHECK_SDCARD: 13,\n  SET_MNEMONIC_PASSPHRASE_ENABLED: 14,\n  LIST_BACKUPS: 15,\n  RESTORE_BACKUP: 16,\n  PERFORM_ATTESTATION: 17,\n  REBOOT: 18,\n  CHECK_BACKUP: 19,\n  ETH: 20,\n  RESET: 21,\n  RESTORE_FROM_MNEMONIC: 22,\n  FINGERPRINT: 24,\n  BTC: 25,\n  ELECTRUM_ENCRYPTION_KEY: 26,\n  CARDANO: 27\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.Request.RequestCase}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.Request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Request.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Request} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Request.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    deviceName: (f = msg.getDeviceName()) && bitbox02_system_pb.SetDeviceNameRequest.toObject(includeInstance, f),\n    deviceLanguage: (f = msg.getDeviceLanguage()) && bitbox02_system_pb.SetDeviceLanguageRequest.toObject(includeInstance, f),\n    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoRequest.toObject(includeInstance, f),\n    setPassword: (f = msg.getSetPassword()) && bitbox02_system_pb.SetPasswordRequest.toObject(includeInstance, f),\n    createBackup: (f = msg.getCreateBackup()) && backup_commands_pb.CreateBackupRequest.toObject(includeInstance, f),\n    showMnemonic: (f = msg.getShowMnemonic()) && mnemonic_pb.ShowMnemonicRequest.toObject(includeInstance, f),\n    btcPub: (f = msg.getBtcPub()) && btc_pb.BTCPubRequest.toObject(includeInstance, f),\n    btcSignInit: (f = msg.getBtcSignInit()) && btc_pb.BTCSignInitRequest.toObject(includeInstance, f),\n    btcSignInput: (f = msg.getBtcSignInput()) && btc_pb.BTCSignInputRequest.toObject(includeInstance, f),\n    btcSignOutput: (f = msg.getBtcSignOutput()) && btc_pb.BTCSignOutputRequest.toObject(includeInstance, f),\n    insertRemoveSdcard: (f = msg.getInsertRemoveSdcard()) && bitbox02_system_pb.InsertRemoveSDCardRequest.toObject(includeInstance, f),\n    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardRequest.toObject(includeInstance, f),\n    setMnemonicPassphraseEnabled: (f = msg.getSetMnemonicPassphraseEnabled()) && mnemonic_pb.SetMnemonicPassphraseEnabledRequest.toObject(includeInstance, f),\n    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsRequest.toObject(includeInstance, f),\n    restoreBackup: (f = msg.getRestoreBackup()) && backup_commands_pb.RestoreBackupRequest.toObject(includeInstance, f),\n    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationRequest.toObject(includeInstance, f),\n    reboot: (f = msg.getReboot()) && system_pb.RebootRequest.toObject(includeInstance, f),\n    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupRequest.toObject(includeInstance, f),\n    eth: (f = msg.getEth()) && eth_pb.ETHRequest.toObject(includeInstance, f),\n    reset: (f = msg.getReset()) && bitbox02_system_pb.ResetRequest.toObject(includeInstance, f),\n    restoreFromMnemonic: (f = msg.getRestoreFromMnemonic()) && mnemonic_pb.RestoreFromMnemonicRequest.toObject(includeInstance, f),\n    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintRequest.toObject(includeInstance, f),\n    btc: (f = msg.getBtc()) && btc_pb.BTCRequest.toObject(includeInstance, f),\n    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyRequest.toObject(includeInstance, f),\n    cardano: (f = msg.getCardano()) && cardano_pb.CardanoRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Request}\n */\nproto.shiftcrypto.bitbox02.Request.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Request;\n  return proto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Request} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Request}\n */\nproto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new bitbox02_system_pb.SetDeviceNameRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetDeviceNameRequest.deserializeBinaryFromReader);\n      msg.setDeviceName(value);\n      break;\n    case 3:\n      var value = new bitbox02_system_pb.SetDeviceLanguageRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetDeviceLanguageRequest.deserializeBinaryFromReader);\n      msg.setDeviceLanguage(value);\n      break;\n    case 4:\n      var value = new bitbox02_system_pb.DeviceInfoRequest;\n      reader.readMessage(value,bitbox02_system_pb.DeviceInfoRequest.deserializeBinaryFromReader);\n      msg.setDeviceInfo(value);\n      break;\n    case 5:\n      var value = new bitbox02_system_pb.SetPasswordRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetPasswordRequest.deserializeBinaryFromReader);\n      msg.setSetPassword(value);\n      break;\n    case 6:\n      var value = new backup_commands_pb.CreateBackupRequest;\n      reader.readMessage(value,backup_commands_pb.CreateBackupRequest.deserializeBinaryFromReader);\n      msg.setCreateBackup(value);\n      break;\n    case 7:\n      var value = new mnemonic_pb.ShowMnemonicRequest;\n      reader.readMessage(value,mnemonic_pb.ShowMnemonicRequest.deserializeBinaryFromReader);\n      msg.setShowMnemonic(value);\n      break;\n    case 8:\n      var value = new btc_pb.BTCPubRequest;\n      reader.readMessage(value,btc_pb.BTCPubRequest.deserializeBinaryFromReader);\n      msg.setBtcPub(value);\n      break;\n    case 9:\n      var value = new btc_pb.BTCSignInitRequest;\n      reader.readMessage(value,btc_pb.BTCSignInitRequest.deserializeBinaryFromReader);\n      msg.setBtcSignInit(value);\n      break;\n    case 10:\n      var value = new btc_pb.BTCSignInputRequest;\n      reader.readMessage(value,btc_pb.BTCSignInputRequest.deserializeBinaryFromReader);\n      msg.setBtcSignInput(value);\n      break;\n    case 11:\n      var value = new btc_pb.BTCSignOutputRequest;\n      reader.readMessage(value,btc_pb.BTCSignOutputRequest.deserializeBinaryFromReader);\n      msg.setBtcSignOutput(value);\n      break;\n    case 12:\n      var value = new bitbox02_system_pb.InsertRemoveSDCardRequest;\n      reader.readMessage(value,bitbox02_system_pb.InsertRemoveSDCardRequest.deserializeBinaryFromReader);\n      msg.setInsertRemoveSdcard(value);\n      break;\n    case 13:\n      var value = new bitbox02_system_pb.CheckSDCardRequest;\n      reader.readMessage(value,bitbox02_system_pb.CheckSDCardRequest.deserializeBinaryFromReader);\n      msg.setCheckSdcard(value);\n      break;\n    case 14:\n      var value = new mnemonic_pb.SetMnemonicPassphraseEnabledRequest;\n      reader.readMessage(value,mnemonic_pb.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader);\n      msg.setSetMnemonicPassphraseEnabled(value);\n      break;\n    case 15:\n      var value = new backup_commands_pb.ListBackupsRequest;\n      reader.readMessage(value,backup_commands_pb.ListBackupsRequest.deserializeBinaryFromReader);\n      msg.setListBackups(value);\n      break;\n    case 16:\n      var value = new backup_commands_pb.RestoreBackupRequest;\n      reader.readMessage(value,backup_commands_pb.RestoreBackupRequest.deserializeBinaryFromReader);\n      msg.setRestoreBackup(value);\n      break;\n    case 17:\n      var value = new perform_attestation_pb.PerformAttestationRequest;\n      reader.readMessage(value,perform_attestation_pb.PerformAttestationRequest.deserializeBinaryFromReader);\n      msg.setPerformAttestation(value);\n      break;\n    case 18:\n      var value = new system_pb.RebootRequest;\n      reader.readMessage(value,system_pb.RebootRequest.deserializeBinaryFromReader);\n      msg.setReboot(value);\n      break;\n    case 19:\n      var value = new backup_commands_pb.CheckBackupRequest;\n      reader.readMessage(value,backup_commands_pb.CheckBackupRequest.deserializeBinaryFromReader);\n      msg.setCheckBackup(value);\n      break;\n    case 20:\n      var value = new eth_pb.ETHRequest;\n      reader.readMessage(value,eth_pb.ETHRequest.deserializeBinaryFromReader);\n      msg.setEth(value);\n      break;\n    case 21:\n      var value = new bitbox02_system_pb.ResetRequest;\n      reader.readMessage(value,bitbox02_system_pb.ResetRequest.deserializeBinaryFromReader);\n      msg.setReset(value);\n      break;\n    case 22:\n      var value = new mnemonic_pb.RestoreFromMnemonicRequest;\n      reader.readMessage(value,mnemonic_pb.RestoreFromMnemonicRequest.deserializeBinaryFromReader);\n      msg.setRestoreFromMnemonic(value);\n      break;\n    case 24:\n      var value = new common_pb.RootFingerprintRequest;\n      reader.readMessage(value,common_pb.RootFingerprintRequest.deserializeBinaryFromReader);\n      msg.setFingerprint(value);\n      break;\n    case 25:\n      var value = new btc_pb.BTCRequest;\n      reader.readMessage(value,btc_pb.BTCRequest.deserializeBinaryFromReader);\n      msg.setBtc(value);\n      break;\n    case 26:\n      var value = new keystore_pb.ElectrumEncryptionKeyRequest;\n      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader);\n      msg.setElectrumEncryptionKey(value);\n      break;\n    case 27:\n      var value = new cardano_pb.CardanoRequest;\n      reader.readMessage(value,cardano_pb.CardanoRequest.deserializeBinaryFromReader);\n      msg.setCardano(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Request} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDeviceName();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      bitbox02_system_pb.SetDeviceNameRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceLanguage();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      bitbox02_system_pb.SetDeviceLanguageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceInfo();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      bitbox02_system_pb.DeviceInfoRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSetPassword();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      bitbox02_system_pb.SetPasswordRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCreateBackup();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      backup_commands_pb.CreateBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getShowMnemonic();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      mnemonic_pb.ShowMnemonicRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcPub();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      btc_pb.BTCPubRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignInit();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      btc_pb.BTCSignInitRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignInput();\n  if (f != null) {\n    writer.writeMessage(\n      10,\n      f,\n      btc_pb.BTCSignInputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignOutput();\n  if (f != null) {\n    writer.writeMessage(\n      11,\n      f,\n      btc_pb.BTCSignOutputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getInsertRemoveSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      12,\n      f,\n      bitbox02_system_pb.InsertRemoveSDCardRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      13,\n      f,\n      bitbox02_system_pb.CheckSDCardRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSetMnemonicPassphraseEnabled();\n  if (f != null) {\n    writer.writeMessage(\n      14,\n      f,\n      mnemonic_pb.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getListBackups();\n  if (f != null) {\n    writer.writeMessage(\n      15,\n      f,\n      backup_commands_pb.ListBackupsRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRestoreBackup();\n  if (f != null) {\n    writer.writeMessage(\n      16,\n      f,\n      backup_commands_pb.RestoreBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPerformAttestation();\n  if (f != null) {\n    writer.writeMessage(\n      17,\n      f,\n      perform_attestation_pb.PerformAttestationRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getReboot();\n  if (f != null) {\n    writer.writeMessage(\n      18,\n      f,\n      system_pb.RebootRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckBackup();\n  if (f != null) {\n    writer.writeMessage(\n      19,\n      f,\n      backup_commands_pb.CheckBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getEth();\n  if (f != null) {\n    writer.writeMessage(\n      20,\n      f,\n      eth_pb.ETHRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getReset();\n  if (f != null) {\n    writer.writeMessage(\n      21,\n      f,\n      bitbox02_system_pb.ResetRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRestoreFromMnemonic();\n  if (f != null) {\n    writer.writeMessage(\n      22,\n      f,\n      mnemonic_pb.RestoreFromMnemonicRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getFingerprint();\n  if (f != null) {\n    writer.writeMessage(\n      24,\n      f,\n      common_pb.RootFingerprintRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtc();\n  if (f != null) {\n    writer.writeMessage(\n      25,\n      f,\n      btc_pb.BTCRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getElectrumEncryptionKey();\n  if (f != null) {\n    writer.writeMessage(\n      26,\n      f,\n      keystore_pb.ElectrumEncryptionKeyRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCardano();\n  if (f != null) {\n    writer.writeMessage(\n      27,\n      f,\n      cardano_pb.CardanoRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional SetDeviceNameRequest device_name = 2;\n * @return {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceName = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceNameRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceNameRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceName = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceName = function() {\n  return this.setDeviceName(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceName = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional SetDeviceLanguageRequest device_language = 3;\n * @return {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceLanguage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceLanguageRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceLanguage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceLanguage = function() {\n  return this.setDeviceLanguage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceLanguage = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional DeviceInfoRequest device_info = 4;\n * @return {?proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceInfo = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.DeviceInfoRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceInfo = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceInfo = function() {\n  return this.setDeviceInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceInfo = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional SetPasswordRequest set_password = 5;\n * @return {?proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getSetPassword = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetPasswordRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetPasswordRequest, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetPasswordRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setSetPassword = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearSetPassword = function() {\n  return this.setSetPassword(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasSetPassword = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional CreateBackupRequest create_backup = 6;\n * @return {?proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCreateBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CreateBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CreateBackupRequest, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CreateBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCreateBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCreateBackup = function() {\n  return this.setCreateBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCreateBackup = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional ShowMnemonicRequest show_mnemonic = 7;\n * @return {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getShowMnemonic = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ShowMnemonicRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.ShowMnemonicRequest, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setShowMnemonic = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearShowMnemonic = function() {\n  return this.setShowMnemonic(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasShowMnemonic = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional BTCPubRequest btc_pub = 8;\n * @return {?proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPubRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCPubRequest, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPubRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcPub = function() {\n  return this.setBtcPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcPub = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional BTCSignInitRequest btc_sign_init = 9;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInit = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInitRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignInitRequest, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignInitRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInit = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInit = function() {\n  return this.setBtcSignInit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInit = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional BTCSignInputRequest btc_sign_input = 10;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInputRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignInputRequest, 10));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignInputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInput = function() {\n  return this.setBtcSignInput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInput = function() {\n  return jspb.Message.getField(this, 10) != null;\n};\n\n\n/**\n * optional BTCSignOutputRequest btc_sign_output = 11;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignOutput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignOutputRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignOutputRequest, 11));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignOutput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignOutput = function() {\n  return this.setBtcSignOutput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignOutput = function() {\n  return jspb.Message.getField(this, 11) != null;\n};\n\n\n/**\n * optional InsertRemoveSDCardRequest insert_remove_sdcard = 12;\n * @return {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getInsertRemoveSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.InsertRemoveSDCardRequest, 12));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setInsertRemoveSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearInsertRemoveSdcard = function() {\n  return this.setInsertRemoveSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasInsertRemoveSdcard = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n/**\n * optional CheckSDCardRequest check_sdcard = 13;\n * @return {?proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCheckSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardRequest, 13));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckSDCardRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCheckSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCheckSdcard = function() {\n  return this.setCheckSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCheckSdcard = function() {\n  return jspb.Message.getField(this, 13) != null;\n};\n\n\n/**\n * optional SetMnemonicPassphraseEnabledRequest set_mnemonic_passphrase_enabled = 14;\n * @return {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getSetMnemonicPassphraseEnabled = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.SetMnemonicPassphraseEnabledRequest, 14));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setSetMnemonicPassphraseEnabled = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearSetMnemonicPassphraseEnabled = function() {\n  return this.setSetMnemonicPassphraseEnabled(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasSetMnemonicPassphraseEnabled = function() {\n  return jspb.Message.getField(this, 14) != null;\n};\n\n\n/**\n * optional ListBackupsRequest list_backups = 15;\n * @return {?proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getListBackups = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsRequest, 15));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ListBackupsRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setListBackups = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearListBackups = function() {\n  return this.setListBackups(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasListBackups = function() {\n  return jspb.Message.getField(this, 15) != null;\n};\n\n\n/**\n * optional RestoreBackupRequest restore_backup = 16;\n * @return {?proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRestoreBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RestoreBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.RestoreBackupRequest, 16));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RestoreBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setRestoreBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 16, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearRestoreBackup = function() {\n  return this.setRestoreBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasRestoreBackup = function() {\n  return jspb.Message.getField(this, 16) != null;\n};\n\n\n/**\n * optional PerformAttestationRequest perform_attestation = 17;\n * @return {?proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getPerformAttestation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationRequest} */ (\n    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationRequest, 17));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PerformAttestationRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setPerformAttestation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 17, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearPerformAttestation = function() {\n  return this.setPerformAttestation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasPerformAttestation = function() {\n  return jspb.Message.getField(this, 17) != null;\n};\n\n\n/**\n * optional RebootRequest reboot = 18;\n * @return {?proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getReboot = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RebootRequest} */ (\n    jspb.Message.getWrapperField(this, system_pb.RebootRequest, 18));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RebootRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setReboot = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 18, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearReboot = function() {\n  return this.setReboot(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasReboot = function() {\n  return jspb.Message.getField(this, 18) != null;\n};\n\n\n/**\n * optional CheckBackupRequest check_backup = 19;\n * @return {?proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCheckBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupRequest, 19));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCheckBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 19, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCheckBackup = function() {\n  return this.setCheckBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCheckBackup = function() {\n  return jspb.Message.getField(this, 19) != null;\n};\n\n\n/**\n * optional ETHRequest eth = 20;\n * @return {?proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getEth = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHRequest} */ (\n    jspb.Message.getWrapperField(this, eth_pb.ETHRequest, 20));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setEth = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 20, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearEth = function() {\n  return this.setEth(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasEth = function() {\n  return jspb.Message.getField(this, 20) != null;\n};\n\n\n/**\n * optional ResetRequest reset = 21;\n * @return {?proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getReset = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ResetRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.ResetRequest, 21));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ResetRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setReset = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 21, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearReset = function() {\n  return this.setReset(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasReset = function() {\n  return jspb.Message.getField(this, 21) != null;\n};\n\n\n/**\n * optional RestoreFromMnemonicRequest restore_from_mnemonic = 22;\n * @return {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRestoreFromMnemonic = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.RestoreFromMnemonicRequest, 22));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setRestoreFromMnemonic = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 22, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearRestoreFromMnemonic = function() {\n  return this.setRestoreFromMnemonic(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasRestoreFromMnemonic = function() {\n  return jspb.Message.getField(this, 22) != null;\n};\n\n\n/**\n * optional RootFingerprintRequest fingerprint = 24;\n * @return {?proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getFingerprint = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintRequest} */ (\n    jspb.Message.getWrapperField(this, common_pb.RootFingerprintRequest, 24));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RootFingerprintRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setFingerprint = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 24, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearFingerprint = function() {\n  return this.setFingerprint(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasFingerprint = function() {\n  return jspb.Message.getField(this, 24) != null;\n};\n\n\n/**\n * optional BTCRequest btc = 25;\n * @return {?proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtc = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCRequest, 25));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtc = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 25, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtc = function() {\n  return this.setBtc(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtc = function() {\n  return jspb.Message.getField(this, 25) != null;\n};\n\n\n/**\n * optional ElectrumEncryptionKeyRequest electrum_encryption_key = 26;\n * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getElectrumEncryptionKey = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} */ (\n    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyRequest, 26));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setElectrumEncryptionKey = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 26, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearElectrumEncryptionKey = function() {\n  return this.setElectrumEncryptionKey(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasElectrumEncryptionKey = function() {\n  return jspb.Message.getField(this, 26) != null;\n};\n\n\n/**\n * optional CardanoRequest cardano = 27;\n * @return {?proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCardano = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoRequest} */ (\n    jspb.Message.getWrapperField(this, cardano_pb.CardanoRequest, 27));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCardano = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 27, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCardano = function() {\n  return this.setCardano(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCardano = function() {\n  return jspb.Message.getField(this, 27) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Response.oneofGroups_ = [[1,2,4,5,6,7,8,9,10,11,12,13,14,15]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.Response.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  SUCCESS: 1,\n  ERROR: 2,\n  DEVICE_INFO: 4,\n  PUB: 5,\n  BTC_SIGN_NEXT: 6,\n  LIST_BACKUPS: 7,\n  CHECK_BACKUP: 8,\n  PERFORM_ATTESTATION: 9,\n  CHECK_SDCARD: 10,\n  ETH: 11,\n  FINGERPRINT: 12,\n  BTC: 13,\n  ELECTRUM_ENCRYPTION_KEY: 14,\n  CARDANO: 15\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.Response.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.Response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Response.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Response} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Response.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    success: (f = msg.getSuccess()) && proto.shiftcrypto.bitbox02.Success.toObject(includeInstance, f),\n    error: (f = msg.getError()) && proto.shiftcrypto.bitbox02.Error.toObject(includeInstance, f),\n    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoResponse.toObject(includeInstance, f),\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    btcSignNext: (f = msg.getBtcSignNext()) && btc_pb.BTCSignNextResponse.toObject(includeInstance, f),\n    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsResponse.toObject(includeInstance, f),\n    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupResponse.toObject(includeInstance, f),\n    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationResponse.toObject(includeInstance, f),\n    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardResponse.toObject(includeInstance, f),\n    eth: (f = msg.getEth()) && eth_pb.ETHResponse.toObject(includeInstance, f),\n    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintResponse.toObject(includeInstance, f),\n    btc: (f = msg.getBtc()) && btc_pb.BTCResponse.toObject(includeInstance, f),\n    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyResponse.toObject(includeInstance, f),\n    cardano: (f = msg.getCardano()) && cardano_pb.CardanoResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Response}\n */\nproto.shiftcrypto.bitbox02.Response.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Response;\n  return proto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Response} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Response}\n */\nproto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.Success;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader);\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.Error;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader);\n      msg.setError(value);\n      break;\n    case 4:\n      var value = new bitbox02_system_pb.DeviceInfoResponse;\n      reader.readMessage(value,bitbox02_system_pb.DeviceInfoResponse.deserializeBinaryFromReader);\n      msg.setDeviceInfo(value);\n      break;\n    case 5:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 6:\n      var value = new btc_pb.BTCSignNextResponse;\n      reader.readMessage(value,btc_pb.BTCSignNextResponse.deserializeBinaryFromReader);\n      msg.setBtcSignNext(value);\n      break;\n    case 7:\n      var value = new backup_commands_pb.ListBackupsResponse;\n      reader.readMessage(value,backup_commands_pb.ListBackupsResponse.deserializeBinaryFromReader);\n      msg.setListBackups(value);\n      break;\n    case 8:\n      var value = new backup_commands_pb.CheckBackupResponse;\n      reader.readMessage(value,backup_commands_pb.CheckBackupResponse.deserializeBinaryFromReader);\n      msg.setCheckBackup(value);\n      break;\n    case 9:\n      var value = new perform_attestation_pb.PerformAttestationResponse;\n      reader.readMessage(value,perform_attestation_pb.PerformAttestationResponse.deserializeBinaryFromReader);\n      msg.setPerformAttestation(value);\n      break;\n    case 10:\n      var value = new bitbox02_system_pb.CheckSDCardResponse;\n      reader.readMessage(value,bitbox02_system_pb.CheckSDCardResponse.deserializeBinaryFromReader);\n      msg.setCheckSdcard(value);\n      break;\n    case 11:\n      var value = new eth_pb.ETHResponse;\n      reader.readMessage(value,eth_pb.ETHResponse.deserializeBinaryFromReader);\n      msg.setEth(value);\n      break;\n    case 12:\n      var value = new common_pb.RootFingerprintResponse;\n      reader.readMessage(value,common_pb.RootFingerprintResponse.deserializeBinaryFromReader);\n      msg.setFingerprint(value);\n      break;\n    case 13:\n      var value = new btc_pb.BTCResponse;\n      reader.readMessage(value,btc_pb.BTCResponse.deserializeBinaryFromReader);\n      msg.setBtc(value);\n      break;\n    case 14:\n      var value = new keystore_pb.ElectrumEncryptionKeyResponse;\n      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader);\n      msg.setElectrumEncryptionKey(value);\n      break;\n    case 15:\n      var value = new cardano_pb.CardanoResponse;\n      reader.readMessage(value,cardano_pb.CardanoResponse.deserializeBinaryFromReader);\n      msg.setCardano(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Response} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSuccess();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter\n    );\n  }\n  f = message.getError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceInfo();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      bitbox02_system_pb.DeviceInfoResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignNext();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      btc_pb.BTCSignNextResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getListBackups();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      backup_commands_pb.ListBackupsResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckBackup();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      backup_commands_pb.CheckBackupResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPerformAttestation();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      perform_attestation_pb.PerformAttestationResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      10,\n      f,\n      bitbox02_system_pb.CheckSDCardResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getEth();\n  if (f != null) {\n    writer.writeMessage(\n      11,\n      f,\n      eth_pb.ETHResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getFingerprint();\n  if (f != null) {\n    writer.writeMessage(\n      12,\n      f,\n      common_pb.RootFingerprintResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtc();\n  if (f != null) {\n    writer.writeMessage(\n      13,\n      f,\n      btc_pb.BTCResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getElectrumEncryptionKey();\n  if (f != null) {\n    writer.writeMessage(\n      14,\n      f,\n      keystore_pb.ElectrumEncryptionKeyResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCardano();\n  if (f != null) {\n    writer.writeMessage(\n      15,\n      f,\n      cardano_pb.CardanoResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional Success success = 1;\n * @return {?proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getSuccess = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Success} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Success, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Success|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setSuccess = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearSuccess = function() {\n  return this.setSuccess(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasSuccess = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Error error = 2;\n * @return {?proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getError = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Error} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Error, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Error|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setError = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearError = function() {\n  return this.setError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional DeviceInfoResponse device_info = 4;\n * @return {?proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getDeviceInfo = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoResponse} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoResponse, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.DeviceInfoResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setDeviceInfo = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearDeviceInfo = function() {\n  return this.setDeviceInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasDeviceInfo = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional PubResponse pub = 5;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional BTCSignNextResponse btc_sign_next = 6;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getBtcSignNext = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignNextResponse} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignNextResponse, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignNextResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setBtcSignNext = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearBtcSignNext = function() {\n  return this.setBtcSignNext(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasBtcSignNext = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional ListBackupsResponse list_backups = 7;\n * @return {?proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getListBackups = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsResponse} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsResponse, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ListBackupsResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setListBackups = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearListBackups = function() {\n  return this.setListBackups(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasListBackups = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional CheckBackupResponse check_backup = 8;\n * @return {?proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCheckBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupResponse} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupResponse, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckBackupResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCheckBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCheckBackup = function() {\n  return this.setCheckBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCheckBackup = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional PerformAttestationResponse perform_attestation = 9;\n * @return {?proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getPerformAttestation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationResponse} */ (\n    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationResponse, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PerformAttestationResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setPerformAttestation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearPerformAttestation = function() {\n  return this.setPerformAttestation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasPerformAttestation = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional CheckSDCardResponse check_sdcard = 10;\n * @return {?proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCheckSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardResponse} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardResponse, 10));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckSDCardResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCheckSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCheckSdcard = function() {\n  return this.setCheckSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCheckSdcard = function() {\n  return jspb.Message.getField(this, 10) != null;\n};\n\n\n/**\n * optional ETHResponse eth = 11;\n * @return {?proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getEth = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHResponse} */ (\n    jspb.Message.getWrapperField(this, eth_pb.ETHResponse, 11));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setEth = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearEth = function() {\n  return this.setEth(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasEth = function() {\n  return jspb.Message.getField(this, 11) != null;\n};\n\n\n/**\n * optional RootFingerprintResponse fingerprint = 12;\n * @return {?proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getFingerprint = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.RootFingerprintResponse, 12));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RootFingerprintResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setFingerprint = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearFingerprint = function() {\n  return this.setFingerprint(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasFingerprint = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n/**\n * optional BTCResponse btc = 13;\n * @return {?proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getBtc = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCResponse} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCResponse, 13));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setBtc = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearBtc = function() {\n  return this.setBtc(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasBtc = function() {\n  return jspb.Message.getField(this, 13) != null;\n};\n\n\n/**\n * optional ElectrumEncryptionKeyResponse electrum_encryption_key = 14;\n * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getElectrumEncryptionKey = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} */ (\n    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyResponse, 14));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setElectrumEncryptionKey = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearElectrumEncryptionKey = function() {\n  return this.setElectrumEncryptionKey(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasElectrumEncryptionKey = function() {\n  return jspb.Message.getField(this, 14) != null;\n};\n\n\n/**\n * optional CardanoResponse cardano = 15;\n * @return {?proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCardano = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoResponse} */ (\n    jspb.Message.getWrapperField(this, cardano_pb.CardanoResponse, 15));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCardano = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCardano = function() {\n  return this.setCardano(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCardano = function() {\n  return jspb.Message.getField(this, 15) != null;\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: antiklepto.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    commitment: msg.getCommitment_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment;\n  return proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCommitment_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes commitment = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCommitment()));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCommitment()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.setCommitment = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    commitment: msg.getCommitment_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment;\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCommitment_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes commitment = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCommitment()));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCommitment()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.setCommitment = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    hostNonce: msg.getHostNonce_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest;\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setHostNonce(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getHostNonce_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * This is a type-conversion wrapper around `getHostNonce()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getHostNonce()));\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getHostNonce()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getHostNonce()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.setHostNonce = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: backup_commands.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BackupInfo', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckBackupRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckBackupResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CreateBackupRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ListBackupsRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ListBackupsResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RestoreBackupRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.CheckBackupRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckBackupResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckBackupResponse.displayName = 'proto.shiftcrypto.bitbox02.CheckBackupResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CreateBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CreateBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.CreateBackupRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ListBackupsRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ListBackupsRequest.displayName = 'proto.shiftcrypto.bitbox02.ListBackupsRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BackupInfo = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BackupInfo, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BackupInfo.displayName = 'proto.shiftcrypto.bitbox02.BackupInfo';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ListBackupsResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ListBackupsResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ListBackupsResponse.displayName = 'proto.shiftcrypto.bitbox02.ListBackupsResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RestoreBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RestoreBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.RestoreBackupRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    silent: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckBackupRequest;\n  return proto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setSilent(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSilent();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool silent = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.getSilent = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.setSilent = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckBackupResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckBackupResponse;\n  return proto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckBackupResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CreateBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CreateBackupRequest;\n  return proto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CreateBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 timestamp = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ListBackupsRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ListBackupsRequest;\n  return proto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ListBackupsRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BackupInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BackupInfo.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    name: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BackupInfo;\n  return proto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint32 timestamp = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string name = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ListBackupsResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    infoList: jspb.Message.toObjectList(msg.getInfoList(),\n    proto.shiftcrypto.bitbox02.BackupInfo.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ListBackupsResponse;\n  return proto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BackupInfo;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader);\n      msg.addInfo(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ListBackupsResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInfoList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated BackupInfo info = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.BackupInfo>}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.getInfoList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.BackupInfo>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.BackupInfo, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.BackupInfo>} value\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.setInfoList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.addInfo = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.BackupInfo, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.clearInfoList = function() {\n  return this.setInfoList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RestoreBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RestoreBackupRequest;\n  return proto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RestoreBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint32 timestamp = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: bitbox02_system.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckSDCardRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckSDCardResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.DeviceInfoRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.DeviceInfoResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ResetRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetDeviceNameRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetPasswordRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckSDCardRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckSDCardRequest.displayName = 'proto.shiftcrypto.bitbox02.CheckSDCardRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckSDCardResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckSDCardResponse.displayName = 'proto.shiftcrypto.bitbox02.CheckSDCardResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.DeviceInfoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.DeviceInfoRequest.displayName = 'proto.shiftcrypto.bitbox02.DeviceInfoRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.DeviceInfoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.DeviceInfoResponse.displayName = 'proto.shiftcrypto.bitbox02.DeviceInfoResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.displayName = 'proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ResetRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ResetRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ResetRequest.displayName = 'proto.shiftcrypto.bitbox02.ResetRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.displayName = 'proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetDeviceNameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetDeviceNameRequest.displayName = 'proto.shiftcrypto.bitbox02.SetDeviceNameRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetPasswordRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetPasswordRequest.displayName = 'proto.shiftcrypto.bitbox02.SetPasswordRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckSDCardRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckSDCardRequest;\n  return proto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckSDCardRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckSDCardResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    inserted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckSDCardResponse;\n  return proto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setInserted(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckSDCardResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInserted();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool inserted = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.getInserted = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.setInserted = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.DeviceInfoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.DeviceInfoRequest;\n  return proto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.DeviceInfoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.DeviceInfoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    initialized: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n    version: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    mnemonicPassphraseEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n    monotonicIncrementsRemaining: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    securechipModel: jspb.Message.getFieldWithDefault(msg, 6, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.DeviceInfoResponse;\n  return proto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setInitialized(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setVersion(value);\n      break;\n    case 4:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setMnemonicPassphraseEnabled(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setMonotonicIncrementsRemaining(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setSecurechipModel(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.DeviceInfoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getInitialized();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f = message.getVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getMnemonicPassphraseEnabled();\n  if (f) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n  f = message.getMonotonicIncrementsRemaining();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getSecurechipModel();\n  if (f.length > 0) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bool initialized = 2;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getInitialized = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setInitialized = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n/**\n * optional string version = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional bool mnemonic_passphrase_enabled = 4;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getMnemonicPassphraseEnabled = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setMnemonicPassphraseEnabled = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n\n\n/**\n * optional uint32 monotonic_increments_remaining = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getMonotonicIncrementsRemaining = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setMonotonicIncrementsRemaining = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional string securechip_model = 6;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getSecurechipModel = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setSecurechipModel = function(value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    action: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest;\n  return proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} */ (reader.readEnum());\n      msg.setAction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAction();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction = {\n  REMOVE_CARD: 0,\n  INSERT_CARD: 1\n};\n\n/**\n * optional SDCardAction action = 1;\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.getAction = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} value\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} returns this\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.setAction = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ResetRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ResetRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ResetRequest;\n  return proto.shiftcrypto.bitbox02.ResetRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ResetRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ResetRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    language: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest;\n  return proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLanguage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLanguage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string language = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.getLanguage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.setLanguage = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetDeviceNameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetDeviceNameRequest;\n  return proto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetDeviceNameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetPasswordRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    entropy: msg.getEntropy_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetPasswordRequest;\n  return proto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setEntropy(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetPasswordRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEntropy_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes entropy = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes entropy = 1;\n * This is a type-conversion wrapper around `getEntropy()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getEntropy()));\n};\n\n\n/**\n * optional bytes entropy = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getEntropy()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getEntropy()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.setEntropy = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: btc.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar antiklepto_pb = require('./antiklepto_pb.js');\ngoog.object.extend(proto, antiklepto_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCCoin', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCOutputType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignInitRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignInputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignMessageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignMessageResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignNextResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignOutputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSuccess', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCPubRequest.repeatedFields_, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPubRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPubRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPubRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignInitRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignInitRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignInitRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignInitRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignNextResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignNextResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCSignNextResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignInputRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignInputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignInputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignInputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignOutputRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignOutputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignOutputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignOutputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSuccess = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSuccess, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSuccess.displayName = 'proto.shiftcrypto.bitbox02.BTCSuccess';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignMessageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignMessageRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignMessageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignMessageResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignMessageResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCSignMessageResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCResponse';\n}\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase = {\n  CONFIG_NOT_SET: 0,\n  SIMPLE_TYPE: 1,\n  MULTISIG: 2\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getConfigCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    simpleType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    multisig: (f = msg.getMultisig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (reader.readEnum());\n      msg.setSimpleType(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader);\n      msg.setMultisig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getMultisig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType = {\n  P2WPKH_P2SH: 0,\n  P2WPKH: 1\n};\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    xpubsList: jspb.Message.toObjectList(msg.getXpubsList(),\n    common_pb.XPub.toObject, includeInstance),\n    ourXpubIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    scriptType: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setThreshold(value);\n      break;\n    case 2:\n      var value = new common_pb.XPub;\n      reader.readMessage(value,common_pb.XPub.deserializeBinaryFromReader);\n      msg.addXpubs(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setOurXpubIndex(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} */ (reader.readEnum());\n      msg.setScriptType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getThreshold();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getXpubsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      common_pb.XPub.serializeBinaryToWriter\n    );\n  }\n  f = message.getOurXpubIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getScriptType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType = {\n  P2WSH: 0,\n  P2WSH_P2SH: 1\n};\n\n/**\n * optional uint32 threshold = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getThreshold = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setThreshold = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * repeated XPub xpubs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.XPub>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getXpubsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.XPub>} */ (\n    jspb.Message.getRepeatedWrapperField(this, common_pb.XPub, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.XPub>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setXpubsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.XPub=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.addXpubs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.XPub, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.clearXpubsList = function() {\n  return this.setXpubsList([]);\n};\n\n\n/**\n * optional uint32 our_xpub_index = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getOurXpubIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setOurXpubIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional ScriptType script_type = 4;\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getScriptType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setScriptType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 4, value);\n};\n\n\n/**\n * optional SimpleType simple_type = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getSimpleType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.setSimpleType = function(value) {\n  return jspb.Message.setOneofField(this, 1, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.clearSimpleType = function() {\n  return jspb.Message.setOneofField(this, 1, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.hasSimpleType = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Multisig multisig = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getMultisig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.setMultisig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.clearMultisig = function() {\n  return this.setMultisig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.hasMultisig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.repeatedFields_ = [2];\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_ = [[3,4]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase = {\n  OUTPUT_NOT_SET: 0,\n  XPUB_TYPE: 3,\n  SCRIPT_CONFIG: 4\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getOutputCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPubRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    xpubType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPubRequest;\n  return proto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (reader.readEnum());\n      msg.setXpubType(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 5:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPubRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.XPubType = {\n  TPUB: 0,\n  XPUB: 1,\n  YPUB: 2,\n  ZPUB: 3,\n  VPUB: 4,\n  UPUB: 5,\n  CAPITAL_VPUB: 6,\n  CAPITAL_ZPUB: 7,\n  CAPITAL_UPUB: 8,\n  CAPITAL_YPUB: 9\n};\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional XPubType xpub_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getXpubType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setXpubType = function(value) {\n  return jspb.Message.setOneofField(this, 3, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearXpubType = function() {\n  return jspb.Message.setOneofField(this, 3, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.hasXpubType = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional bool display = 5;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.repeatedFields_ = [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated uint32 keypath = 3;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignInitRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfigsList: jspb.Message.toObjectList(msg.getScriptConfigsList(),\n    proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject, includeInstance),\n    version: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    numInputs: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    numOutputs: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    locktime: jspb.Message.getFieldWithDefault(msg, 7, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignInitRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader);\n      msg.addScriptConfigs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVersion(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumInputs(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumOutputs(value);\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLocktime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignInitRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getNumInputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getNumOutputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n  f = message.getLocktime();\n  if (f !== 0) {\n    writer.writeUint32(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated BTCScriptConfigWithKeypath script_configs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getScriptConfigsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setScriptConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.addScriptConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.clearScriptConfigsList = function() {\n  return this.setScriptConfigsList([]);\n};\n\n\n/**\n * optional uint32 version = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional uint32 num_inputs = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getNumInputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setNumInputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional uint32 num_outputs = 6;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getNumOutputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setNumOutputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional uint32 locktime = 7;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getLocktime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setLocktime = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    index: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    hasSignature: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n    signature: msg.getSignature_asB64(),\n    prevIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    antiKleptoSignerCommitment: (f = msg.getAntiKleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignNextResponse;\n  return proto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setIndex(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setHasSignature(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevIndex(value);\n      break;\n    case 6:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntiKleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getHasSignature();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getPrevIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getAntiKleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.Type = {\n  INPUT: 0,\n  OUTPUT: 1,\n  DONE: 2,\n  PREVTX_INIT: 3,\n  PREVTX_INPUT: 4,\n  PREVTX_OUTPUT: 5,\n  HOST_NONCE: 6\n};\n\n/**\n * optional Type type = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional uint32 index = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bool has_signature = 3;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getHasSignature = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setHasSignature = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n/**\n * optional bytes signature = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes signature = 4;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional uint32 prev_index = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getPrevIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setPrevIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getAntiKleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setAntiKleptoSignerCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 6, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.clearAntiKleptoSignerCommitment = function() {\n  return this.setAntiKleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.hasAntiKleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.repeatedFields_ = [6];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignInputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    prevouthash: msg.getPrevouthash_asB64(),\n    prevoutindex: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    prevoutvalue: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,\n    scriptConfigIndex: jspb.Message.getFieldWithDefault(msg, 7, 0),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignInputRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevouthash(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevoutindex(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setPrevoutvalue(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setSequence(value);\n      break;\n    case 6:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setScriptConfigIndex(value);\n      break;\n    case 8:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignInputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPrevouthash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getPrevoutindex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getPrevoutvalue();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f = message.getSequence();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      6,\n      f\n    );\n  }\n  f = message.getScriptConfigIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      7,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * This is a type-conversion wrapper around `getPrevouthash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevouthash()));\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevouthash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevouthash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevouthash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional uint32 prevOutIndex = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevoutindex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevoutindex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint64 prevOutValue = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevoutvalue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevoutvalue = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setSequence = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * repeated uint32 keypath = 6;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 6, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint32 script_config_index = 7;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getScriptConfigIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setScriptConfigIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 8;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 8, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.repeatedFields_ = [5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignOutputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ours: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n    type: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    value: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    hash: msg.getHash_asB64(),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n    scriptConfigIndex: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignOutputRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setOurs(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCOutputType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setHash(value);\n      break;\n    case 5:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setScriptConfigIndex(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignOutputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOurs();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f = message.getHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      5,\n      f\n    );\n  }\n  f = message.getScriptConfigIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool ours = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getOurs = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setOurs = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n/**\n * optional BTCOutputType type = 2;\n * @return {!proto.shiftcrypto.bitbox02.BTCOutputType}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCOutputType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCOutputType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional uint64 value = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes hash = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes hash = 4;\n * This is a type-conversion wrapper around `getHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getHash()));\n};\n\n\n/**\n * optional bytes hash = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * repeated uint32 keypath = 5;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 5, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint32 script_config_index = 6;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getScriptConfigIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setScriptConfigIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.repeatedFields_ = [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated uint32 keypath = 3;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSuccess.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSuccess;\n  return proto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    registration: (f = msg.getRegistration()) && proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest;\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader);\n      msg.setRegistration(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCScriptConfigRegistration registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.getRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.setRegistration = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.clearRegistration = function() {\n  return this.setRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.hasRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    isRegistered: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse;\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsRegistered(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getIsRegistered();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool is_registered = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.getIsRegistered = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.setIsRegistered = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    registration: (f = msg.getRegistration()) && proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(includeInstance, f),\n    name: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    xpubType: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest;\n  return proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader);\n      msg.setRegistration(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} */ (reader.readEnum());\n      msg.setXpubType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter\n    );\n  }\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getXpubType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType = {\n  AUTO_ELECTRUM: 0,\n  AUTO_XPUB_TPUB: 1\n};\n\n/**\n * optional BTCScriptConfigRegistration registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setRegistration = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.clearRegistration = function() {\n  return this.setRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.hasRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string name = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional XPubType xpub_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getXpubType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setXpubType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    version: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    numInputs: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    numOutputs: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    locktime: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVersion(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumInputs(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumOutputs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLocktime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getNumInputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getNumOutputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getLocktime();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 version = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 num_inputs = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getNumInputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setNumInputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 num_outputs = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getNumOutputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setNumOutputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 locktime = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getLocktime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setLocktime = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    prevOutHash: msg.getPrevOutHash_asB64(),\n    prevOutIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    signatureScript: msg.getSignatureScript_asB64(),\n    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevOutHash(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevOutIndex(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignatureScript(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setSequence(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPrevOutHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getPrevOutIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getSignatureScript_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getSequence();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setPrevOutHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional uint32 prev_out_index = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setPrevOutIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * This is a type-conversion wrapper around `getSignatureScript()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignatureScript()));\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignatureScript()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignatureScript()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setSignatureScript = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setSequence = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    value: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    pubkeyScript: msg.getPubkeyScript_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPubkeyScript(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getPubkeyScript_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 value = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * This is a type-conversion wrapper around `getPubkeyScript()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPubkeyScript()));\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPubkeyScript()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPubkeyScript()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.setPubkeyScript = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject(includeInstance, f),\n    msg: msg.getMsg_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignMessageRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getMsg_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional BTCScriptConfigWithKeypath script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional bytes msg = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes msg = 3;\n * This is a type-conversion wrapper around `getMsg()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getMsg()));\n};\n\n\n/**\n * optional bytes msg = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getMsg()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getMsg()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setMsg = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 4, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignMessageResponse;\n  return proto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_ = [[1,2,3,4,5,6,7]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  IS_SCRIPT_CONFIG_REGISTERED: 1,\n  REGISTER_SCRIPT_CONFIG: 2,\n  PREVTX_INIT: 3,\n  PREVTX_INPUT: 4,\n  PREVTX_OUTPUT: 5,\n  SIGN_MESSAGE: 6,\n  ANTIKLEPTO_SIGNATURE: 7\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    isScriptConfigRegistered: (f = msg.getIsScriptConfigRegistered()) && proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject(includeInstance, f),\n    registerScriptConfig: (f = msg.getRegisterScriptConfig()) && proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject(includeInstance, f),\n    prevtxInit: (f = msg.getPrevtxInit()) && proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject(includeInstance, f),\n    prevtxInput: (f = msg.getPrevtxInput()) && proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject(includeInstance, f),\n    prevtxOutput: (f = msg.getPrevtxOutput()) && proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject(includeInstance, f),\n    signMessage: (f = msg.getSignMessage()) && proto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject(includeInstance, f),\n    antikleptoSignature: (f = msg.getAntikleptoSignature()) && antiklepto_pb.AntiKleptoSignatureRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCRequest;\n  return proto.shiftcrypto.bitbox02.BTCRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader);\n      msg.setIsScriptConfigRegistered(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader);\n      msg.setRegisterScriptConfig(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader);\n      msg.setPrevtxInit(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader);\n      msg.setPrevtxInput(value);\n      break;\n    case 5:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader);\n      msg.setPrevtxOutput(value);\n      break;\n    case 6:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignMessageRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader);\n      msg.setSignMessage(value);\n      break;\n    case 7:\n      var value = new antiklepto_pb.AntiKleptoSignatureRequest;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignatureRequest.deserializeBinaryFromReader);\n      msg.setAntikleptoSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getIsScriptConfigRegistered();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRegisterScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxInit();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxInput();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxOutput();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMessage();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignature();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      antiklepto_pb.AntiKleptoSignatureRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getIsScriptConfigRegistered = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setIsScriptConfigRegistered = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearIsScriptConfigRegistered = function() {\n  return this.setIsScriptConfigRegistered(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasIsScriptConfigRegistered = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional BTCRegisterScriptConfigRequest register_script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getRegisterScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setRegisterScriptConfig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearRegisterScriptConfig = function() {\n  return this.setRegisterScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasRegisterScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional BTCPrevTxInitRequest prevtx_init = 3;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxInit = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxInit = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxInit = function() {\n  return this.setPrevtxInit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxInit = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCPrevTxInputRequest prevtx_input = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxInput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxInput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxInput = function() {\n  return this.setPrevtxInput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxInput = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional BTCPrevTxOutputRequest prevtx_output = 5;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxOutput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxOutput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxOutput = function() {\n  return this.setPrevtxOutput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxOutput = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional BTCSignMessageRequest sign_message = 6;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getSignMessage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignMessageRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignMessageRequest, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignMessageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setSignMessage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearSignMessage = function() {\n  return this.setSignMessage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasSignMessage = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional AntiKleptoSignatureRequest antiklepto_signature = 7;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getAntikleptoSignature = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignatureRequest, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setAntikleptoSignature = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearAntikleptoSignature = function() {\n  return this.setAntikleptoSignature(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasAntikleptoSignature = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_ = [[1,2,3,4,5]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  SUCCESS: 1,\n  IS_SCRIPT_CONFIG_REGISTERED: 2,\n  SIGN_NEXT: 3,\n  SIGN_MESSAGE: 4,\n  ANTIKLEPTO_SIGNER_COMMITMENT: 5\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    success: (f = msg.getSuccess()) && proto.shiftcrypto.bitbox02.BTCSuccess.toObject(includeInstance, f),\n    isScriptConfigRegistered: (f = msg.getIsScriptConfigRegistered()) && proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject(includeInstance, f),\n    signNext: (f = msg.getSignNext()) && proto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject(includeInstance, f),\n    signMessage: (f = msg.getSignMessage()) && proto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject(includeInstance, f),\n    antikleptoSignerCommitment: (f = msg.getAntikleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCResponse;\n  return proto.shiftcrypto.bitbox02.BTCResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCSuccess;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader);\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader);\n      msg.setIsScriptConfigRegistered(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignNextResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader);\n      msg.setSignNext(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignMessageResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader);\n      msg.setSignMessage(value);\n      break;\n    case 5:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntikleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSuccess();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter\n    );\n  }\n  f = message.getIsScriptConfigRegistered();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignNext();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMessage();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCSuccess success = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSuccess = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSuccess} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSuccess, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSuccess|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSuccess = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSuccess = function() {\n  return this.setSuccess(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSuccess = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getIsScriptConfigRegistered = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setIsScriptConfigRegistered = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearIsScriptConfigRegistered = function() {\n  return this.setIsScriptConfigRegistered(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasIsScriptConfigRegistered = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional BTCSignNextResponse sign_next = 3;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSignNext = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignNextResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignNextResponse, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignNextResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSignNext = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSignNext = function() {\n  return this.setSignNext(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSignNext = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCSignMessageResponse sign_message = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSignMessage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignMessageResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignMessageResponse, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignMessageResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSignMessage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSignMessage = function() {\n  return this.setSignMessage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSignMessage = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getAntikleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setAntikleptoSignerCommitment = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearAntikleptoSignerCommitment = function() {\n  return this.setAntikleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasAntikleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCCoin = {\n  BTC: 0,\n  TBTC: 1,\n  LTC: 2,\n  TLTC: 3\n};\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCOutputType = {\n  UNKNOWN: 0,\n  P2PKH: 1,\n  P2SH: 2,\n  P2WPKH: 3,\n  P2WSH: 4\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: cardano.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoAddressRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoNetwork', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoAddressRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoAddressRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoAddressRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathsList: jspb.Message.toObjectList(msg.getKeypathsList(),\n    common_pb.Keypath.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;\n  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.addKeypaths(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated Keypath keypaths = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.Keypath>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.getKeypathsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.Keypath>} */ (\n    jspb.Message.getRepeatedWrapperField(this, common_pb.Keypath, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.Keypath>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.setKeypathsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.Keypath=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.addKeypaths = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.Keypath, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.clearKeypathsList = function() {\n  return this.setKeypathsList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubsList: msg.getXpubsList_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;\n  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addXpubs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubsList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * @return {!Array<string>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * This is a type-conversion wrapper around `getXpubsList()`\n * @return {!Array<string>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getXpubsList()));\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getXpubsList()`\n * @return {!Array<!Uint8Array>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getXpubsList()));\n};\n\n\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.setXpubsList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.addXpubs = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.clearXpubsList = function() {\n  return this.setXpubsList([]);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_ = [[1]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase = {\n  CONFIG_NOT_SET: 0,\n  PKH_SKH: 1\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getConfigCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pkhSkh: (f = msg.getPkhSkh()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader);\n      msg.setPkhSkh(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPkhSkh();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_ = [1,2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathPaymentList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    keypathStakeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypathPayment(values[i]);\n      }\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypathStake(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathPaymentList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathStakeList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath_payment = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathPaymentList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathPaymentList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathPayment = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathPaymentList = function() {\n  return this.setKeypathPaymentList([]);\n};\n\n\n/**\n * repeated uint32 keypath_stake = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathStakeList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathStakeList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathStake = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathStakeList = function() {\n  return this.setKeypathStakeList([]);\n};\n\n\n/**\n * optional PkhSkh pkh_skh = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getPkhSkh = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.setPkhSkh = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.clearPkhSkh = function() {\n  return this.setPkhSkh(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.hasPkhSkh = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    network: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;\n  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());\n      msg.setNetwork(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getNetwork();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoNetwork network = 1;\n * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getNetwork = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setNetwork = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional bool display = 2;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n/**\n * optional CardanoScriptConfig script_config = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_ = [2,3,6,7];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    network: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    inputsList: jspb.Message.toObjectList(msg.getInputsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject, includeInstance),\n    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject, includeInstance),\n    fee: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    ttl: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    certificatesList: jspb.Message.toObjectList(msg.getCertificatesList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject, includeInstance),\n    withdrawalsList: jspb.Message.toObjectList(msg.getWithdrawalsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject, includeInstance),\n    validityIntervalStart: jspb.Message.getFieldWithDefault(msg, 8, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());\n      msg.setNetwork(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader);\n      msg.addInputs(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader);\n      msg.addOutputs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setFee(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setTtl(value);\n      break;\n    case 6:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader);\n      msg.addCertificates(value);\n      break;\n    case 7:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader);\n      msg.addWithdrawals(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValidityIntervalStart(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getNetwork();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getInputsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter\n    );\n  }\n  f = message.getOutputsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter\n    );\n  }\n  f = message.getFee();\n  if (f !== 0) {\n    writer.writeUint64(\n      4,\n      f\n    );\n  }\n  f = message.getTtl();\n  if (f !== 0) {\n    writer.writeUint64(\n      5,\n      f\n    );\n  }\n  f = message.getCertificatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      6,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter\n    );\n  }\n  f = message.getWithdrawalsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      7,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter\n    );\n  }\n  f = message.getValidityIntervalStart();\n  if (f !== 0) {\n    writer.writeUint64(\n      8,\n      f\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    prevOutHash: msg.getPrevOutHash_asB64(),\n    prevOutIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevOutHash(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevOutIndex(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getPrevOutHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getPrevOutIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional uint32 prev_out_index = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    encodedAddress: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    value: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setEncodedAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEncodedAddress();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string encoded_address = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getEncodedAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setEncodedAddress = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint64 value = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional CardanoScriptConfig script_config = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase = {\n  CERT_NOT_SET: 0,\n  STAKE_REGISTRATION: 1,\n  STAKE_DEREGISTRATION: 2,\n  STAKE_DELEGATION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getCertCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    stakeRegistration: (f = msg.getStakeRegistration()) && common_pb.Keypath.toObject(includeInstance, f),\n    stakeDeregistration: (f = msg.getStakeDeregistration()) && common_pb.Keypath.toObject(includeInstance, f),\n    stakeDelegation: (f = msg.getStakeDelegation()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.setStakeRegistration(value);\n      break;\n    case 2:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.setStakeDeregistration(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader);\n      msg.setStakeDelegation(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getStakeRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getStakeDeregistration();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getStakeDelegation();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    poolKeyhash: msg.getPoolKeyhash_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPoolKeyhash(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getPoolKeyhash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * This is a type-conversion wrapper around `getPoolKeyhash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPoolKeyhash()));\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPoolKeyhash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPoolKeyhash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setPoolKeyhash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional Keypath stake_registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (\n    jspb.Message.getWrapperField(this, common_pb.Keypath, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeRegistration = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeRegistration = function() {\n  return this.setStakeRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Keypath stake_deregistration = 2;\n * @return {?proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDeregistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (\n    jspb.Message.getWrapperField(this, common_pb.Keypath, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDeregistration = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDeregistration = function() {\n  return this.setStakeDeregistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDeregistration = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional StakeDelegation stake_delegation = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDelegation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDelegation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDelegation = function() {\n  return this.setStakeDelegation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDelegation = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    value: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint64 value = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional CardanoNetwork network = 1;\n * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getNetwork = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setNetwork = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated Input inputs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getInputsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setInputsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addInputs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearInputsList = function() {\n  return this.setInputsList([]);\n};\n\n\n/**\n * repeated Output outputs = 3;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getOutputsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, 3));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setOutputsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addOutputs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearOutputsList = function() {\n  return this.setOutputsList([]);\n};\n\n\n/**\n * optional uint64 fee = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getFee = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setFee = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional uint64 ttl = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getTtl = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setTtl = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * repeated Certificate certificates = 6;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getCertificatesList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, 6));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setCertificatesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addCertificates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearCertificatesList = function() {\n  return this.setCertificatesList([]);\n};\n\n\n/**\n * repeated Withdrawal withdrawals = 7;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getWithdrawalsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, 7));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setWithdrawalsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addWithdrawals = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearWithdrawalsList = function() {\n  return this.setWithdrawalsList([]);\n};\n\n\n/**\n * optional uint64 validity_interval_start = 8;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getValidityIntervalStart = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setValidityIntervalStart = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    shelleyWitnessesList: jspb.Message.toObjectList(msg.getShelleyWitnessesList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader);\n      msg.addShelleyWitnesses(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getShelleyWitnessesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    publicKey: msg.getPublicKey_asB64(),\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPublicKey(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPublicKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes public_key = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes public_key = 1;\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPublicKey()));\n};\n\n\n/**\n * optional bytes public_key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPublicKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setPublicKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes signature = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes signature = 2;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * repeated ShelleyWitness shelley_witnesses = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.getShelleyWitnessesList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.setShelleyWitnessesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.addShelleyWitnesses = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.clearShelleyWitnessesList = function() {\n  return this.setShelleyWitnessesList([]);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  XPUBS: 1,\n  ADDRESS: 2,\n  SIGN_TRANSACTION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(includeInstance, f),\n    address: (f = msg.getAddress()) && proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(includeInstance, f),\n    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoRequest;\n  return proto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader);\n      msg.setXpubs(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader);\n      msg.setAddress(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader);\n      msg.setSignTransaction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubs();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAddress();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignTransaction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoXpubsRequest xpubs = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getXpubs = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setXpubs = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearXpubs = function() {\n  return this.setXpubs(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasXpubs = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional CardanoAddressRequest address = 2;\n * @return {?proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getAddress = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoAddressRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoAddressRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoAddressRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setAddress = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearAddress = function() {\n  return this.setAddress(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasAddress = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional CardanoSignTransactionRequest sign_transaction = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getSignTransaction = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setSignTransaction = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearSignTransaction = function() {\n  return this.setSignTransaction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasSignTransaction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  XPUBS: 1,\n  PUB: 2,\n  SIGN_TRANSACTION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(includeInstance, f),\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoResponse;\n  return proto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader);\n      msg.setXpubs(value);\n      break;\n    case 2:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader);\n      msg.setSignTransaction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubs();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignTransaction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoXpubsResponse xpubs = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getXpubs = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsResponse, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setXpubs = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearXpubs = function() {\n  return this.setXpubs(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasXpubs = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional PubResponse pub = 2;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional CardanoSignTransactionResponse sign_transaction = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getSignTransaction = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setSignTransaction = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearSignTransaction = function() {\n  return this.setSignTransaction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasSignTransaction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoNetwork = {\n  CARDANOMAINNET: 0,\n  CARDANOTESTNET: 1\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: keystore.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.displayName = 'proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.displayName = 'proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest;\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    key: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse;\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKey();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string key = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.getKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.setKey = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n"],"sourceRoot":""}