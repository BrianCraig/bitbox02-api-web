{"version":3,"sources":["proto/backup_commands_pb.js","proto/bitbox02_system_pb.js","proto/btc_pb.js","proto/cardano_pb.js","proto/keystore_pb.js","proto/mnemonic_pb.js","proto/system_pb.js","proto/perform_attestation_pb.js","api/utils.ts","api/handshake.ts","api/messages.ts","api/uh2Frame.ts","api/errors.ts","api/eth_messages.ts","api/device.ts","context/contexts.tsx","utils/hooks.ts","views/ConnectingView.tsx","components/EthPublicForm.tsx","views/MessagesView.tsx","App.tsx","reportWebVitals.ts","index.tsx","proto/common_pb.js","proto/eth_pb.js","proto/hww_pb.js","proto/antiklepto_pb.js"],"names":["jspb","require","goog","global","this","window","self","Function","call","exportSymbol","proto","shiftcrypto","bitbox02","CheckBackupRequest","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","CheckBackupResponse","CreateBackupRequest","ListBackupsRequest","BackupInfo","ListBackupsResponse","repeatedFields_","RestoreBackupRequest","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","obj","silent","getBooleanFieldWithDefault","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","value","readBool","setSilent","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","getSilent","writeBool","setProto3BooleanField","id","getFieldWithDefault","readString","setId","getId","length","writeString","setProto3StringField","timestamp","timezoneOffset","readUint32","setTimestamp","readInt32","setTimezoneOffset","undefined","getTimestamp","writeUint32","getTimezoneOffset","writeInt32","setProto3IntField","name","setName","getName","infoList","toObjectList","getInfoList","readMessage","addInfo","writeRepeatedMessage","getRepeatedWrapperField","setInfoList","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","clearInfoList","object","extend","exports","CheckSDCardRequest","CheckSDCardResponse","DeviceInfoRequest","DeviceInfoResponse","InsertRemoveSDCardRequest","ResetRequest","SetDeviceLanguageRequest","SetDeviceNameRequest","SetPasswordRequest","inserted","setInserted","getInserted","initialized","version","mnemonicPassphraseEnabled","monotonicIncrementsRemaining","securechipModel","setInitialized","setVersion","setMnemonicPassphraseEnabled","setMonotonicIncrementsRemaining","setSecurechipModel","getInitialized","getVersion","getMnemonicPassphraseEnabled","getMonotonicIncrementsRemaining","getSecurechipModel","action","readEnum","setAction","getAction","writeEnum","SDCardAction","REMOVE_CARD","INSERT_CARD","setProto3EnumField","language","setLanguage","getLanguage","entropy","getEntropy_asB64","readBytes","setEntropy","getEntropy_asU8","writeBytes","getEntropy","bytesAsB64","bytesAsU8","setProto3BytesField","common_pb","antiklepto_pb","BTCScriptConfig","oneofGroups_","Multisig","BTCPubRequest","BTCScriptConfigWithKeypath","BTCSignInitRequest","BTCSignNextResponse","BTCSignInputRequest","BTCSignOutputRequest","BTCScriptConfigRegistration","BTCSuccess","BTCIsScriptConfigRegisteredRequest","BTCIsScriptConfigRegisteredResponse","BTCRegisterScriptConfigRequest","BTCPrevTxInitRequest","BTCPrevTxInputRequest","BTCPrevTxOutputRequest","BTCSignMessageRequest","BTCSignMessageResponse","BTCRequest","BTCResponse","ConfigCase","CONFIG_NOT_SET","SIMPLE_TYPE","MULTISIG","getConfigCase","computeOneofCase","simpleType","multisig","getMultisig","setSimpleType","setMultisig","getField","writeMessage","SimpleType","P2WPKH_P2SH","P2WPKH","threshold","xpubsList","getXpubsList","XPub","ourXpubIndex","scriptType","setThreshold","addXpubs","setOurXpubIndex","setScriptType","getThreshold","getOurXpubIndex","getScriptType","ScriptType","P2WSH","P2WSH_P2SH","setXpubsList","clearXpubsList","getSimpleType","setOneofField","clearSimpleType","hasSimpleType","getWrapperField","setOneofWrapperField","clearMultisig","hasMultisig","OutputCase","OUTPUT_NOT_SET","XPUB_TYPE","SCRIPT_CONFIG","getOutputCase","coin","keypathList","getRepeatedField","xpubType","scriptConfig","getScriptConfig","display","setCoin","values","isDelimited","readPackedUint32","i","addKeypath","setXpubType","setScriptConfig","setDisplay","getCoin","getKeypathList","writePackedUint32","getDisplay","XPubType","TPUB","XPUB","YPUB","ZPUB","VPUB","UPUB","CAPITAL_VPUB","CAPITAL_ZPUB","CAPITAL_UPUB","CAPITAL_YPUB","setKeypathList","setField","addToRepeatedField","clearKeypathList","getXpubType","clearXpubType","hasXpubType","clearScriptConfig","hasScriptConfig","setWrapperField","scriptConfigsList","getScriptConfigsList","numInputs","numOutputs","locktime","addScriptConfigs","setNumInputs","setNumOutputs","setLocktime","getNumInputs","getNumOutputs","getLocktime","setScriptConfigsList","clearScriptConfigsList","type","index","hasSignature","signature","getSignature_asB64","prevIndex","antiKleptoSignerCommitment","getAntiKleptoSignerCommitment","AntiKleptoSignerCommitment","setType","setIndex","setHasSignature","setSignature","setPrevIndex","setAntiKleptoSignerCommitment","getType","getIndex","getHasSignature","getSignature_asU8","getPrevIndex","Type","INPUT","OUTPUT","DONE","PREVTX_INIT","PREVTX_INPUT","PREVTX_OUTPUT","HOST_NONCE","getSignature","clearAntiKleptoSignerCommitment","hasAntiKleptoSignerCommitment","prevouthash","getPrevouthash_asB64","prevoutindex","prevoutvalue","sequence","scriptConfigIndex","hostNonceCommitment","getHostNonceCommitment","AntiKleptoHostNonceCommitment","setPrevouthash","setPrevoutindex","readUint64","setPrevoutvalue","setSequence","setScriptConfigIndex","setHostNonceCommitment","getPrevouthash_asU8","getPrevoutindex","getPrevoutvalue","writeUint64","getSequence","getScriptConfigIndex","getPrevouthash","clearHostNonceCommitment","hasHostNonceCommitment","ours","hash","getHash_asB64","setOurs","setValue","setHash","getOurs","getValue","getHash_asU8","getHash","registration","getRegistration","setRegistration","clearRegistration","hasRegistration","isRegistered","setIsRegistered","getIsRegistered","AUTO_ELECTRUM","AUTO_XPUB_TPUB","prevOutHash","getPrevOutHash_asB64","prevOutIndex","signatureScript","getSignatureScript_asB64","setPrevOutHash","setPrevOutIndex","setSignatureScript","getPrevOutHash_asU8","getPrevOutIndex","getSignatureScript_asU8","getPrevOutHash","getSignatureScript","pubkeyScript","getPubkeyScript_asB64","setPubkeyScript","getPubkeyScript_asU8","getPubkeyScript","getMsg_asB64","setMsg","getMsg_asU8","getMsg","RequestCase","REQUEST_NOT_SET","IS_SCRIPT_CONFIG_REGISTERED","REGISTER_SCRIPT_CONFIG","SIGN_MESSAGE","ANTIKLEPTO_SIGNATURE","getRequestCase","isScriptConfigRegistered","getIsScriptConfigRegistered","registerScriptConfig","getRegisterScriptConfig","prevtxInit","getPrevtxInit","prevtxInput","getPrevtxInput","prevtxOutput","getPrevtxOutput","signMessage","getSignMessage","antikleptoSignature","getAntikleptoSignature","AntiKleptoSignatureRequest","setIsScriptConfigRegistered","setRegisterScriptConfig","setPrevtxInit","setPrevtxInput","setPrevtxOutput","setSignMessage","setAntikleptoSignature","clearIsScriptConfigRegistered","hasIsScriptConfigRegistered","clearRegisterScriptConfig","hasRegisterScriptConfig","clearPrevtxInit","hasPrevtxInit","clearPrevtxInput","hasPrevtxInput","clearPrevtxOutput","hasPrevtxOutput","clearSignMessage","hasSignMessage","clearAntikleptoSignature","hasAntikleptoSignature","ResponseCase","RESPONSE_NOT_SET","SUCCESS","SIGN_NEXT","ANTIKLEPTO_SIGNER_COMMITMENT","getResponseCase","success","getSuccess","signNext","getSignNext","antikleptoSignerCommitment","getAntikleptoSignerCommitment","setSuccess","setSignNext","setAntikleptoSignerCommitment","clearSuccess","hasSuccess","clearSignNext","hasSignNext","clearAntikleptoSignerCommitment","hasAntikleptoSignerCommitment","BTCCoin","BTC","TBTC","LTC","TLTC","BTCOutputType","UNKNOWN","P2PKH","P2SH","CardanoXpubsRequest","CardanoXpubsResponse","CardanoScriptConfig","PkhSkh","CardanoAddressRequest","CardanoSignTransactionRequest","Input","Output","Certificate","StakeDelegation","Withdrawal","CardanoSignTransactionResponse","ShelleyWitness","CardanoRequest","CardanoResponse","keypathsList","getKeypathsList","Keypath","addKeypaths","setKeypathsList","clearKeypathsList","getXpubsList_asB64","getXpubsList_asU8","writeRepeatedBytes","bytesListAsB64","bytesListAsU8","PKH_SKH","pkhSkh","getPkhSkh","setPkhSkh","keypathPaymentList","keypathStakeList","addKeypathPayment","addKeypathStake","getKeypathPaymentList","getKeypathStakeList","setKeypathPaymentList","clearKeypathPaymentList","setKeypathStakeList","clearKeypathStakeList","clearPkhSkh","hasPkhSkh","network","setNetwork","getNetwork","inputsList","getInputsList","outputsList","getOutputsList","fee","ttl","certificatesList","getCertificatesList","withdrawalsList","getWithdrawalsList","validityIntervalStart","addInputs","addOutputs","setFee","setTtl","addCertificates","addWithdrawals","setValidityIntervalStart","getFee","getTtl","getValidityIntervalStart","encodedAddress","setEncodedAddress","getEncodedAddress","CertCase","CERT_NOT_SET","STAKE_REGISTRATION","STAKE_DEREGISTRATION","STAKE_DELEGATION","getCertCase","stakeRegistration","getStakeRegistration","stakeDeregistration","getStakeDeregistration","stakeDelegation","getStakeDelegation","setStakeRegistration","setStakeDeregistration","setStakeDelegation","poolKeyhash","getPoolKeyhash_asB64","setPoolKeyhash","getPoolKeyhash_asU8","getPoolKeyhash","clearStakeRegistration","hasStakeRegistration","clearStakeDeregistration","hasStakeDeregistration","clearStakeDelegation","hasStakeDelegation","setInputsList","clearInputsList","setOutputsList","clearOutputsList","setCertificatesList","clearCertificatesList","setWithdrawalsList","clearWithdrawalsList","shelleyWitnessesList","getShelleyWitnessesList","addShelleyWitnesses","publicKey","getPublicKey_asB64","setPublicKey","getPublicKey_asU8","getPublicKey","setShelleyWitnessesList","clearShelleyWitnessesList","XPUBS","ADDRESS","SIGN_TRANSACTION","xpubs","getXpubs","address","getAddress","signTransaction","getSignTransaction","setXpubs","setAddress","setSignTransaction","clearXpubs","hasXpubs","clearAddress","hasAddress","clearSignTransaction","hasSignTransaction","PUB","pub","getPub","PubResponse","setPub","clearPub","hasPub","CardanoNetwork","CARDANOMAINNET","CARDANOTESTNET","ElectrumEncryptionKeyRequest","ElectrumEncryptionKeyResponse","key","setKey","getKey","ShowMnemonicRequest","RestoreFromMnemonicRequest","SetMnemonicPassphraseEnabledRequest","enabled","setEnabled","getEnabled","RebootRequest","purpose","setPurpose","getPurpose","Purpose","UPGRADE","SETTINGS","PerformAttestationRequest","PerformAttestationResponse","challenge","getChallenge_asB64","setChallenge","getChallenge_asU8","getChallenge","bootloaderHash","getBootloaderHash_asB64","devicePubkey","getDevicePubkey_asB64","certificate","getCertificate_asB64","rootPubkeyIdentifier","getRootPubkeyIdentifier_asB64","challengeSignature","getChallengeSignature_asB64","setBootloaderHash","setDevicePubkey","setCertificate","setRootPubkeyIdentifier","setChallengeSignature","getBootloaderHash_asU8","getDevicePubkey_asU8","getCertificate_asU8","getRootPubkeyIdentifier_asU8","getChallengeSignature_asU8","getBootloaderHash","getDevicePubkey","getCertificate","getRootPubkeyIdentifier","getChallengeSignature","add","accumulator","a","u8join","params","size","map","e","reduce","uint8","Uint8Array","pos","arr","set","HARDENED","getKeypathFromString","keypathString","levels","toLowerCase","split","Error","slice","level","hardened","substring","x","parseInt","isNaN","withOp","data","from","withoutOp","Rust","fakeAttestation","unlock","cleanYourHandsBeforeHandshake","inHandshake","device","send","info","attestation","unlocked","handshake","r","Noise","new","init","write","response","read","share","deviceStatus","encrypted","deviceAcceptedPairing","crypto","encrypt","out","decrypt","infoRequest","textDecoder","TextDecoder","infoDigest","vLength","vString","decode","versions","match","parseFloat","major","minor","patch","platformId","editionId","infoQuery","channel","sizeToPackets","Math","ceil","headerInfo","packets","bytesToPackages","Array","keys","totalToWrite","offset","packet","fill","maxLengthToWrite","writeOf","min","subarray","DataView","Uint16Array","buffer","getUint8","packagesToBytes","frame","start","BitBoxError","NotCompatibleBrowser","DevicePairingRejected","DeviceExternallyClosed","NoDeviceSelected","DeviceClosedByApp","ethPublic","input","req","ETHPubRequest","outputType","contractAddress","wr","ETHRequest","wr2","Request","setEth","resp","Response","eth","sleep","ms","Promise","resolve","setTimeout","retryPacket","showCode","connect","onInfo","onClose","navigator","hid","requestDevice","filters","vendorId","HIDs","HID","opened","open","listenDisconnects","event","Object","is","removeEventListener","addEventListener","performance","now","sent","opCode","query","waitFrames","console","log","forEach","sendReport","prom","resolver","rejected","allPackets","oninputreport","then","catch","push","receivedData","time","toFixed","received","DOMException","defineProperty","get","newValue","enumerable","configurable","enc","close","DeviceContext","createContext","DeviceContextProvider","children","useState","setInfo","closeError","setCloseError","asyncFunction","immediate","status","setStatus","error","setError","execute","useCallback","useEffect","useAsync","deviceConnect","Provider","connected","connecting","ConnectingBadges","useContext","direction","justify","variant","colorScheme","boxSize","as","UnlockIcon","LockIcon","ViewOffIcon","ViewIcon","ConnectingState","color","rounded","padding","backgroundColor","spacing","CheckIcon","TimeIcon","ConnectingView","maxWidth","width","margin","onClick","isLoading","loadingText","disabled","EthPublicForm","onSubmit","initialValues","handleSubmit","htmlFor","field","alignItems","mb","defaultValue","placeholder","toString","or","JSON","stringify","_","el","hexlify","MessagesComponent","border","borderColor","flex","whiteSpace","overflowX","MessagesView","setReq","setResp","App","h","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","RootFingerprintRequest","RootFingerprintResponse","fingerprint","getFingerprint_asB64","setFingerprint","getFingerprint_asU8","getFingerprint","depth","getDepth_asB64","parentFingerprint","getParentFingerprint_asB64","childNum","chainCode","getChainCode_asB64","setDepth","setParentFingerprint","setChildNum","setChainCode","getDepth_asU8","getParentFingerprint_asU8","getChildNum","getChainCode_asU8","getDepth","getParentFingerprint","getChainCode","ETHSignRequest","ETHSignMessageRequest","ETHSignResponse","ETHResponse","getContractAddress_asB64","setOutputType","setContractAddress","getOutputType","getContractAddress_asU8","OutputType","getContractAddress","nonce","getNonce_asB64","gasPrice","getGasPrice_asB64","gasLimit","getGasLimit_asB64","recipient","getRecipient_asB64","getValue_asB64","getData_asB64","setNonce","setGasPrice","setGasLimit","setRecipient","setData","getNonce_asU8","getGasPrice_asU8","getGasLimit_asU8","getRecipient_asU8","getValue_asU8","getData_asU8","getNonce","getGasPrice","getGasLimit","getRecipient","getData","SIGN","SIGN_MSG","sign","getSign","signMsg","getSignMsg","setSign","setSignMsg","clearSign","hasSign","clearSignMsg","hasSignMsg","ETHCoin","ETH","ROPSTENETH","RINKEBYETH","backup_commands_pb","bitbox02_system_pb","btc_pb","cardano_pb","eth_pb","keystore_pb","mnemonic_pb","system_pb","perform_attestation_pb","Success","code","setCode","setMessage","getCode","getMessage","DEVICE_NAME","DEVICE_LANGUAGE","DEVICE_INFO","SET_PASSWORD","CREATE_BACKUP","SHOW_MNEMONIC","BTC_PUB","BTC_SIGN_INIT","BTC_SIGN_INPUT","BTC_SIGN_OUTPUT","INSERT_REMOVE_SDCARD","CHECK_SDCARD","SET_MNEMONIC_PASSPHRASE_ENABLED","LIST_BACKUPS","RESTORE_BACKUP","PERFORM_ATTESTATION","REBOOT","CHECK_BACKUP","RESET","RESTORE_FROM_MNEMONIC","FINGERPRINT","ELECTRUM_ENCRYPTION_KEY","CARDANO","deviceName","getDeviceName","deviceLanguage","getDeviceLanguage","deviceInfo","getDeviceInfo","setPassword","getSetPassword","createBackup","getCreateBackup","showMnemonic","getShowMnemonic","btcPub","getBtcPub","btcSignInit","getBtcSignInit","btcSignInput","getBtcSignInput","btcSignOutput","getBtcSignOutput","insertRemoveSdcard","getInsertRemoveSdcard","checkSdcard","getCheckSdcard","getSetMnemonicPassphraseEnabled","listBackups","getListBackups","restoreBackup","getRestoreBackup","performAttestation","getPerformAttestation","reboot","getReboot","checkBackup","getCheckBackup","getEth","reset","getReset","restoreFromMnemonic","getRestoreFromMnemonic","btc","getBtc","electrumEncryptionKey","getElectrumEncryptionKey","cardano","getCardano","setDeviceName","setDeviceLanguage","setDeviceInfo","setSetPassword","setCreateBackup","setShowMnemonic","setBtcPub","setBtcSignInit","setBtcSignInput","setBtcSignOutput","setInsertRemoveSdcard","setCheckSdcard","setSetMnemonicPassphraseEnabled","setListBackups","setRestoreBackup","setPerformAttestation","setReboot","setCheckBackup","setReset","setRestoreFromMnemonic","setBtc","setElectrumEncryptionKey","setCardano","clearDeviceName","hasDeviceName","clearDeviceLanguage","hasDeviceLanguage","clearDeviceInfo","hasDeviceInfo","clearSetPassword","hasSetPassword","clearCreateBackup","hasCreateBackup","clearShowMnemonic","hasShowMnemonic","clearBtcPub","hasBtcPub","clearBtcSignInit","hasBtcSignInit","clearBtcSignInput","hasBtcSignInput","clearBtcSignOutput","hasBtcSignOutput","clearInsertRemoveSdcard","hasInsertRemoveSdcard","clearCheckSdcard","hasCheckSdcard","clearSetMnemonicPassphraseEnabled","hasSetMnemonicPassphraseEnabled","clearListBackups","hasListBackups","clearRestoreBackup","hasRestoreBackup","clearPerformAttestation","hasPerformAttestation","clearReboot","hasReboot","clearCheckBackup","hasCheckBackup","clearEth","hasEth","clearReset","hasReset","clearRestoreFromMnemonic","hasRestoreFromMnemonic","clearFingerprint","hasFingerprint","clearBtc","hasBtc","clearElectrumEncryptionKey","hasElectrumEncryptionKey","clearCardano","hasCardano","ERROR","BTC_SIGN_NEXT","getError","btcSignNext","getBtcSignNext","setBtcSignNext","clearError","hasError","clearBtcSignNext","hasBtcSignNext","commitment","getCommitment_asB64","setCommitment","getCommitment_asU8","getCommitment","hostNonce","getHostNonce_asB64","setHostNonce","getHostNonce_asU8","getHostNonce"],"mappings":"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","file":"static/js/main.553b1949.chunk.js","sourcesContent":["// source: backup_commands.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BackupInfo', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckBackupRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckBackupResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CreateBackupRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ListBackupsRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ListBackupsResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RestoreBackupRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.CheckBackupRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckBackupResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckBackupResponse.displayName = 'proto.shiftcrypto.bitbox02.CheckBackupResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CreateBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CreateBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.CreateBackupRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ListBackupsRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ListBackupsRequest.displayName = 'proto.shiftcrypto.bitbox02.ListBackupsRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BackupInfo = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BackupInfo, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BackupInfo.displayName = 'proto.shiftcrypto.bitbox02.BackupInfo';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ListBackupsResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ListBackupsResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ListBackupsResponse.displayName = 'proto.shiftcrypto.bitbox02.ListBackupsResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RestoreBackupRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RestoreBackupRequest.displayName = 'proto.shiftcrypto.bitbox02.RestoreBackupRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    silent: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckBackupRequest;\n  return proto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setSilent(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSilent();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool silent = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.getSilent = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CheckBackupRequest.prototype.setSilent = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckBackupResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckBackupResponse;\n  return proto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckBackupResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckBackupResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.CheckBackupResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CheckBackupResponse.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CreateBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CreateBackupRequest;\n  return proto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CreateBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CreateBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 timestamp = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CreateBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CreateBackupRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ListBackupsRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ListBackupsRequest;\n  return proto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ListBackupsRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BackupInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BackupInfo.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    name: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BackupInfo;\n  return proto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint32 timestamp = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional string name = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo} returns this\n */\nproto.shiftcrypto.bitbox02.BackupInfo.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ListBackupsResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    infoList: jspb.Message.toObjectList(msg.getInfoList(),\n    proto.shiftcrypto.bitbox02.BackupInfo.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ListBackupsResponse;\n  return proto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BackupInfo;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BackupInfo.deserializeBinaryFromReader);\n      msg.addInfo(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ListBackupsResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ListBackupsResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInfoList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BackupInfo.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated BackupInfo info = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.BackupInfo>}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.getInfoList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.BackupInfo>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.BackupInfo, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.BackupInfo>} value\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.setInfoList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BackupInfo=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BackupInfo}\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.addInfo = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.BackupInfo, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ListBackupsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ListBackupsResponse.prototype.clearInfoList = function() {\n  return this.setInfoList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RestoreBackupRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RestoreBackupRequest;\n  return proto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RestoreBackupRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint32 timestamp = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreBackupRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreBackupRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: bitbox02_system.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckSDCardRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CheckSDCardResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.DeviceInfoRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.DeviceInfoResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ResetRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetDeviceNameRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetPasswordRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckSDCardRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckSDCardRequest.displayName = 'proto.shiftcrypto.bitbox02.CheckSDCardRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CheckSDCardResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CheckSDCardResponse.displayName = 'proto.shiftcrypto.bitbox02.CheckSDCardResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.DeviceInfoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.DeviceInfoRequest.displayName = 'proto.shiftcrypto.bitbox02.DeviceInfoRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.DeviceInfoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.DeviceInfoResponse.displayName = 'proto.shiftcrypto.bitbox02.DeviceInfoResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.displayName = 'proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ResetRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ResetRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ResetRequest.displayName = 'proto.shiftcrypto.bitbox02.ResetRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.displayName = 'proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetDeviceNameRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetDeviceNameRequest.displayName = 'proto.shiftcrypto.bitbox02.SetDeviceNameRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetPasswordRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetPasswordRequest.displayName = 'proto.shiftcrypto.bitbox02.SetPasswordRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckSDCardRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckSDCardRequest;\n  return proto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckSDCardRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CheckSDCardResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    inserted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CheckSDCardResponse;\n  return proto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setInserted(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CheckSDCardResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInserted();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool inserted = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.getInserted = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CheckSDCardResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CheckSDCardResponse.prototype.setInserted = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.DeviceInfoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.DeviceInfoRequest;\n  return proto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.DeviceInfoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.DeviceInfoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    initialized: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n    version: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    mnemonicPassphraseEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n    monotonicIncrementsRemaining: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    securechipModel: jspb.Message.getFieldWithDefault(msg, 6, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.DeviceInfoResponse;\n  return proto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setInitialized(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setVersion(value);\n      break;\n    case 4:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setMnemonicPassphraseEnabled(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setMonotonicIncrementsRemaining(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setSecurechipModel(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.DeviceInfoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getInitialized();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f = message.getVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getMnemonicPassphraseEnabled();\n  if (f) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n  f = message.getMonotonicIncrementsRemaining();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getSecurechipModel();\n  if (f.length > 0) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bool initialized = 2;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getInitialized = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setInitialized = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n/**\n * optional string version = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional bool mnemonic_passphrase_enabled = 4;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getMnemonicPassphraseEnabled = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setMnemonicPassphraseEnabled = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n\n\n/**\n * optional uint32 monotonic_increments_remaining = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getMonotonicIncrementsRemaining = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setMonotonicIncrementsRemaining = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional string securechip_model = 6;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.getSecurechipModel = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.DeviceInfoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.DeviceInfoResponse.prototype.setSecurechipModel = function(value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    action: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest;\n  return proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} */ (reader.readEnum());\n      msg.setAction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAction();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction = {\n  REMOVE_CARD: 0,\n  INSERT_CARD: 1\n};\n\n/**\n * optional SDCardAction action = 1;\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction}\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.getAction = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.SDCardAction} value\n * @return {!proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} returns this\n */\nproto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest.prototype.setAction = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ResetRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ResetRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ResetRequest;\n  return proto.shiftcrypto.bitbox02.ResetRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ResetRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ResetRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ResetRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ResetRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    language: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest;\n  return proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setLanguage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLanguage();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string language = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.getLanguage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetDeviceLanguageRequest.prototype.setLanguage = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetDeviceNameRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetDeviceNameRequest;\n  return proto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetDeviceNameRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.SetDeviceNameRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetDeviceNameRequest.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetPasswordRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    entropy: msg.getEntropy_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetPasswordRequest;\n  return proto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setEntropy(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetPasswordRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetPasswordRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEntropy_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes entropy = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes entropy = 1;\n * This is a type-conversion wrapper around `getEntropy()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getEntropy()));\n};\n\n\n/**\n * optional bytes entropy = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getEntropy()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.getEntropy_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getEntropy()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.SetPasswordRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetPasswordRequest.prototype.setEntropy = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: btc.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar antiklepto_pb = require('./antiklepto_pb.js');\ngoog.object.extend(proto, antiklepto_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCCoin', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCOutputType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignInitRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignInputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignMessageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignMessageResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignNextResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSignOutputRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.BTCSuccess', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCPubRequest.repeatedFields_, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPubRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPubRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPubRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignInitRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignInitRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignInitRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignInitRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignNextResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignNextResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCSignNextResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignInputRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignInputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignInputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignInputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCSignOutputRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignOutputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignOutputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignOutputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.displayName = 'proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSuccess = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSuccess, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSuccess.displayName = 'proto.shiftcrypto.bitbox02.BTCSuccess';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignMessageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignMessageRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCSignMessageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCSignMessageResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCSignMessageResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCSignMessageResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCRequest.displayName = 'proto.shiftcrypto.bitbox02.BTCRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.BTCResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.BTCResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.BTCResponse.displayName = 'proto.shiftcrypto.bitbox02.BTCResponse';\n}\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase = {\n  CONFIG_NOT_SET: 0,\n  SIMPLE_TYPE: 1,\n  MULTISIG: 2\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getConfigCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCScriptConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    simpleType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    multisig: (f = msg.getMultisig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (reader.readEnum());\n      msg.setSimpleType(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader);\n      msg.setMultisig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getMultisig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType = {\n  P2WPKH_P2SH: 0,\n  P2WPKH: 1\n};\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    xpubsList: jspb.Message.toObjectList(msg.getXpubsList(),\n    common_pb.XPub.toObject, includeInstance),\n    ourXpubIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    scriptType: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setThreshold(value);\n      break;\n    case 2:\n      var value = new common_pb.XPub;\n      reader.readMessage(value,common_pb.XPub.deserializeBinaryFromReader);\n      msg.addXpubs(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setOurXpubIndex(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} */ (reader.readEnum());\n      msg.setScriptType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getThreshold();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getXpubsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      common_pb.XPub.serializeBinaryToWriter\n    );\n  }\n  f = message.getOurXpubIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getScriptType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType = {\n  P2WSH: 0,\n  P2WSH_P2SH: 1\n};\n\n/**\n * optional uint32 threshold = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getThreshold = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setThreshold = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * repeated XPub xpubs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.XPub>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getXpubsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.XPub>} */ (\n    jspb.Message.getRepeatedWrapperField(this, common_pb.XPub, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.XPub>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setXpubsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.XPub=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.addXpubs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.XPub, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.clearXpubsList = function() {\n  return this.setXpubsList([]);\n};\n\n\n/**\n * optional uint32 our_xpub_index = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getOurXpubIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setOurXpubIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional ScriptType script_type = 4;\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.getScriptType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig.prototype.setScriptType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 4, value);\n};\n\n\n/**\n * optional SimpleType simple_type = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getSimpleType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfig.SimpleType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.setSimpleType = function(value) {\n  return jspb.Message.setOneofField(this, 1, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.clearSimpleType = function() {\n  return jspb.Message.setOneofField(this, 1, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.hasSimpleType = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Multisig multisig = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.getMultisig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig.Multisig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.setMultisig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.clearMultisig = function() {\n  return this.setMultisig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfig.prototype.hasMultisig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.repeatedFields_ = [2];\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_ = [[3,4]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase = {\n  OUTPUT_NOT_SET: 0,\n  XPUB_TYPE: 3,\n  SCRIPT_CONFIG: 4\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getOutputCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCPubRequest.OutputCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPubRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    xpubType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPubRequest;\n  return proto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (reader.readEnum());\n      msg.setXpubType(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 5:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPubRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (jspb.Message.getField(message, 3));\n  if (f != null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.XPubType = {\n  TPUB: 0,\n  XPUB: 1,\n  YPUB: 2,\n  ZPUB: 3,\n  VPUB: 4,\n  UPUB: 5,\n  CAPITAL_VPUB: 6,\n  CAPITAL_ZPUB: 7,\n  CAPITAL_UPUB: 8,\n  CAPITAL_YPUB: 9\n};\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional XPubType xpub_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getXpubType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCPubRequest.XPubType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setXpubType = function(value) {\n  return jspb.Message.setOneofField(this, 3, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearXpubType = function() {\n  return jspb.Message.setOneofField(this, 3, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.hasXpubType = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCPubRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional bool display = 5;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPubRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.repeatedFields_ = [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated uint32 keypath = 3;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignInitRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfigsList: jspb.Message.toObjectList(msg.getScriptConfigsList(),\n    proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject, includeInstance),\n    version: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    numInputs: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    numOutputs: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    locktime: jspb.Message.getFieldWithDefault(msg, 7, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignInitRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader);\n      msg.addScriptConfigs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVersion(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumInputs(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumOutputs(value);\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLocktime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignInitRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfigsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getNumInputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getNumOutputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n  f = message.getLocktime();\n  if (f !== 0) {\n    writer.writeUint32(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated BTCScriptConfigWithKeypath script_configs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getScriptConfigsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setScriptConfigsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.addScriptConfigs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.clearScriptConfigsList = function() {\n  return this.setScriptConfigsList([]);\n};\n\n\n/**\n * optional uint32 version = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional uint32 num_inputs = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getNumInputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setNumInputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional uint32 num_outputs = 6;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getNumOutputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setNumOutputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional uint32 locktime = 7;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.getLocktime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInitRequest.prototype.setLocktime = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    index: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    hasSignature: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n    signature: msg.getSignature_asB64(),\n    prevIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    antiKleptoSignerCommitment: (f = msg.getAntiKleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignNextResponse;\n  return proto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setIndex(value);\n      break;\n    case 3:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setHasSignature(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevIndex(value);\n      break;\n    case 6:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntiKleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getHasSignature();\n  if (f) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getPrevIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      5,\n      f\n    );\n  }\n  f = message.getAntiKleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.Type = {\n  INPUT: 0,\n  OUTPUT: 1,\n  DONE: 2,\n  PREVTX_INIT: 3,\n  PREVTX_INPUT: 4,\n  PREVTX_OUTPUT: 5,\n  HOST_NONCE: 6\n};\n\n/**\n * optional Type type = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCSignNextResponse.Type} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional uint32 index = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bool has_signature = 3;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getHasSignature = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setHasSignature = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n\n\n/**\n * optional bytes signature = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes signature = 4;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional uint32 prev_index = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getPrevIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setPrevIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment anti_klepto_signer_commitment = 6;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.getAntiKleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.setAntiKleptoSignerCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 6, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignNextResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.clearAntiKleptoSignerCommitment = function() {\n  return this.setAntiKleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignNextResponse.prototype.hasAntiKleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.repeatedFields_ = [6];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignInputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    prevouthash: msg.getPrevouthash_asB64(),\n    prevoutindex: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    prevoutvalue: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,\n    scriptConfigIndex: jspb.Message.getFieldWithDefault(msg, 7, 0),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignInputRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevouthash(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevoutindex(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setPrevoutvalue(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setSequence(value);\n      break;\n    case 6:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 7:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setScriptConfigIndex(value);\n      break;\n    case 8:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignInputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPrevouthash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getPrevoutindex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getPrevoutvalue();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f = message.getSequence();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      6,\n      f\n    );\n  }\n  f = message.getScriptConfigIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      7,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * This is a type-conversion wrapper around `getPrevouthash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevouthash()));\n};\n\n\n/**\n * optional bytes prevOutHash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevouthash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevouthash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevouthash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevouthash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional uint32 prevOutIndex = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevoutindex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevoutindex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint64 prevOutValue = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getPrevoutvalue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setPrevoutvalue = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setSequence = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * repeated uint32 keypath = 6;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 6, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint32 script_config_index = 7;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getScriptConfigIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setScriptConfigIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 8;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 8, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignInputRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.repeatedFields_ = [5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignOutputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ours: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n    type: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    value: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    hash: msg.getHash_asB64(),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n    scriptConfigIndex: jspb.Message.getFieldWithDefault(msg, 6, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignOutputRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setOurs(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCOutputType} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setHash(value);\n      break;\n    case 5:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setScriptConfigIndex(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignOutputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOurs();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f = message.getType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f = message.getHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      5,\n      f\n    );\n  }\n  f = message.getScriptConfigIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool ours = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getOurs = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setOurs = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n/**\n * optional BTCOutputType type = 2;\n * @return {!proto.shiftcrypto.bitbox02.BTCOutputType}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCOutputType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCOutputType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional uint64 value = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes hash = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes hash = 4;\n * This is a type-conversion wrapper around `getHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getHash()));\n};\n\n\n/**\n * optional bytes hash = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * repeated uint32 keypath = 5;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 5, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint32 script_config_index = 6;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.getScriptConfigIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignOutputRequest.prototype.setScriptConfigIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.repeatedFields_ = [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfig.toObject(includeInstance, f),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n  return proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfig.serializeBinaryToWriter\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional BTCScriptConfig script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfig}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfig, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * repeated uint32 keypath = 3;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} returns this\n */\nproto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSuccess.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSuccess;\n  return proto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSuccess} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    registration: (f = msg.getRegistration()) && proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest;\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader);\n      msg.setRegistration(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCScriptConfigRegistration registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.getRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.setRegistration = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.clearRegistration = function() {\n  return this.setRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.prototype.hasRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    isRegistered: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse;\n  return proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsRegistered(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getIsRegistered();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool is_registered = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.getIsRegistered = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.prototype.setIsRegistered = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    registration: (f = msg.getRegistration()) && proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.toObject(includeInstance, f),\n    name: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    xpubType: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest;\n  return proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.deserializeBinaryFromReader);\n      msg.setRegistration(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} */ (reader.readEnum());\n      msg.setXpubType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration.serializeBinaryToWriter\n    );\n  }\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getXpubType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType = {\n  AUTO_ELECTRUM: 0,\n  AUTO_XPUB_TPUB: 1\n};\n\n/**\n * optional BTCScriptConfigRegistration registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigRegistration|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setRegistration = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.clearRegistration = function() {\n  return this.setRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.hasRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional string name = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setName = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional XPubType xpub_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType}\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.getXpubType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.prototype.setXpubType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    version: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    numInputs: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    numOutputs: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    locktime: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setVersion(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumInputs(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setNumOutputs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setLocktime(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getVersion();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getNumInputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getNumOutputs();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getLocktime();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 version = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getVersion = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setVersion = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 num_inputs = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getNumInputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setNumInputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 num_outputs = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getNumOutputs = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setNumOutputs = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 locktime = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.getLocktime = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.prototype.setLocktime = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    prevOutHash: msg.getPrevOutHash_asB64(),\n    prevOutIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    signatureScript: msg.getSignatureScript_asB64(),\n    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevOutHash(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevOutIndex(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignatureScript(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setSequence(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPrevOutHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getPrevOutIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getSignatureScript_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getSequence();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * optional bytes prev_out_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setPrevOutHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional uint32 prev_out_index = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getPrevOutIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setPrevOutIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * This is a type-conversion wrapper around `getSignatureScript()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignatureScript()));\n};\n\n\n/**\n * optional bytes signature_script = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignatureScript()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSignatureScript_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignatureScript()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setSignatureScript = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional uint32 sequence = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.getSequence = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.prototype.setSequence = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    value: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    pubkeyScript: msg.getPubkeyScript_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest;\n  return proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPubkeyScript(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f = message.getPubkeyScript_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 value = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * This is a type-conversion wrapper around `getPubkeyScript()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPubkeyScript()));\n};\n\n\n/**\n * optional bytes pubkey_script = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPubkeyScript()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.getPubkeyScript_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPubkeyScript()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.prototype.setPubkeyScript = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.toObject(includeInstance, f),\n    msg: msg.getMsg_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignMessageRequest;\n  return proto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getMsg_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.BTCCoin}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.BTCCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.BTCCoin} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional BTCScriptConfigWithKeypath script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCScriptConfigWithKeypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional bytes msg = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes msg = 3;\n * This is a type-conversion wrapper around `getMsg()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getMsg()));\n};\n\n\n/**\n * optional bytes msg = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getMsg()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getMsg_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getMsg()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setMsg = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 4, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCSignMessageResponse;\n  return proto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.BTCSignMessageResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCSignMessageResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_ = [[1,2,3,4,5,6,7]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  IS_SCRIPT_CONFIG_REGISTERED: 1,\n  REGISTER_SCRIPT_CONFIG: 2,\n  PREVTX_INIT: 3,\n  PREVTX_INPUT: 4,\n  PREVTX_OUTPUT: 5,\n  SIGN_MESSAGE: 6,\n  ANTIKLEPTO_SIGNATURE: 7\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    isScriptConfigRegistered: (f = msg.getIsScriptConfigRegistered()) && proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.toObject(includeInstance, f),\n    registerScriptConfig: (f = msg.getRegisterScriptConfig()) && proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.toObject(includeInstance, f),\n    prevtxInit: (f = msg.getPrevtxInit()) && proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.toObject(includeInstance, f),\n    prevtxInput: (f = msg.getPrevtxInput()) && proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.toObject(includeInstance, f),\n    prevtxOutput: (f = msg.getPrevtxOutput()) && proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.toObject(includeInstance, f),\n    signMessage: (f = msg.getSignMessage()) && proto.shiftcrypto.bitbox02.BTCSignMessageRequest.toObject(includeInstance, f),\n    antikleptoSignature: (f = msg.getAntikleptoSignature()) && antiklepto_pb.AntiKleptoSignatureRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCRequest;\n  return proto.shiftcrypto.bitbox02.BTCRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.deserializeBinaryFromReader);\n      msg.setIsScriptConfigRegistered(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.deserializeBinaryFromReader);\n      msg.setRegisterScriptConfig(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.deserializeBinaryFromReader);\n      msg.setPrevtxInit(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.deserializeBinaryFromReader);\n      msg.setPrevtxInput(value);\n      break;\n    case 5:\n      var value = new proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.deserializeBinaryFromReader);\n      msg.setPrevtxOutput(value);\n      break;\n    case 6:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignMessageRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignMessageRequest.deserializeBinaryFromReader);\n      msg.setSignMessage(value);\n      break;\n    case 7:\n      var value = new antiklepto_pb.AntiKleptoSignatureRequest;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignatureRequest.deserializeBinaryFromReader);\n      msg.setAntikleptoSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getIsScriptConfigRegistered();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRegisterScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxInit();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxInput();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPrevtxOutput();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMessage();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignMessageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignature();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      antiklepto_pb.AntiKleptoSignatureRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getIsScriptConfigRegistered = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setIsScriptConfigRegistered = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearIsScriptConfigRegistered = function() {\n  return this.setIsScriptConfigRegistered(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasIsScriptConfigRegistered = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional BTCRegisterScriptConfigRequest register_script_config = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getRegisterScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setRegisterScriptConfig = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearRegisterScriptConfig = function() {\n  return this.setRegisterScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasRegisterScriptConfig = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional BTCPrevTxInitRequest prevtx_init = 3;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxInit = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxInitRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxInit = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxInit = function() {\n  return this.setPrevtxInit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxInit = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCPrevTxInputRequest prevtx_input = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxInput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxInputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxInput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxInput = function() {\n  return this.setPrevtxInput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxInput = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional BTCPrevTxOutputRequest prevtx_output = 5;\n * @return {?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getPrevtxOutput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPrevTxOutputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setPrevtxOutput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearPrevtxOutput = function() {\n  return this.setPrevtxOutput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasPrevtxOutput = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional BTCSignMessageRequest sign_message = 6;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getSignMessage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignMessageRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignMessageRequest, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignMessageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setSignMessage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearSignMessage = function() {\n  return this.setSignMessage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasSignMessage = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional AntiKleptoSignatureRequest antiklepto_signature = 7;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.getAntikleptoSignature = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignatureRequest, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.setAntikleptoSignature = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.BTCRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCRequest} returns this\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.clearAntikleptoSignature = function() {\n  return this.setAntikleptoSignature(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCRequest.prototype.hasAntikleptoSignature = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_ = [[1,2,3,4,5]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  SUCCESS: 1,\n  IS_SCRIPT_CONFIG_REGISTERED: 2,\n  SIGN_NEXT: 3,\n  SIGN_MESSAGE: 4,\n  ANTIKLEPTO_SIGNER_COMMITMENT: 5\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.BTCResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.BTCResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    success: (f = msg.getSuccess()) && proto.shiftcrypto.bitbox02.BTCSuccess.toObject(includeInstance, f),\n    isScriptConfigRegistered: (f = msg.getIsScriptConfigRegistered()) && proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.toObject(includeInstance, f),\n    signNext: (f = msg.getSignNext()) && proto.shiftcrypto.bitbox02.BTCSignNextResponse.toObject(includeInstance, f),\n    signMessage: (f = msg.getSignMessage()) && proto.shiftcrypto.bitbox02.BTCSignMessageResponse.toObject(includeInstance, f),\n    antikleptoSignerCommitment: (f = msg.getAntikleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.BTCResponse;\n  return proto.shiftcrypto.bitbox02.BTCResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.BTCSuccess;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSuccess.deserializeBinaryFromReader);\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.deserializeBinaryFromReader);\n      msg.setIsScriptConfigRegistered(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignNextResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignNextResponse.deserializeBinaryFromReader);\n      msg.setSignNext(value);\n      break;\n    case 4:\n      var value = new proto.shiftcrypto.bitbox02.BTCSignMessageResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.BTCSignMessageResponse.deserializeBinaryFromReader);\n      msg.setSignMessage(value);\n      break;\n    case 5:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntikleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.BTCResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.BTCResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.BTCResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSuccess();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSuccess.serializeBinaryToWriter\n    );\n  }\n  f = message.getIsScriptConfigRegistered();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignNext();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignNextResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMessage();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.shiftcrypto.bitbox02.BTCSignMessageResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional BTCSuccess success = 1;\n * @return {?proto.shiftcrypto.bitbox02.BTCSuccess}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSuccess = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSuccess} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSuccess, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSuccess|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSuccess = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSuccess = function() {\n  return this.setSuccess(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSuccess = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;\n * @return {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getIsScriptConfigRegistered = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setIsScriptConfigRegistered = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearIsScriptConfigRegistered = function() {\n  return this.setIsScriptConfigRegistered(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasIsScriptConfigRegistered = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional BTCSignNextResponse sign_next = 3;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSignNext = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignNextResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignNextResponse, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignNextResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSignNext = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSignNext = function() {\n  return this.setSignNext(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSignNext = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional BTCSignMessageResponse sign_message = 4;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignMessageResponse}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getSignMessage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignMessageResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.BTCSignMessageResponse, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignMessageResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setSignMessage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearSignMessage = function() {\n  return this.setSignMessage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasSignMessage = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment antiklepto_signer_commitment = 5;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.getAntikleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.setAntikleptoSignerCommitment = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.BTCResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.BTCResponse} returns this\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.clearAntikleptoSignerCommitment = function() {\n  return this.setAntikleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.BTCResponse.prototype.hasAntikleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCCoin = {\n  BTC: 0,\n  TBTC: 1,\n  LTC: 2,\n  TLTC: 3\n};\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.BTCOutputType = {\n  UNKNOWN: 0,\n  P2PKH: 1,\n  P2SH: 2,\n  P2WPKH: 3,\n  P2WSH: 4\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: cardano.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoAddressRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoNetwork', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.CardanoXpubsResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoXpubsResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoXpubsResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.displayName = 'proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoAddressRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoAddressRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoAddressRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.displayName = 'proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoRequest.displayName = 'proto.shiftcrypto.bitbox02.CardanoRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.CardanoResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.CardanoResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.CardanoResponse.displayName = 'proto.shiftcrypto.bitbox02.CardanoResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathsList: jspb.Message.toObjectList(msg.getKeypathsList(),\n    common_pb.Keypath.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;\n  return proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.addKeypaths(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated Keypath keypaths = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.Keypath>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.getKeypathsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.Keypath>} */ (\n    jspb.Message.getRepeatedWrapperField(this, common_pb.Keypath, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.Keypath>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.setKeypathsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.Keypath=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.addKeypaths = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.Keypath, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsRequest.prototype.clearKeypathsList = function() {\n  return this.setKeypathsList([]);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubsList: msg.getXpubsList_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;\n  return proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addXpubs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubsList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * @return {!Array<string>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * This is a type-conversion wrapper around `getXpubsList()`\n * @return {!Array<string>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getXpubsList()));\n};\n\n\n/**\n * repeated bytes xpubs = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getXpubsList()`\n * @return {!Array<!Uint8Array>}\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.getXpubsList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getXpubsList()));\n};\n\n\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.setXpubsList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.addXpubs = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoXpubsResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoXpubsResponse.prototype.clearXpubsList = function() {\n  return this.setXpubsList([]);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_ = [[1]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase = {\n  CONFIG_NOT_SET: 0,\n  PKH_SKH: 1\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getConfigCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoScriptConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pkhSkh: (f = msg.getPkhSkh()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader);\n      msg.setPkhSkh(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPkhSkh();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.repeatedFields_ = [1,2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathPaymentList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    keypathStakeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh;\n  return proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypathPayment(values[i]);\n      }\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypathStake(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathPaymentList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathStakeList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath_payment = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathPaymentList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathPaymentList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathPayment = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathPaymentList = function() {\n  return this.setKeypathPaymentList([]);\n};\n\n\n/**\n * repeated uint32 keypath_stake = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.getKeypathStakeList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.setKeypathStakeList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.addKeypathStake = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh.prototype.clearKeypathStakeList = function() {\n  return this.setKeypathStakeList([]);\n};\n\n\n/**\n * optional PkhSkh pkh_skh = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.getPkhSkh = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.setPkhSkh = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoScriptConfig.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoScriptConfig} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.clearPkhSkh = function() {\n  return this.setPkhSkh(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoScriptConfig.prototype.hasPkhSkh = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    network: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;\n  return proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());\n      msg.setNetwork(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getNetwork();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoNetwork network = 1;\n * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getNetwork = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setNetwork = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional bool display = 2;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n/**\n * optional CardanoScriptConfig script_config = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoAddressRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoAddressRequest.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.repeatedFields_ = [2,3,6,7];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    network: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    inputsList: jspb.Message.toObjectList(msg.getInputsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject, includeInstance),\n    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject, includeInstance),\n    fee: jspb.Message.getFieldWithDefault(msg, 4, 0),\n    ttl: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    certificatesList: jspb.Message.toObjectList(msg.getCertificatesList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject, includeInstance),\n    withdrawalsList: jspb.Message.toObjectList(msg.getWithdrawalsList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject, includeInstance),\n    validityIntervalStart: jspb.Message.getFieldWithDefault(msg, 8, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (reader.readEnum());\n      msg.setNetwork(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader);\n      msg.addInputs(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader);\n      msg.addOutputs(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setFee(value);\n      break;\n    case 5:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setTtl(value);\n      break;\n    case 6:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader);\n      msg.addCertificates(value);\n      break;\n    case 7:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader);\n      msg.addWithdrawals(value);\n      break;\n    case 8:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValidityIntervalStart(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getNetwork();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getInputsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter\n    );\n  }\n  f = message.getOutputsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter\n    );\n  }\n  f = message.getFee();\n  if (f !== 0) {\n    writer.writeUint64(\n      4,\n      f\n    );\n  }\n  f = message.getTtl();\n  if (f !== 0) {\n    writer.writeUint64(\n      5,\n      f\n    );\n  }\n  f = message.getCertificatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      6,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter\n    );\n  }\n  f = message.getWithdrawalsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      7,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter\n    );\n  }\n  f = message.getValidityIntervalStart();\n  if (f !== 0) {\n    writer.writeUint64(\n      8,\n      f\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    prevOutHash: msg.getPrevOutHash_asB64(),\n    prevOutIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPrevOutHash(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setPrevOutIndex(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getPrevOutHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getPrevOutIndex();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * optional bytes prev_out_hash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPrevOutHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPrevOutHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional uint32 prev_out_index = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.getPrevOutIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input.prototype.setPrevOutIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    encodedAddress: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    value: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    scriptConfig: (f = msg.getScriptConfig()) && proto.shiftcrypto.bitbox02.CardanoScriptConfig.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setEncodedAddress(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoScriptConfig;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoScriptConfig.deserializeBinaryFromReader);\n      msg.setScriptConfig(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEncodedAddress();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n  f = message.getScriptConfig();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoScriptConfig.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string encoded_address = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getEncodedAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setEncodedAddress = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional uint64 value = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional CardanoScriptConfig script_config = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoScriptConfig}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.getScriptConfig = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoScriptConfig} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoScriptConfig, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoScriptConfig|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.setScriptConfig = function(value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.clearScriptConfig = function() {\n  return this.setScriptConfig(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.prototype.hasScriptConfig = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase = {\n  CERT_NOT_SET: 0,\n  STAKE_REGISTRATION: 1,\n  STAKE_DEREGISTRATION: 2,\n  STAKE_DELEGATION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getCertCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.CertCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    stakeRegistration: (f = msg.getStakeRegistration()) && common_pb.Keypath.toObject(includeInstance, f),\n    stakeDeregistration: (f = msg.getStakeDeregistration()) && common_pb.Keypath.toObject(includeInstance, f),\n    stakeDelegation: (f = msg.getStakeDelegation()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.setStakeRegistration(value);\n      break;\n    case 2:\n      var value = new common_pb.Keypath;\n      reader.readMessage(value,common_pb.Keypath.deserializeBinaryFromReader);\n      msg.setStakeDeregistration(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader);\n      msg.setStakeDelegation(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getStakeRegistration();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getStakeDeregistration();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      common_pb.Keypath.serializeBinaryToWriter\n    );\n  }\n  f = message.getStakeDelegation();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    poolKeyhash: msg.getPoolKeyhash_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPoolKeyhash(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getPoolKeyhash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * This is a type-conversion wrapper around `getPoolKeyhash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPoolKeyhash()));\n};\n\n\n/**\n * optional bytes pool_keyhash = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPoolKeyhash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.getPoolKeyhash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPoolKeyhash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation.prototype.setPoolKeyhash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional Keypath stake_registration = 1;\n * @return {?proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeRegistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (\n    jspb.Message.getWrapperField(this, common_pb.Keypath, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeRegistration = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeRegistration = function() {\n  return this.setStakeRegistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeRegistration = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Keypath stake_deregistration = 2;\n * @return {?proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDeregistration = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Keypath} */ (\n    jspb.Message.getWrapperField(this, common_pb.Keypath, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Keypath|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDeregistration = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDeregistration = function() {\n  return this.setStakeDeregistration(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDeregistration = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional StakeDelegation stake_delegation = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.getStakeDelegation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.setStakeDelegation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.clearStakeDelegation = function() {\n  return this.setStakeDelegation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.prototype.hasStakeDelegation = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    value: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint64());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f !== 0) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional uint64 value = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.getValue = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal.prototype.setValue = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional CardanoNetwork network = 1;\n * @return {!proto.shiftcrypto.bitbox02.CardanoNetwork}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getNetwork = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.CardanoNetwork} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoNetwork} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setNetwork = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated Input inputs = 2;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getInputsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, 2));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setInputsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addInputs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearInputsList = function() {\n  return this.setInputsList([]);\n};\n\n\n/**\n * repeated Output outputs = 3;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getOutputsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, 3));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setOutputsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addOutputs = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearOutputsList = function() {\n  return this.setOutputsList([]);\n};\n\n\n/**\n * optional uint64 fee = 4;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getFee = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setFee = function(value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\n/**\n * optional uint64 ttl = 5;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getTtl = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setTtl = function(value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n\n\n/**\n * repeated Certificate certificates = 6;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getCertificatesList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, 6));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setCertificatesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addCertificates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearCertificatesList = function() {\n  return this.setCertificatesList([]);\n};\n\n\n/**\n * repeated Withdrawal withdrawals = 7;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getWithdrawalsList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, 7));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setWithdrawalsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 7, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.addWithdrawals = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.clearWithdrawalsList = function() {\n  return this.setWithdrawalsList([]);\n};\n\n\n/**\n * optional uint64 validity_interval_start = 8;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.getValidityIntervalStart = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.prototype.setValidityIntervalStart = function(value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    shelleyWitnessesList: jspb.Message.toObjectList(msg.getShelleyWitnessesList(),\n    proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader);\n      msg.addShelleyWitnesses(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getShelleyWitnessesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    publicKey: msg.getPublicKey_asB64(),\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness;\n  return proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPublicKey(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPublicKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes public_key = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes public_key = 1;\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPublicKey()));\n};\n\n\n/**\n * optional bytes public_key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getPublicKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPublicKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setPublicKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes signature = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes signature = 2;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * repeated ShelleyWitness shelley_witnesses = 1;\n * @return {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.getShelleyWitnessesList = function() {\n  return /** @type{!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, 1));\n};\n\n\n/**\n * @param {!Array<!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness>} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.setShelleyWitnessesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness=} opt_value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness}\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.addShelleyWitnesses = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.prototype.clearShelleyWitnessesList = function() {\n  return this.setShelleyWitnessesList([]);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  XPUBS: 1,\n  ADDRESS: 2,\n  SIGN_TRANSACTION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsRequest.toObject(includeInstance, f),\n    address: (f = msg.getAddress()) && proto.shiftcrypto.bitbox02.CardanoAddressRequest.toObject(includeInstance, f),\n    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoRequest;\n  return proto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsRequest.deserializeBinaryFromReader);\n      msg.setXpubs(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.CardanoAddressRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoAddressRequest.deserializeBinaryFromReader);\n      msg.setAddress(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.deserializeBinaryFromReader);\n      msg.setSignTransaction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubs();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoXpubsRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAddress();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoAddressRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignTransaction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoXpubsRequest xpubs = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getXpubs = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setXpubs = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearXpubs = function() {\n  return this.setXpubs(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasXpubs = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional CardanoAddressRequest address = 2;\n * @return {?proto.shiftcrypto.bitbox02.CardanoAddressRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getAddress = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoAddressRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoAddressRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoAddressRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setAddress = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearAddress = function() {\n  return this.setAddress(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasAddress = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional CardanoSignTransactionRequest sign_transaction = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.getSignTransaction = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.setSignTransaction = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoRequest} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.clearSignTransaction = function() {\n  return this.setSignTransaction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoRequest.prototype.hasSignTransaction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  XPUBS: 1,\n  PUB: 2,\n  SIGN_TRANSACTION: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.CardanoResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.CardanoResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    xpubs: (f = msg.getXpubs()) && proto.shiftcrypto.bitbox02.CardanoXpubsResponse.toObject(includeInstance, f),\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    signTransaction: (f = msg.getSignTransaction()) && proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.CardanoResponse;\n  return proto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.CardanoXpubsResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoXpubsResponse.deserializeBinaryFromReader);\n      msg.setXpubs(value);\n      break;\n    case 2:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.deserializeBinaryFromReader);\n      msg.setSignTransaction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.CardanoResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getXpubs();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoXpubsResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignTransaction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional CardanoXpubsResponse xpubs = 1;\n * @return {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getXpubs = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoXpubsResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoXpubsResponse, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoXpubsResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setXpubs = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearXpubs = function() {\n  return this.setXpubs(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasXpubs = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional PubResponse pub = 2;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional CardanoSignTransactionResponse sign_transaction = 3;\n * @return {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.getSignTransaction = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoSignTransactionResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.setSignTransaction = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.CardanoResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.CardanoResponse} returns this\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.clearSignTransaction = function() {\n  return this.setSignTransaction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.CardanoResponse.prototype.hasSignTransaction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.CardanoNetwork = {\n  CARDANOMAINNET: 0,\n  CARDANOTESTNET: 1\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: keystore.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.displayName = 'proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.displayName = 'proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest;\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    key: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse;\n  return proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKey();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string key = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.getKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse.prototype.setKey = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: mnemonic.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ShowMnemonicRequest', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ShowMnemonicRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ShowMnemonicRequest.displayName = 'proto.shiftcrypto.bitbox02.ShowMnemonicRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.displayName = 'proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.displayName = 'proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ShowMnemonicRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ShowMnemonicRequest;\n  return proto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ShowMnemonicRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ShowMnemonicRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ShowMnemonicRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    timezoneOffset: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest;\n  return proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setTimestamp(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setTimezoneOffset(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTimestamp();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getTimezoneOffset();\n  if (f !== 0) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 timestamp = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.getTimestamp = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int32 timezone_offset = 2;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.getTimezoneOffset = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest.prototype.setTimezoneOffset = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest;\n  return proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setEnabled(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEnabled();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool enabled = 1;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.getEnabled = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} returns this\n */\nproto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest.prototype.setEnabled = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: system.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RebootRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RebootRequest.Purpose', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RebootRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RebootRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RebootRequest.displayName = 'proto.shiftcrypto.bitbox02.RebootRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RebootRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RebootRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    purpose: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RebootRequest;\n  return proto.shiftcrypto.bitbox02.RebootRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} */ (reader.readEnum());\n      msg.setPurpose(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RebootRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RebootRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPurpose();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.Purpose = {\n  UPGRADE: 0,\n  SETTINGS: 1\n};\n\n/**\n * optional Purpose purpose = 1;\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose}\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.getPurpose = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.RebootRequest.Purpose} value\n * @return {!proto.shiftcrypto.bitbox02.RebootRequest} returns this\n */\nproto.shiftcrypto.bitbox02.RebootRequest.prototype.setPurpose = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: perform_attestation.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PerformAttestationRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PerformAttestationResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PerformAttestationRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PerformAttestationRequest.displayName = 'proto.shiftcrypto.bitbox02.PerformAttestationRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PerformAttestationResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PerformAttestationResponse.displayName = 'proto.shiftcrypto.bitbox02.PerformAttestationResponse';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PerformAttestationRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    challenge: msg.getChallenge_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PerformAttestationRequest;\n  return proto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChallenge(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PerformAttestationRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getChallenge_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes challenge = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes challenge = 1;\n * This is a type-conversion wrapper around `getChallenge()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChallenge()));\n};\n\n\n/**\n * optional bytes challenge = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChallenge()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.getChallenge_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChallenge()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationRequest} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationRequest.prototype.setChallenge = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PerformAttestationResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    bootloaderHash: msg.getBootloaderHash_asB64(),\n    devicePubkey: msg.getDevicePubkey_asB64(),\n    certificate: msg.getCertificate_asB64(),\n    rootPubkeyIdentifier: msg.getRootPubkeyIdentifier_asB64(),\n    challengeSignature: msg.getChallengeSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PerformAttestationResponse;\n  return proto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBootloaderHash(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDevicePubkey(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCertificate(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRootPubkeyIdentifier(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChallengeSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PerformAttestationResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getBootloaderHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getDevicePubkey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getCertificate_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getRootPubkeyIdentifier_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getChallengeSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * This is a type-conversion wrapper around `getBootloaderHash()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBootloaderHash()));\n};\n\n\n/**\n * optional bytes bootloader_hash = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBootloaderHash()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getBootloaderHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBootloaderHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setBootloaderHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * This is a type-conversion wrapper around `getDevicePubkey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDevicePubkey()));\n};\n\n\n/**\n * optional bytes device_pubkey = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDevicePubkey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getDevicePubkey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDevicePubkey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setDevicePubkey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes certificate = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes certificate = 3;\n * This is a type-conversion wrapper around `getCertificate()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCertificate()));\n};\n\n\n/**\n * optional bytes certificate = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCertificate()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getCertificate_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCertificate()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setCertificate = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * This is a type-conversion wrapper around `getRootPubkeyIdentifier()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRootPubkeyIdentifier()));\n};\n\n\n/**\n * optional bytes root_pubkey_identifier = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRootPubkeyIdentifier()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getRootPubkeyIdentifier_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRootPubkeyIdentifier()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setRootPubkeyIdentifier = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * This is a type-conversion wrapper around `getChallengeSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChallengeSignature()));\n};\n\n\n/**\n * optional bytes challenge_signature = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChallengeSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.getChallengeSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChallengeSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.PerformAttestationResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PerformAttestationResponse.prototype.setChallengeSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","function add(accumulator: number, a: number) {\n  return accumulator + a;\n}\n\nexport const u8join = (...params: Uint8Array[]): Uint8Array => { \n  let size = params.map(e => e.length).reduce(add, 0);\n  const uint8 = new Uint8Array(size); \n  let pos = 0;\n  for(let arr of params){\n    uint8.set(arr, pos);\n    pos += arr.length;\n  }\n  return uint8;\n}\n\n\nconst HARDENED = 0x80000000;\n\n\n/**\n * @param keypathString keypath in string format e.g. m/44'/1'/0'/0\n * @returns keypath as array e.g. [2147483692, 2147483649, 2147483648, 0]\n */\n export const getKeypathFromString = (keypathString: string) => {\n  let levels = keypathString.toLowerCase().split('/');\n  if (levels[0] !== 'm') throw new Error('Invalid keypath');\n  levels = levels.slice(1);\n\n  return levels.map(level => {\n      let hardened = false;\n      if (level.substring(level.length - 1) === \"'\") {\n          hardened = true\n      }\n      let x = parseInt(level, 10);\n      if (isNaN(x) || x < 0 || x >= HARDENED) {\n          throw new Error('Invalid keypath');\n      }\n      if (hardened) x += HARDENED;\n      return x;\n  })\n}\n\nexport const withOp = (data: Uint8Array) => u8join(Uint8Array.from([0, 110]), data) \nexport const withoutOp = (data: Uint8Array) => data.slice(2) \n","import { Device, Encryption } from './device'\nimport { u8join } from './utils';\n\nconst Rust = import('noise-wasm');\n\nconst fakeAttestation = Uint8Array.from([0, 97, 39, 192, 192, 192, 72, 254, 120, 86, 137, 4, 226, 24, 107, 229, 59, 102, 237, 166, 155, 79, 42, 155, 132, 103, 119, 237, 246, 254, 75, 172, 108, 74])\nconst unlock = Uint8Array.from([0, 117]);\nconst cleanYourHandsBeforeHandshake = Uint8Array.from([0, 104]);\nconst inHandshake = Uint8Array.from([0, 72]);\n\nexport const initialize = async (device: Pick<Device, \"send\" | \"info\">) => {\n  const { send } = device;\n  await send(fakeAttestation);\n\n  device.info = {...device.info, attestation: true}\n\n  if (!device.info.unlocked){\n    await send(unlock);\n    device.info = {...device.info, unlocked: true}\n  }\n}\n\nexport const handshake = async (device: Pick<Device, \"send\" | \"info\">) => {\n  await device.send(cleanYourHandsBeforeHandshake);\n\n  let r = (await Rust).Noise.new()\n  // send initial 32 bytes handshake\n  let init = new Uint8Array(32);\n  r.write(new Uint8Array(), init);\n  let response = await device.send(u8join(inHandshake, init));\n\n  //digest info\n  r.read(response.slice(2,98), new Uint8Array(0));\n\n  // send final ack\n  let share = new Uint8Array(64)\n  r.write(new Uint8Array(), share);\n\n  let deviceStatus = (await device.send(u8join(inHandshake, share)))[2];\n\n  device.info = { ...device.info, encrypted: true, deviceAcceptedPairing: deviceStatus === 0 ? true : null }\n\n  const crypto: Encryption = {\n    encrypt: (data) => {\n      let out = new Uint8Array(data.length + 16);\n      r.encrypt(data, out);\n      return out\n    },\n    decrypt: (data) => {\n      let out = new Uint8Array(data.length - 16);\n      r.decrypt(data, out);\n      return out\n    }\n  }\n\n  return crypto;\n}\n","import { Device } from \"./device\";\n\nexport const infoRequest = Uint8Array.from([105]);\n\nconst textDecoder = new TextDecoder();\n\nexport interface Info {\n  version?: {\n    major: number\n    minor: number\n    patch: number\n  }\n  platformId?: number\n  editionId?: number\n  unlocked?: boolean\n  attestation?: boolean\n  encrypted?: boolean \n  deviceAcceptedPairing?: null | boolean // undefined: unknown, null: checking, false: rejected, true: accepted \n}\n\nexport const infoDigest = (data: Uint8Array): Info => {\n  const vLength = data[0];\n  const vString = textDecoder.decode(data.slice(1, 1 + vLength));\n  const info = data.slice(1 + vLength);\n  const versions = vString.match(/[0-9]+/g)!.map(parseFloat);\n  return {\n    version: {\n      major: versions[0],\n      minor: versions[1],\n      patch: versions[2]\n    },\n    platformId: info[0],\n    editionId: info[1],\n    unlocked: !!info[2]\n  }\n}\n\nexport const infoQuery = async (device: Pick<Device, \"send\" | \"info\">) => {\n  device.info = { \n    ...device.info, \n    ...infoDigest(await device.send(infoRequest))\n  };\n}\n","const channel = Uint8Array.from([255, 0, 0, 0]);\nconst command = 193\n\nconst sizeToPackets = (size: number) => Math.ceil((size-57) / 59) + 1\n\nexport const headerInfo = (bytes: Uint8Array) => {\n  const size = bytes[5] * 256 + bytes[6] \n  return {\n    size,\n    packets: sizeToPackets(size)\n  }\n} \n\nexport const bytesToPackages = (bytes: Uint8Array): Uint8Array[] => {\n  const packets = Array.from(Array(sizeToPackets(bytes.length)).keys(), () => new Uint8Array(64));\n\n  const totalToWrite = bytes.length;\n  let offset = 0;\n\n  for(let i = 0; i < packets.length; i++){\n    const packet = packets[i];\n    packet.fill(238);\n    packet.set(channel);\n    packet.set([i === 0 ? command : (i-i)], 4);\n\n    const maxLengthToWrite = 64 - ( i===0 ? 7 : 5 );\n    const writeOf = Math.min(totalToWrite - offset, maxLengthToWrite);\n    \n    packet.set(bytes.subarray(offset, offset + writeOf), i===0 ? 7 : 5) \n\n    offset += writeOf;\n  }\n  let length = new DataView(Uint16Array.from([bytes.length]).buffer)\n  packets[0].set([length.getUint8(1), length.getUint8(0)], 5);\n  return packets;\n}\n\nexport const packagesToBytes = (packets: Uint8Array[]): Uint8Array => {\n  const { size } = headerInfo(packets[0]); \n  let frame = new Uint8Array(size);\n  let pos = 0;\n  for(let i = 0; i < packets.length; i++){\n    let read = Math.min(size-pos, i===0 ? 57 : 59)\n    let start = i===0 ? 7 : 5\n    frame.set(\n      packets[i].slice(start, start + read),\n      pos\n    )\n    pos += read;\n  }\n  return frame;\n}\n","export class BitBoxError extends Error {\n  public id: number;\n  constructor(message: string, id: number){\n    super(message);\n    this.id = id;\n  }\n}\n\nexport const NotCompatibleBrowser = new BitBoxError(\"Not compatible browser\", 0);\n\nexport const DeviceVersionMismatch = new BitBoxError(\"Device version must be greater than 7.0.0\", 1);\n\nexport const UserDisconnectedDevice = new BitBoxError(\"User disconnected the BitBox device\", 2);\n\nexport const DevicePairingRejected = new BitBoxError(\"Device rejected pairing code\", 3);\n\nexport const DeviceExternallyClosed = new BitBoxError(\"Device Disconnected or Owned by another Application\", 4);\n\nexport const NoDeviceSelected = new BitBoxError(\"No device has been selected on the Browser\", 5);\n\nexport const DeviceClosedByApp = new BitBoxError(\"Device Closed imperatively by App\", 6);\n","import { ETHPubRequest, ETHCoin, ETHRequest } from \"../proto/eth_pb\"\nimport { Request, Response } from '../proto/hww_pb'\n\nimport { SendHID, Encryption } from \"./device\"\nimport { withOp, withoutOp } from \"./utils\"\n\nexport interface ethPublicArgs {\n  coin: ETHCoin\n  keypathList: number []\n  display: boolean\n  outputType: ETHPubRequest.OutputType\n  contractAddress: Uint8Array\n}\n\nexport const ethPublic = (send: SendHID, {encrypt, decrypt}: Encryption ) => async (input: ethPublicArgs): Promise<string> => {\n  // @ts-ignore\n  let req = new ETHPubRequest([input.keypathList, input.coin, input.outputType, input.display, input.contractAddress])\n  let wr = new ETHRequest();\n  wr.setPub(req);\n  let wr2 = new Request();\n  wr2.setEth(wr);\n  let data = wr2.serializeBinary();\n  let resp = decrypt(withoutOp(await send(withOp(encrypt(data)))));\n  return Response.deserializeBinary(resp).toObject().eth!.pub!.pub;\n}\n","import { handshake, initialize } from \"./handshake\"\nimport { Info, infoQuery } from \"./messages\"\nimport { packagesToBytes, bytesToPackages, headerInfo } from \"./uh2Frame\"\nimport { DeviceExternallyClosed, DevicePairingRejected, NoDeviceSelected, NotCompatibleBrowser, BitBoxError, DeviceClosedByApp } from \"./errors\";\nimport { ethPublic, ethPublicArgs } from \"./eth_messages\";\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst retryPacket = bytesToPackages(Uint8Array.from([1]))[0];\n\nconst showCode = Uint8Array.from([0, 118]);\n\nexport type SendHID = (data: Uint8Array) => Promise<Uint8Array>\n\nexport interface Encryption {\n  encrypt: (data: Uint8Array) => Uint8Array\n  decrypt: (data: Uint8Array) => Uint8Array\n}\nexport interface Device {\n  send: SendHID\n  info: Info\n  close: () => void\n  ethPublic: (data: ethPublicArgs) => Promise<string>\n}\ninterface connectOptions {\n  onInfo?: (info: Info) => any;\n  onClose?: (error: BitBoxError) => any;\n}\n\nexport const connect = async ({ onInfo, onClose }: connectOptions = {}): Promise<Device> => {\n  if(!window.navigator.hid) throw NotCompatibleBrowser;\n  const HIDs = await window.navigator.hid.requestDevice({ filters: [{ vendorId: 0x03eb }] })\n  if(HIDs.length === 0){\n    throw NoDeviceSelected;\n  }\n  const HID = HIDs[0]\n\n  if(!HID.opened) {\n    await HID.open()\n  }\n\n  let listenDisconnects = (event: HIDConnectionEvent) => {\n    if(Object.is(event.device, HID)){\n      window.navigator.hid.removeEventListener(\"disconnect\", listenDisconnects);\n      onClose?.(DeviceExternallyClosed);\n    }\n  }\n\n  window.navigator.hid.addEventListener(\"disconnect\", listenDisconnects)\n\n  const send = async (data: Uint8Array): Promise<Uint8Array> => {\n    const start = performance.now();\n    let info: any = {\n      sent: {\n        data,\n        opCode: data[0],\n        query: data[0] === 0 ? data[1] : undefined,\n      },\n      waitFrames: 0\n    }\n    console.log(info);\n    bytesToPackages(data).forEach((packet) => HID.sendReport(0, packet));\n    let prom = new Promise<Uint8Array>((resolver, rejected) => {\n      const allPackets: Uint8Array[] = [];\n      HID.oninputreport = ({ data }) => {\n        try {\n          const packet = new Uint8Array(data.buffer)\n          if(allPackets.length === 0 && packet[7] === 1) { //waiting for input\n            sleep(200).then(() => HID.sendReport(0, retryPacket)).catch(() => rejected(DeviceExternallyClosed));\n            info.waitFrames++;\n            return;\n          }\n          allPackets.push(packet)\n          const { packets } = headerInfo(allPackets[0]);\n          if(allPackets.length === packets){\n            const receivedData = packagesToBytes(allPackets);\n            info.time = (performance.now() - start).toFixed(6);\n            info.received = {\n              data: receivedData,\n              opCode: receivedData[0],\n              query: receivedData[0] === 0 ? receivedData[1] : undefined\n            }\n            resolver(receivedData);\n          }\n        } catch (e) {\n          if (e instanceof DOMException) {\n            rejected(DeviceExternallyClosed);\n          } else {\n            rejected(e);\n          }\n        }\n      }\n    })\n    return prom;\n  }\n\n  let device: Pick<Device, \"send\" | \"info\"> = {\n    send,\n    info: {}\n  }; \n\n  let info = {};\n  Object.defineProperty(device, 'info', {\n    get: function() { return info; },\n    set: function(newValue) { info = newValue; onInfo?.(newValue) },\n    enumerable: true,\n    configurable: true\n  });\n\n  await infoQuery(device);\n\n  await initialize(device);\n\n  let enc = await handshake(device);\n\n  if(!device.info.deviceAcceptedPairing) {\n    let status = await(device.send(showCode));\n    if(status[1] === 1){\n      device.info = {...device.info, deviceAcceptedPairing: false}\n      throw DevicePairingRejected\n    }\n    device.info = {...device.info, deviceAcceptedPairing: true}\n  }\n\n  return ({\n    ...device,\n    close: () => {\n      window.navigator.hid.removeEventListener(\"disconnect\", listenDisconnects)\n      HID.close()\n      onClose?.(DeviceClosedByApp)\n    },\n    ethPublic: ethPublic(send, enc)\n  })\n}\n","import { createContext, FunctionComponent, useState } from \"react\";\nimport { connect as deviceConnect, Device } from \"../api/device\";\nimport { BitBoxError } from \"../api/errors\";\nimport { Info } from \"../api/messages\";\nimport { useAsync } from \"../utils/hooks\";\n\ninterface Context {\n  connected: boolean\n  connect: () => void\n  connecting: boolean\n  info: Info\n  error?: Error\n  device?: Device\n}\n\nexport const DeviceContext = createContext<Context>({} as any);\n\nexport const DeviceContextProvider: FunctionComponent = ({children}) => {\n  const [info, setInfo] = useState<Info>({});\n  const [closeError, setCloseError] = useState<BitBoxError>();\n  const {execute, error, status, value: device} = useAsync(() => deviceConnect({\n    onInfo: setInfo,\n    onClose: setCloseError\n  }), false);\n\n  let connect = () => {\n    execute();\n    setInfo({});\n    setCloseError(undefined);\n  }\n\n  return <DeviceContext.Provider value={{\n    connect,\n    connected: (status === \"success\") && !closeError, \n    connecting: status === \"pending\",\n    error: error || closeError,\n    info,\n    device\n  }}>{children}</DeviceContext.Provider>\n}\n","import React, { useCallback, useEffect, useState } from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: React.Dispatch<React.SetStateAction<T>> = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(value);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n// Hook\nexport const useAsync = <T, E = Error>(\n  asyncFunction: () => Promise<T>,\n  immediate = true\n) => {\n  const [status, setStatus] = useState<\n    \"idle\" | \"pending\" | \"success\" | \"error\"\n  >(\"idle\");\n  const [value, setValue] = useState<T | undefined>(undefined);\n  const [error, setError] = useState<E | undefined>(undefined);\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(() => {\n    setStatus(\"pending\");\n    setValue(undefined);\n    setError(undefined);\n    return asyncFunction()\n      .then((response: any) => {\n        setValue(response);\n        setStatus(\"success\");\n      })\n      .catch((error: any) => {\n        setError(error);\n        setStatus(\"error\");\n      });\n  }, [asyncFunction]);\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [immediate]);\n  return { execute, status, value, error };\n};\n\nexport const useToggle = (initialState: boolean = false): readonly [boolean, () => void, () => void, () => void] => {\n  const [state, setState] = useState<boolean>(initialState);\n\n  const toggle = useCallback((): void => setState(state => !state), []);\n  const setTrue = useCallback((): void => setState(true), []);\n  const setFalse = useCallback((): void => setState(false), []);\n  return [state, toggle, setTrue, setFalse] as const;\n}\n\nexport const useIntervalUpdate = (miliseconds: number = 1000) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [update, setUpdate] = useState<number>(0);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setUpdate(Math.random());\n    }, miliseconds)\n    return () => clearInterval(intervalId);\n  }, [setUpdate, miliseconds])\n}\n\nexport const useCallbackAsync = (ex: (...params: any[]) => Promise<any>, execute: boolean, deps: React.DependencyList) => {\n  useEffect(() => {\n    if (execute) {\n      ex();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\nexport const useInput = (defaultValue = \"\") => {\n  const [val, setVal] = useState<string>(defaultValue)\n  const setEv = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setVal(ev.target.value), [setVal]);\n  return [val, setEv] as const\n}\n","import { useContext } from \"react\";\nimport { Alert, AlertDescription, AlertIcon, Box, Button, List, ListIcon, ListItem, Stack, Tag, TagLabel, TagLeftIcon } from \"@chakra-ui/react\"\nimport { CheckIcon, UnlockIcon, TimeIcon, LockIcon, ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\"\nimport { DeviceContext } from \"../context/contexts\";\n\nconst ConnectingBadges = () => {\n  let {\n    info: {\n      version,\n      unlocked,\n      encrypted\n    }\n  } = useContext(DeviceContext);\n  return <Stack direction={\"row\"} justify={\"end\"}>\n    {version && <Tag size={\"lg\"} variant='subtle' colorScheme={'blue'}>\n      <TagLabel>Version {version.major}.{version.minor}.{version.patch}</TagLabel>\n    </Tag>}\n    <Tag size={\"lg\"} variant='subtle' colorScheme={unlocked ? 'blue' : 'red'}>\n      <TagLeftIcon boxSize='12px' as={unlocked ? UnlockIcon : LockIcon} />\n      <TagLabel>{unlocked ? \"Unlocked\" : \"Locked\"}</TagLabel>\n    </Tag>\n    <Tag size={\"lg\"} variant='subtle' colorScheme={encrypted ? 'blue' : 'red'}>\n      <TagLeftIcon boxSize='12px' as={encrypted ? ViewOffIcon : ViewIcon} />\n      <TagLabel>{encrypted ? \"Encrypted\" : \"Cleartext\"}</TagLabel>\n    </Tag>\n  </Stack>\n}\n\nconst ConnectingState = () => {\n  let { info: {\n    version,\n    attestation,\n    unlocked,\n    encrypted,\n    deviceAcceptedPairing\n  } } = useContext(DeviceContext);\n  let color = 'blue.500';\n  return <Box rounded={8} padding={4} backgroundColor={\"gray.200\"}>\n    <List spacing={3}>\n      <ListItem>\n        <ListIcon as={version ? CheckIcon : TimeIcon} color={color} />\n        Querying device Info\n      </ListItem>\n      <ListItem>\n        <ListIcon as={attestation ? CheckIcon : TimeIcon} color={color} />\n        Attestation Check. Verification not implemented\n      </ListItem>\n      <ListItem>\n        <ListIcon as={unlocked ? CheckIcon : TimeIcon} color={color} />\n        Unlocking device\n      </ListItem>\n      <ListItem>\n        <ListIcon as={encrypted ? CheckIcon : TimeIcon} color={color} />\n        Encryption handshake\n      </ListItem>\n      <ListItem>\n        <ListIcon as={deviceAcceptedPairing ? CheckIcon : TimeIcon} color={color} />\n        Pairing code Verification\n      </ListItem>\n    </List>\n  </Box>\n}\n\nexport const ConnectingView = () => {\n  const { connect, connecting, connected, error } = useContext(DeviceContext);\n\n  return <Stack direction={\"column\"} maxWidth={540} width={540} margin={4}>\n    <ConnectingBadges />\n    <ConnectingState />\n    {error && <Alert status='error' rounded={8}>\n      <AlertIcon />\n      <AlertDescription>{error.message}</AlertDescription>\n    </Alert>}\n    <Button onClick={connect} colorScheme={\"blue\"} isLoading={connecting} loadingText={\"Connecting...\"} disabled={connected || connecting}>Connect</Button>\n  </Stack>\n}\n","import { Fragment, FunctionComponent } from \"react\";\nimport { Button, FormControl, FormLabel, FormHelperText, Input, Divider, Select, Switch } from \"@chakra-ui/react\";\nimport { Field, Formik } from \"formik\";\nimport { ethPublicArgs } from \"../api/eth_messages\";\nimport { getKeypathFromString } from \"../api/utils\";\n\ninterface FormProps {\n  display: boolean\n}\n\nexport const EthPublicForm: FunctionComponent<{onSubmit: ((data: ethPublicArgs) => void)}> = ({onSubmit}) => {\n  return <Formik<FormProps>\n    initialValues={{ display: false }}\n    onSubmit={({display}) => {\n      onSubmit({\n        coin: 0,\n        keypathList: getKeypathFromString(\"m/44'/60'/0'/0/0\"),\n        contractAddress: Uint8Array.from([]),\n        display,\n        outputType: 0\n      })\n    }}\n  >{({handleSubmit}) => (\n    <Fragment>\n      <FormControl>\n        <FormLabel htmlFor='country'>Coin</FormLabel>\n        <Select id='country'>\n          <option>ETH</option>\n          <option>ROPSTENETH</option>\n          <option>RINKEBYETH</option>\n        </Select>\n      </FormControl>\n      <Divider />\n      <Field name=\"display\">\n             {({\n               // @ts-ignore\n               field\n             }) => (\n              <FormControl display='flex' alignItems='center'>\n              <FormLabel htmlFor='display' mb='0'>\n                Display address on device\n              </FormLabel>\n              <Switch {...field} />\n            </FormControl>\n             )}\n           </Field>\n      \n      <Divider />\n      <FormControl>\n        <FormLabel htmlFor='email'>Keypath</FormLabel>\n        <Input id='email' defaultValue=\"m/44'/60'/0'/0/0\" />\n        <FormHelperText>The actual sent data is a number[] derived using getKeypathFromString</FormHelperText>\n      </FormControl>\n      <Divider />\n      <FormControl>\n        <FormLabel htmlFor='xd'>Output type</FormLabel>\n        <Select id='xd'>\n          <option>ADDRESS</option>\n          <option>XPUB</option>\n        </Select>\n      </FormControl>\n      <Divider />\n      <FormControl>\n        <FormLabel htmlFor='contract'>Contract Address</FormLabel>\n        <Input id='contract' placeholder={\"0x...\"} />\n        <FormHelperText>Can be empty</FormHelperText>\n      </FormControl>\n      <Divider />\n      <Button colorScheme={\"blue\"} onClick={handleSubmit as any}>Send</Button>\n    </Fragment>\n  )}</Formik>\n}\n","import { Fragment, FunctionComponent, useContext, useState } from \"react\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport { Stack, Heading, Text, Code } from \"@chakra-ui/react\";\nimport { DeviceContext } from \"../context/contexts\";\nimport { EthPublicForm } from \"../components/EthPublicForm\";\nimport { ethPublicArgs } from \"../api/eth_messages\";\n\nlet toString = (or: any) => JSON.stringify(or, (_, el) => (el instanceof Uint8Array) ? hexlify(el) : el , 2)\n\ninterface MessagesComponentPros {\n  req?: any\n  resp?: any\n  onSubmit: ((data: ethPublicArgs) => void )\n}\n\nconst MessagesComponent: FunctionComponent<MessagesComponentPros> = ({req, resp, onSubmit}) => {\n  return <Stack direction={\"column\"} maxWidth={1024} width={1024} margin={4} spacing={8}>\n    <Heading>Ethereum Show Address</Heading>\n    <Stack direction={\"row\"} spacing={4}>\n      <Stack rounded={8} padding={4} spacing={2} border={\"1px solid\"} borderColor={\"gray.400\"} flex={\"1 1 0px\"}>\n        <EthPublicForm onSubmit={onSubmit} />\n      </Stack>\n      <Stack rounded={8} padding={4} spacing={2} border={\"1px solid\"} borderColor={\"gray.400\"} flex={\"1 1 0px\"}>\n        { req && <Fragment key=\"req\">\n          <Text>Request</Text>\n          <Code whiteSpace={\"pre\"} maxWidth={470} overflowX={\"auto\"}>{toString(req)}</Code>\n        </Fragment> }\n        { resp && <Fragment key=\"res\">\n          <Text>Response</Text>\n          <Code whiteSpace={\"pre\"} maxWidth={470} overflowX={\"auto\"}>{toString(resp)}</Code>\n        </Fragment> }\n        </Stack>\n    </Stack>\n  </Stack>\n}\n\n\nexport const MessagesView = () => {\n  const { device } = useContext(DeviceContext);\n  const [req, setReq] = useState<any>();\n  const [resp, setResp] = useState<string>();\n  if (!device) return null;\n\n  return <MessagesComponent\n    req={req}\n    resp={resp}\n    onSubmit={\n      (data: ethPublicArgs) => {\n        setReq(data);\n        device.ethPublic(data).then(setResp)\n      }\n    }\n  />\n}\n","import './App.css';\nimport { Center } from '@chakra-ui/react';\nimport { useContext } from 'react';\nimport { DeviceContext } from './context/contexts';\nimport { ConnectingView } from './views/ConnectingView';\nimport { MessagesView } from './views/MessagesView';\n\nfunction App() {\n  const { connected } = useContext(DeviceContext);\n\n  return (\n    <Center h='100vh'>\n      { connected ? <MessagesView /> : <ConnectingView /> }\n    </Center>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { DeviceContextProvider } from './context/contexts';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <DeviceContextProvider>\n        <App />\n      </DeviceContextProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// source: common.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Keypath', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.PubResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RootFingerprintRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.RootFingerprintResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.XPub', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.PubResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.PubResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.PubResponse.displayName = 'proto.shiftcrypto.bitbox02.PubResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RootFingerprintRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RootFingerprintRequest.displayName = 'proto.shiftcrypto.bitbox02.RootFingerprintRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.RootFingerprintResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.RootFingerprintResponse.displayName = 'proto.shiftcrypto.bitbox02.RootFingerprintResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.XPub = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.XPub, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.XPub.displayName = 'proto.shiftcrypto.bitbox02.XPub';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Keypath = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.Keypath.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Keypath, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Keypath.displayName = 'proto.shiftcrypto.bitbox02.Keypath';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.PubResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PubResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.PubResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.PubResponse;\n  return proto.shiftcrypto.bitbox02.PubResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.PubResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setPub(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.PubResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.PubResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.PubResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string pub = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.getPub = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.PubResponse} returns this\n */\nproto.shiftcrypto.bitbox02.PubResponse.prototype.setPub = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RootFingerprintRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RootFingerprintRequest;\n  return proto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RootFingerprintRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.RootFingerprintResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    fingerprint: msg.getFingerprint_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.RootFingerprintResponse;\n  return proto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setFingerprint(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.RootFingerprintResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getFingerprint_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * This is a type-conversion wrapper around `getFingerprint()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getFingerprint()));\n};\n\n\n/**\n * optional bytes fingerprint = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getFingerprint()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.getFingerprint_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getFingerprint()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.RootFingerprintResponse} returns this\n */\nproto.shiftcrypto.bitbox02.RootFingerprintResponse.prototype.setFingerprint = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.XPub.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.XPub} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.XPub.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    depth: msg.getDepth_asB64(),\n    parentFingerprint: msg.getParentFingerprint_asB64(),\n    childNum: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    chainCode: msg.getChainCode_asB64(),\n    publicKey: msg.getPublicKey_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.XPub.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.XPub;\n  return proto.shiftcrypto.bitbox02.XPub.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.XPub} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.XPub}\n */\nproto.shiftcrypto.bitbox02.XPub.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setDepth(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setParentFingerprint(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setChildNum(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChainCode(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPublicKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.XPub.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.XPub} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.XPub.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDepth_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getParentFingerprint_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getChildNum();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getChainCode_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getPublicKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes depth = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes depth = 1;\n * This is a type-conversion wrapper around `getDepth()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getDepth()));\n};\n\n\n/**\n * optional bytes depth = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getDepth()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getDepth_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getDepth()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setDepth = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * This is a type-conversion wrapper around `getParentFingerprint()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getParentFingerprint()));\n};\n\n\n/**\n * optional bytes parent_fingerprint = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getParentFingerprint()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getParentFingerprint_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getParentFingerprint()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setParentFingerprint = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional uint32 child_num = 3;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChildNum = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setChildNum = function(value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * This is a type-conversion wrapper around `getChainCode()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChainCode()));\n};\n\n\n/**\n * optional bytes chain_code = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChainCode()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getChainCode_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChainCode()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setChainCode = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes public_key = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes public_key = 5;\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getPublicKey()));\n};\n\n\n/**\n * optional bytes public_key = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPublicKey()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.getPublicKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPublicKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.XPub} returns this\n */\nproto.shiftcrypto.bitbox02.XPub.prototype.setPublicKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Keypath.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Keypath.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Keypath} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Keypath.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.Keypath.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Keypath;\n  return proto.shiftcrypto.bitbox02.Keypath.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Keypath} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Keypath}\n */\nproto.shiftcrypto.bitbox02.Keypath.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Keypath.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Keypath} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Keypath.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.Keypath} returns this\n */\nproto.shiftcrypto.bitbox02.Keypath.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: eth.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar antiklepto_pb = require('./antiklepto_pb.js');\ngoog.object.extend(proto, antiklepto_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHCoin', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHRequest.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignMessageRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.ETHSignResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHPubRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHPubRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHPubRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignMessageRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHSignMessageRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHSignResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHSignResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHSignResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHRequest.displayName = 'proto.shiftcrypto.bitbox02.ETHRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.ETHResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.ETHResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.ETHResponse.displayName = 'proto.shiftcrypto.bitbox02.ETHResponse';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n    coin: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    outputType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    display: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n    contractAddress: msg.getContractAddress_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHPubRequest;\n  return proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 2:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (reader.readEnum());\n      msg.setOutputType(value);\n      break;\n    case 4:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setDisplay(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setContractAddress(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      1,\n      f\n    );\n  }\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getOutputType();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getDisplay();\n  if (f) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n  f = message.getContractAddress_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.OutputType = {\n  ADDRESS: 0,\n  XPUB: 1\n};\n\n/**\n * repeated uint32 keypath = 1;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional ETHCoin coin = 2;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional OutputType output_type = 3;\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getOutputType = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHPubRequest.OutputType} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setOutputType = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * optional bool display = 4;\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getDisplay = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setDisplay = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getContractAddress()));\n};\n\n\n/**\n * optional bytes contract_address = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContractAddress()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.getContractAddress_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getContractAddress()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHPubRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHPubRequest.prototype.setContractAddress = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    nonce: msg.getNonce_asB64(),\n    gasPrice: msg.getGasPrice_asB64(),\n    gasLimit: msg.getGasLimit_asB64(),\n    recipient: msg.getRecipient_asB64(),\n    value: msg.getValue_asB64(),\n    data: msg.getData_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignRequest;\n  return proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setNonce(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setGasPrice(value);\n      break;\n    case 5:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setGasLimit(value);\n      break;\n    case 6:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setRecipient(value);\n      break;\n    case 7:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setValue(value);\n      break;\n    case 8:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 9:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = message.getNonce_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getGasPrice_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f = message.getGasLimit_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      5,\n      f\n    );\n  }\n  f = message.getRecipient_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f = message.getValue_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      7,\n      f\n    );\n  }\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      8,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes nonce = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes nonce = 3;\n * This is a type-conversion wrapper around `getNonce()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getNonce()));\n};\n\n\n/**\n * optional bytes nonce = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getNonce()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getNonce_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getNonce()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setNonce = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * This is a type-conversion wrapper around `getGasPrice()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getGasPrice()));\n};\n\n\n/**\n * optional bytes gas_price = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getGasPrice()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasPrice_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getGasPrice()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasPrice = function(value) {\n  return jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * This is a type-conversion wrapper around `getGasLimit()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getGasLimit()));\n};\n\n\n/**\n * optional bytes gas_limit = 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getGasLimit()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getGasLimit_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getGasLimit()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setGasLimit = function(value) {\n  return jspb.Message.setProto3BytesField(this, 5, value);\n};\n\n\n/**\n * optional bytes recipient = 6;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * optional bytes recipient = 6;\n * This is a type-conversion wrapper around `getRecipient()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getRecipient()));\n};\n\n\n/**\n * optional bytes recipient = 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getRecipient()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getRecipient_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getRecipient()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setRecipient = function(value) {\n  return jspb.Message.setProto3BytesField(this, 6, value);\n};\n\n\n/**\n * optional bytes value = 7;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/**\n * optional bytes value = 7;\n * This is a type-conversion wrapper around `getValue()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getValue()));\n};\n\n\n/**\n * optional bytes value = 7;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getValue()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getValue_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getValue()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setValue = function(value) {\n  return jspb.Message.setProto3BytesField(this, 7, value);\n};\n\n\n/**\n * optional bytes data = 8;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/**\n * optional bytes data = 8;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 8;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setData = function(value) {\n  return jspb.Message.setProto3BytesField(this, 8, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 9;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 9, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHSignRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    coin: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    keypathList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n    msg: msg.getMsg_asB64(),\n    hostNonceCommitment: (f = msg.getHostNonceCommitment()) && antiklepto_pb.AntiKleptoHostNonceCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;\n  return proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (reader.readEnum());\n      msg.setCoin(value);\n      break;\n    case 2:\n      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);\n      for (var i = 0; i < values.length; i++) {\n        msg.addKeypath(values[i]);\n      }\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoHostNonceCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader);\n      msg.setHostNonceCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCoin();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getKeypathList();\n  if (f.length > 0) {\n    writer.writePackedUint32(\n      2,\n      f\n    );\n  }\n  f = message.getMsg_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getHostNonceCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoHostNonceCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHCoin coin = 1;\n * @return {!proto.shiftcrypto.bitbox02.ETHCoin}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getCoin = function() {\n  return /** @type {!proto.shiftcrypto.bitbox02.ETHCoin} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.shiftcrypto.bitbox02.ETHCoin} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setCoin = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * repeated uint32 keypath = 2;\n * @return {!Array<number>}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getKeypathList = function() {\n  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * @param {!Array<number>} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setKeypathList = function(value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number=} opt_index\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.addKeypath = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearKeypathList = function() {\n  return this.setKeypathList([]);\n};\n\n\n/**\n * optional bytes msg = 3;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes msg = 3;\n * This is a type-conversion wrapper around `getMsg()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getMsg()));\n};\n\n\n/**\n * optional bytes msg = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getMsg()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getMsg_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getMsg()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setMsg = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional AntiKleptoHostNonceCommitment host_nonce_commitment = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.getHostNonceCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoHostNonceCommitment, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.setHostNonceCommitment = function(value) {\n  return jspb.Message.setWrapperField(this, 4, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignMessageRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.clearHostNonceCommitment = function() {\n  return this.setHostNonceCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHSignMessageRequest.prototype.hasHostNonceCommitment = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signature: msg.getSignature_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHSignResponse;\n  return proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHSignResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSignature_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes signature = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes signature = 1;\n * This is a type-conversion wrapper around `getSignature()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSignature()));\n};\n\n\n/**\n * optional bytes signature = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignature()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.getSignature_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSignature()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.ETHSignResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHSignResponse.prototype.setSignature = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_ = [[1,2,3,4]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  PUB: 1,\n  SIGN: 2,\n  SIGN_MSG: 3,\n  ANTIKLEPTO_SIGNATURE: 4\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.ETHRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: (f = msg.getPub()) && proto.shiftcrypto.bitbox02.ETHPubRequest.toObject(includeInstance, f),\n    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignRequest.toObject(includeInstance, f),\n    signMsg: (f = msg.getSignMsg()) && proto.shiftcrypto.bitbox02.ETHSignMessageRequest.toObject(includeInstance, f),\n    antikleptoSignature: (f = msg.getAntikleptoSignature()) && antiklepto_pb.AntiKleptoSignatureRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHRequest;\n  return proto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.ETHPubRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHPubRequest.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignRequest.deserializeBinaryFromReader);\n      msg.setSign(value);\n      break;\n    case 3:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignMessageRequest;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignMessageRequest.deserializeBinaryFromReader);\n      msg.setSignMsg(value);\n      break;\n    case 4:\n      var value = new antiklepto_pb.AntiKleptoSignatureRequest;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignatureRequest.deserializeBinaryFromReader);\n      msg.setAntikleptoSignature(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.ETHPubRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSign();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSignMsg();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignMessageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignature();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      antiklepto_pb.AntiKleptoSignatureRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ETHPubRequest pub = 1;\n * @return {?proto.shiftcrypto.bitbox02.ETHPubRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHPubRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHPubRequest, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHPubRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional ETHSignRequest sign = 2;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getSign = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setSign = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSign = function() {\n  return this.setSign(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSign = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional ETHSignMessageRequest sign_msg = 3;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getSignMsg = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignMessageRequest} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignMessageRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignMessageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setSignMsg = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearSignMsg = function() {\n  return this.setSignMsg(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasSignMsg = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional AntiKleptoSignatureRequest antiklepto_signature = 4;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.getAntikleptoSignature = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignatureRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.setAntikleptoSignature = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.ETHRequest.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHRequest} returns this\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.clearAntikleptoSignature = function() {\n  return this.setAntikleptoSignature(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHRequest.prototype.hasAntikleptoSignature = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_ = [[1,2,3]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  PUB: 1,\n  SIGN: 2,\n  ANTIKLEPTO_SIGNER_COMMITMENT: 3\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.ETHResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.ETHResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    sign: (f = msg.getSign()) && proto.shiftcrypto.bitbox02.ETHSignResponse.toObject(includeInstance, f),\n    antikleptoSignerCommitment: (f = msg.getAntikleptoSignerCommitment()) && antiklepto_pb.AntiKleptoSignerCommitment.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.ETHResponse;\n  return proto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.ETHSignResponse;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.ETHSignResponse.deserializeBinaryFromReader);\n      msg.setSign(value);\n      break;\n    case 3:\n      var value = new antiklepto_pb.AntiKleptoSignerCommitment;\n      reader.readMessage(value,antiklepto_pb.AntiKleptoSignerCommitment.deserializeBinaryFromReader);\n      msg.setAntikleptoSignerCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.ETHResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.ETHResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getSign();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.ETHSignResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getAntikleptoSignerCommitment();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      antiklepto_pb.AntiKleptoSignerCommitment.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional PubResponse pub = 1;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional ETHSignResponse sign = 2;\n * @return {?proto.shiftcrypto.bitbox02.ETHSignResponse}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getSign = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHSignResponse} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.ETHSignResponse, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHSignResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setSign = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearSign = function() {\n  return this.setSign(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasSign = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional AntiKleptoSignerCommitment antiklepto_signer_commitment = 3;\n * @return {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.getAntikleptoSignerCommitment = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} */ (\n    jspb.Message.getWrapperField(this, antiklepto_pb.AntiKleptoSignerCommitment, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n*/\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.setAntikleptoSignerCommitment = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.ETHResponse.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.ETHResponse} returns this\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.clearAntikleptoSignerCommitment = function() {\n  return this.setAntikleptoSignerCommitment(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.ETHResponse.prototype.hasAntikleptoSignerCommitment = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.ETHCoin = {\n  ETH: 0,\n  ROPSTENETH: 1,\n  RINKEBYETH: 2\n};\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: hww.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\nvar common_pb = require('./common_pb.js');\ngoog.object.extend(proto, common_pb);\nvar backup_commands_pb = require('./backup_commands_pb.js');\ngoog.object.extend(proto, backup_commands_pb);\nvar bitbox02_system_pb = require('./bitbox02_system_pb.js');\ngoog.object.extend(proto, bitbox02_system_pb);\nvar btc_pb = require('./btc_pb.js');\ngoog.object.extend(proto, btc_pb);\nvar cardano_pb = require('./cardano_pb.js');\ngoog.object.extend(proto, cardano_pb);\nvar eth_pb = require('./eth_pb.js');\ngoog.object.extend(proto, eth_pb);\nvar keystore_pb = require('./keystore_pb.js');\ngoog.object.extend(proto, keystore_pb);\nvar mnemonic_pb = require('./mnemonic_pb.js');\ngoog.object.extend(proto, mnemonic_pb);\nvar system_pb = require('./system_pb.js');\ngoog.object.extend(proto, system_pb);\nvar perform_attestation_pb = require('./perform_attestation_pb.js');\ngoog.object.extend(proto, perform_attestation_pb);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Error', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Request', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Request.RequestCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Response', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Response.ResponseCase', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.Success', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Error = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Error, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Error.displayName = 'proto.shiftcrypto.bitbox02.Error';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Success = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Success, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Success.displayName = 'proto.shiftcrypto.bitbox02.Success';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Request = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Request.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Request, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Request.displayName = 'proto.shiftcrypto.bitbox02.Request';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.Response = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shiftcrypto.bitbox02.Response.oneofGroups_);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.Response, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.Response.displayName = 'proto.shiftcrypto.bitbox02.Response';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Error.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Error} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Error.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    code: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    message: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Error.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Error;\n  return proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Error} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setCode(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMessage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Error} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCode();\n  if (f !== 0) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f = message.getMessage();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int32 code = 1;\n * @return {number}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.getCode = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.shiftcrypto.bitbox02.Error} returns this\n */\nproto.shiftcrypto.bitbox02.Error.prototype.setCode = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional string message = 2;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.Error.prototype.getMessage = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.shiftcrypto.bitbox02.Error} returns this\n */\nproto.shiftcrypto.bitbox02.Error.prototype.setMessage = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Success.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Success.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Success} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Success.toObject = function(includeInstance, msg) {\n  var f, obj = {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Success.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Success;\n  return proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Success} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Success.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Success} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Request.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.Request.RequestCase = {\n  REQUEST_NOT_SET: 0,\n  DEVICE_NAME: 2,\n  DEVICE_LANGUAGE: 3,\n  DEVICE_INFO: 4,\n  SET_PASSWORD: 5,\n  CREATE_BACKUP: 6,\n  SHOW_MNEMONIC: 7,\n  BTC_PUB: 8,\n  BTC_SIGN_INIT: 9,\n  BTC_SIGN_INPUT: 10,\n  BTC_SIGN_OUTPUT: 11,\n  INSERT_REMOVE_SDCARD: 12,\n  CHECK_SDCARD: 13,\n  SET_MNEMONIC_PASSPHRASE_ENABLED: 14,\n  LIST_BACKUPS: 15,\n  RESTORE_BACKUP: 16,\n  PERFORM_ATTESTATION: 17,\n  REBOOT: 18,\n  CHECK_BACKUP: 19,\n  ETH: 20,\n  RESET: 21,\n  RESTORE_FROM_MNEMONIC: 22,\n  FINGERPRINT: 24,\n  BTC: 25,\n  ELECTRUM_ENCRYPTION_KEY: 26,\n  CARDANO: 27\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.Request.RequestCase}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRequestCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.Request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Request.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Request} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Request.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    deviceName: (f = msg.getDeviceName()) && bitbox02_system_pb.SetDeviceNameRequest.toObject(includeInstance, f),\n    deviceLanguage: (f = msg.getDeviceLanguage()) && bitbox02_system_pb.SetDeviceLanguageRequest.toObject(includeInstance, f),\n    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoRequest.toObject(includeInstance, f),\n    setPassword: (f = msg.getSetPassword()) && bitbox02_system_pb.SetPasswordRequest.toObject(includeInstance, f),\n    createBackup: (f = msg.getCreateBackup()) && backup_commands_pb.CreateBackupRequest.toObject(includeInstance, f),\n    showMnemonic: (f = msg.getShowMnemonic()) && mnemonic_pb.ShowMnemonicRequest.toObject(includeInstance, f),\n    btcPub: (f = msg.getBtcPub()) && btc_pb.BTCPubRequest.toObject(includeInstance, f),\n    btcSignInit: (f = msg.getBtcSignInit()) && btc_pb.BTCSignInitRequest.toObject(includeInstance, f),\n    btcSignInput: (f = msg.getBtcSignInput()) && btc_pb.BTCSignInputRequest.toObject(includeInstance, f),\n    btcSignOutput: (f = msg.getBtcSignOutput()) && btc_pb.BTCSignOutputRequest.toObject(includeInstance, f),\n    insertRemoveSdcard: (f = msg.getInsertRemoveSdcard()) && bitbox02_system_pb.InsertRemoveSDCardRequest.toObject(includeInstance, f),\n    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardRequest.toObject(includeInstance, f),\n    setMnemonicPassphraseEnabled: (f = msg.getSetMnemonicPassphraseEnabled()) && mnemonic_pb.SetMnemonicPassphraseEnabledRequest.toObject(includeInstance, f),\n    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsRequest.toObject(includeInstance, f),\n    restoreBackup: (f = msg.getRestoreBackup()) && backup_commands_pb.RestoreBackupRequest.toObject(includeInstance, f),\n    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationRequest.toObject(includeInstance, f),\n    reboot: (f = msg.getReboot()) && system_pb.RebootRequest.toObject(includeInstance, f),\n    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupRequest.toObject(includeInstance, f),\n    eth: (f = msg.getEth()) && eth_pb.ETHRequest.toObject(includeInstance, f),\n    reset: (f = msg.getReset()) && bitbox02_system_pb.ResetRequest.toObject(includeInstance, f),\n    restoreFromMnemonic: (f = msg.getRestoreFromMnemonic()) && mnemonic_pb.RestoreFromMnemonicRequest.toObject(includeInstance, f),\n    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintRequest.toObject(includeInstance, f),\n    btc: (f = msg.getBtc()) && btc_pb.BTCRequest.toObject(includeInstance, f),\n    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyRequest.toObject(includeInstance, f),\n    cardano: (f = msg.getCardano()) && cardano_pb.CardanoRequest.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Request}\n */\nproto.shiftcrypto.bitbox02.Request.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Request;\n  return proto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Request} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Request}\n */\nproto.shiftcrypto.bitbox02.Request.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 2:\n      var value = new bitbox02_system_pb.SetDeviceNameRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetDeviceNameRequest.deserializeBinaryFromReader);\n      msg.setDeviceName(value);\n      break;\n    case 3:\n      var value = new bitbox02_system_pb.SetDeviceLanguageRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetDeviceLanguageRequest.deserializeBinaryFromReader);\n      msg.setDeviceLanguage(value);\n      break;\n    case 4:\n      var value = new bitbox02_system_pb.DeviceInfoRequest;\n      reader.readMessage(value,bitbox02_system_pb.DeviceInfoRequest.deserializeBinaryFromReader);\n      msg.setDeviceInfo(value);\n      break;\n    case 5:\n      var value = new bitbox02_system_pb.SetPasswordRequest;\n      reader.readMessage(value,bitbox02_system_pb.SetPasswordRequest.deserializeBinaryFromReader);\n      msg.setSetPassword(value);\n      break;\n    case 6:\n      var value = new backup_commands_pb.CreateBackupRequest;\n      reader.readMessage(value,backup_commands_pb.CreateBackupRequest.deserializeBinaryFromReader);\n      msg.setCreateBackup(value);\n      break;\n    case 7:\n      var value = new mnemonic_pb.ShowMnemonicRequest;\n      reader.readMessage(value,mnemonic_pb.ShowMnemonicRequest.deserializeBinaryFromReader);\n      msg.setShowMnemonic(value);\n      break;\n    case 8:\n      var value = new btc_pb.BTCPubRequest;\n      reader.readMessage(value,btc_pb.BTCPubRequest.deserializeBinaryFromReader);\n      msg.setBtcPub(value);\n      break;\n    case 9:\n      var value = new btc_pb.BTCSignInitRequest;\n      reader.readMessage(value,btc_pb.BTCSignInitRequest.deserializeBinaryFromReader);\n      msg.setBtcSignInit(value);\n      break;\n    case 10:\n      var value = new btc_pb.BTCSignInputRequest;\n      reader.readMessage(value,btc_pb.BTCSignInputRequest.deserializeBinaryFromReader);\n      msg.setBtcSignInput(value);\n      break;\n    case 11:\n      var value = new btc_pb.BTCSignOutputRequest;\n      reader.readMessage(value,btc_pb.BTCSignOutputRequest.deserializeBinaryFromReader);\n      msg.setBtcSignOutput(value);\n      break;\n    case 12:\n      var value = new bitbox02_system_pb.InsertRemoveSDCardRequest;\n      reader.readMessage(value,bitbox02_system_pb.InsertRemoveSDCardRequest.deserializeBinaryFromReader);\n      msg.setInsertRemoveSdcard(value);\n      break;\n    case 13:\n      var value = new bitbox02_system_pb.CheckSDCardRequest;\n      reader.readMessage(value,bitbox02_system_pb.CheckSDCardRequest.deserializeBinaryFromReader);\n      msg.setCheckSdcard(value);\n      break;\n    case 14:\n      var value = new mnemonic_pb.SetMnemonicPassphraseEnabledRequest;\n      reader.readMessage(value,mnemonic_pb.SetMnemonicPassphraseEnabledRequest.deserializeBinaryFromReader);\n      msg.setSetMnemonicPassphraseEnabled(value);\n      break;\n    case 15:\n      var value = new backup_commands_pb.ListBackupsRequest;\n      reader.readMessage(value,backup_commands_pb.ListBackupsRequest.deserializeBinaryFromReader);\n      msg.setListBackups(value);\n      break;\n    case 16:\n      var value = new backup_commands_pb.RestoreBackupRequest;\n      reader.readMessage(value,backup_commands_pb.RestoreBackupRequest.deserializeBinaryFromReader);\n      msg.setRestoreBackup(value);\n      break;\n    case 17:\n      var value = new perform_attestation_pb.PerformAttestationRequest;\n      reader.readMessage(value,perform_attestation_pb.PerformAttestationRequest.deserializeBinaryFromReader);\n      msg.setPerformAttestation(value);\n      break;\n    case 18:\n      var value = new system_pb.RebootRequest;\n      reader.readMessage(value,system_pb.RebootRequest.deserializeBinaryFromReader);\n      msg.setReboot(value);\n      break;\n    case 19:\n      var value = new backup_commands_pb.CheckBackupRequest;\n      reader.readMessage(value,backup_commands_pb.CheckBackupRequest.deserializeBinaryFromReader);\n      msg.setCheckBackup(value);\n      break;\n    case 20:\n      var value = new eth_pb.ETHRequest;\n      reader.readMessage(value,eth_pb.ETHRequest.deserializeBinaryFromReader);\n      msg.setEth(value);\n      break;\n    case 21:\n      var value = new bitbox02_system_pb.ResetRequest;\n      reader.readMessage(value,bitbox02_system_pb.ResetRequest.deserializeBinaryFromReader);\n      msg.setReset(value);\n      break;\n    case 22:\n      var value = new mnemonic_pb.RestoreFromMnemonicRequest;\n      reader.readMessage(value,mnemonic_pb.RestoreFromMnemonicRequest.deserializeBinaryFromReader);\n      msg.setRestoreFromMnemonic(value);\n      break;\n    case 24:\n      var value = new common_pb.RootFingerprintRequest;\n      reader.readMessage(value,common_pb.RootFingerprintRequest.deserializeBinaryFromReader);\n      msg.setFingerprint(value);\n      break;\n    case 25:\n      var value = new btc_pb.BTCRequest;\n      reader.readMessage(value,btc_pb.BTCRequest.deserializeBinaryFromReader);\n      msg.setBtc(value);\n      break;\n    case 26:\n      var value = new keystore_pb.ElectrumEncryptionKeyRequest;\n      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyRequest.deserializeBinaryFromReader);\n      msg.setElectrumEncryptionKey(value);\n      break;\n    case 27:\n      var value = new cardano_pb.CardanoRequest;\n      reader.readMessage(value,cardano_pb.CardanoRequest.deserializeBinaryFromReader);\n      msg.setCardano(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Request} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Request.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDeviceName();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      bitbox02_system_pb.SetDeviceNameRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceLanguage();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      bitbox02_system_pb.SetDeviceLanguageRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceInfo();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      bitbox02_system_pb.DeviceInfoRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSetPassword();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      bitbox02_system_pb.SetPasswordRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCreateBackup();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      backup_commands_pb.CreateBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getShowMnemonic();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      mnemonic_pb.ShowMnemonicRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcPub();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      btc_pb.BTCPubRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignInit();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      btc_pb.BTCSignInitRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignInput();\n  if (f != null) {\n    writer.writeMessage(\n      10,\n      f,\n      btc_pb.BTCSignInputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignOutput();\n  if (f != null) {\n    writer.writeMessage(\n      11,\n      f,\n      btc_pb.BTCSignOutputRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getInsertRemoveSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      12,\n      f,\n      bitbox02_system_pb.InsertRemoveSDCardRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      13,\n      f,\n      bitbox02_system_pb.CheckSDCardRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getSetMnemonicPassphraseEnabled();\n  if (f != null) {\n    writer.writeMessage(\n      14,\n      f,\n      mnemonic_pb.SetMnemonicPassphraseEnabledRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getListBackups();\n  if (f != null) {\n    writer.writeMessage(\n      15,\n      f,\n      backup_commands_pb.ListBackupsRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRestoreBackup();\n  if (f != null) {\n    writer.writeMessage(\n      16,\n      f,\n      backup_commands_pb.RestoreBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getPerformAttestation();\n  if (f != null) {\n    writer.writeMessage(\n      17,\n      f,\n      perform_attestation_pb.PerformAttestationRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getReboot();\n  if (f != null) {\n    writer.writeMessage(\n      18,\n      f,\n      system_pb.RebootRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckBackup();\n  if (f != null) {\n    writer.writeMessage(\n      19,\n      f,\n      backup_commands_pb.CheckBackupRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getEth();\n  if (f != null) {\n    writer.writeMessage(\n      20,\n      f,\n      eth_pb.ETHRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getReset();\n  if (f != null) {\n    writer.writeMessage(\n      21,\n      f,\n      bitbox02_system_pb.ResetRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getRestoreFromMnemonic();\n  if (f != null) {\n    writer.writeMessage(\n      22,\n      f,\n      mnemonic_pb.RestoreFromMnemonicRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getFingerprint();\n  if (f != null) {\n    writer.writeMessage(\n      24,\n      f,\n      common_pb.RootFingerprintRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtc();\n  if (f != null) {\n    writer.writeMessage(\n      25,\n      f,\n      btc_pb.BTCRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getElectrumEncryptionKey();\n  if (f != null) {\n    writer.writeMessage(\n      26,\n      f,\n      keystore_pb.ElectrumEncryptionKeyRequest.serializeBinaryToWriter\n    );\n  }\n  f = message.getCardano();\n  if (f != null) {\n    writer.writeMessage(\n      27,\n      f,\n      cardano_pb.CardanoRequest.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional SetDeviceNameRequest device_name = 2;\n * @return {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceName = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceNameRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceNameRequest, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetDeviceNameRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceName = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceName = function() {\n  return this.setDeviceName(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceName = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional SetDeviceLanguageRequest device_language = 3;\n * @return {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceLanguage = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetDeviceLanguageRequest, 3));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetDeviceLanguageRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceLanguage = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 3, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceLanguage = function() {\n  return this.setDeviceLanguage(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceLanguage = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional DeviceInfoRequest device_info = 4;\n * @return {?proto.shiftcrypto.bitbox02.DeviceInfoRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getDeviceInfo = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoRequest, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.DeviceInfoRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setDeviceInfo = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearDeviceInfo = function() {\n  return this.setDeviceInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasDeviceInfo = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional SetPasswordRequest set_password = 5;\n * @return {?proto.shiftcrypto.bitbox02.SetPasswordRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getSetPassword = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetPasswordRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.SetPasswordRequest, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetPasswordRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setSetPassword = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearSetPassword = function() {\n  return this.setSetPassword(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasSetPassword = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional CreateBackupRequest create_backup = 6;\n * @return {?proto.shiftcrypto.bitbox02.CreateBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCreateBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CreateBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CreateBackupRequest, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CreateBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCreateBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCreateBackup = function() {\n  return this.setCreateBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCreateBackup = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional ShowMnemonicRequest show_mnemonic = 7;\n * @return {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getShowMnemonic = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ShowMnemonicRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.ShowMnemonicRequest, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ShowMnemonicRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setShowMnemonic = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearShowMnemonic = function() {\n  return this.setShowMnemonic(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasShowMnemonic = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional BTCPubRequest btc_pub = 8;\n * @return {?proto.shiftcrypto.bitbox02.BTCPubRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCPubRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCPubRequest, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCPubRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcPub = function() {\n  return this.setBtcPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcPub = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional BTCSignInitRequest btc_sign_init = 9;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignInitRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInit = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInitRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignInitRequest, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignInitRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInit = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInit = function() {\n  return this.setBtcSignInit(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInit = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional BTCSignInputRequest btc_sign_input = 10;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignInputRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignInput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignInputRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignInputRequest, 10));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignInputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignInput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignInput = function() {\n  return this.setBtcSignInput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignInput = function() {\n  return jspb.Message.getField(this, 10) != null;\n};\n\n\n/**\n * optional BTCSignOutputRequest btc_sign_output = 11;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtcSignOutput = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignOutputRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignOutputRequest, 11));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignOutputRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtcSignOutput = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtcSignOutput = function() {\n  return this.setBtcSignOutput(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtcSignOutput = function() {\n  return jspb.Message.getField(this, 11) != null;\n};\n\n\n/**\n * optional InsertRemoveSDCardRequest insert_remove_sdcard = 12;\n * @return {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getInsertRemoveSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.InsertRemoveSDCardRequest, 12));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.InsertRemoveSDCardRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setInsertRemoveSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearInsertRemoveSdcard = function() {\n  return this.setInsertRemoveSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasInsertRemoveSdcard = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n/**\n * optional CheckSDCardRequest check_sdcard = 13;\n * @return {?proto.shiftcrypto.bitbox02.CheckSDCardRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCheckSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardRequest, 13));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckSDCardRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCheckSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCheckSdcard = function() {\n  return this.setCheckSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCheckSdcard = function() {\n  return jspb.Message.getField(this, 13) != null;\n};\n\n\n/**\n * optional SetMnemonicPassphraseEnabledRequest set_mnemonic_passphrase_enabled = 14;\n * @return {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getSetMnemonicPassphraseEnabled = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.SetMnemonicPassphraseEnabledRequest, 14));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setSetMnemonicPassphraseEnabled = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearSetMnemonicPassphraseEnabled = function() {\n  return this.setSetMnemonicPassphraseEnabled(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasSetMnemonicPassphraseEnabled = function() {\n  return jspb.Message.getField(this, 14) != null;\n};\n\n\n/**\n * optional ListBackupsRequest list_backups = 15;\n * @return {?proto.shiftcrypto.bitbox02.ListBackupsRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getListBackups = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsRequest, 15));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ListBackupsRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setListBackups = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearListBackups = function() {\n  return this.setListBackups(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasListBackups = function() {\n  return jspb.Message.getField(this, 15) != null;\n};\n\n\n/**\n * optional RestoreBackupRequest restore_backup = 16;\n * @return {?proto.shiftcrypto.bitbox02.RestoreBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRestoreBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RestoreBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.RestoreBackupRequest, 16));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RestoreBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setRestoreBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 16, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearRestoreBackup = function() {\n  return this.setRestoreBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasRestoreBackup = function() {\n  return jspb.Message.getField(this, 16) != null;\n};\n\n\n/**\n * optional PerformAttestationRequest perform_attestation = 17;\n * @return {?proto.shiftcrypto.bitbox02.PerformAttestationRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getPerformAttestation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationRequest} */ (\n    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationRequest, 17));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PerformAttestationRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setPerformAttestation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 17, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearPerformAttestation = function() {\n  return this.setPerformAttestation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasPerformAttestation = function() {\n  return jspb.Message.getField(this, 17) != null;\n};\n\n\n/**\n * optional RebootRequest reboot = 18;\n * @return {?proto.shiftcrypto.bitbox02.RebootRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getReboot = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RebootRequest} */ (\n    jspb.Message.getWrapperField(this, system_pb.RebootRequest, 18));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RebootRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setReboot = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 18, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearReboot = function() {\n  return this.setReboot(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasReboot = function() {\n  return jspb.Message.getField(this, 18) != null;\n};\n\n\n/**\n * optional CheckBackupRequest check_backup = 19;\n * @return {?proto.shiftcrypto.bitbox02.CheckBackupRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCheckBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupRequest} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupRequest, 19));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckBackupRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCheckBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 19, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCheckBackup = function() {\n  return this.setCheckBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCheckBackup = function() {\n  return jspb.Message.getField(this, 19) != null;\n};\n\n\n/**\n * optional ETHRequest eth = 20;\n * @return {?proto.shiftcrypto.bitbox02.ETHRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getEth = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHRequest} */ (\n    jspb.Message.getWrapperField(this, eth_pb.ETHRequest, 20));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setEth = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 20, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearEth = function() {\n  return this.setEth(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasEth = function() {\n  return jspb.Message.getField(this, 20) != null;\n};\n\n\n/**\n * optional ResetRequest reset = 21;\n * @return {?proto.shiftcrypto.bitbox02.ResetRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getReset = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ResetRequest} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.ResetRequest, 21));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ResetRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setReset = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 21, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearReset = function() {\n  return this.setReset(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasReset = function() {\n  return jspb.Message.getField(this, 21) != null;\n};\n\n\n/**\n * optional RestoreFromMnemonicRequest restore_from_mnemonic = 22;\n * @return {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getRestoreFromMnemonic = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest} */ (\n    jspb.Message.getWrapperField(this, mnemonic_pb.RestoreFromMnemonicRequest, 22));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RestoreFromMnemonicRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setRestoreFromMnemonic = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 22, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearRestoreFromMnemonic = function() {\n  return this.setRestoreFromMnemonic(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasRestoreFromMnemonic = function() {\n  return jspb.Message.getField(this, 22) != null;\n};\n\n\n/**\n * optional RootFingerprintRequest fingerprint = 24;\n * @return {?proto.shiftcrypto.bitbox02.RootFingerprintRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getFingerprint = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintRequest} */ (\n    jspb.Message.getWrapperField(this, common_pb.RootFingerprintRequest, 24));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RootFingerprintRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setFingerprint = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 24, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearFingerprint = function() {\n  return this.setFingerprint(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasFingerprint = function() {\n  return jspb.Message.getField(this, 24) != null;\n};\n\n\n/**\n * optional BTCRequest btc = 25;\n * @return {?proto.shiftcrypto.bitbox02.BTCRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getBtc = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCRequest} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCRequest, 25));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setBtc = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 25, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearBtc = function() {\n  return this.setBtc(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasBtc = function() {\n  return jspb.Message.getField(this, 25) != null;\n};\n\n\n/**\n * optional ElectrumEncryptionKeyRequest electrum_encryption_key = 26;\n * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getElectrumEncryptionKey = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest} */ (\n    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyRequest, 26));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setElectrumEncryptionKey = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 26, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearElectrumEncryptionKey = function() {\n  return this.setElectrumEncryptionKey(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasElectrumEncryptionKey = function() {\n  return jspb.Message.getField(this, 26) != null;\n};\n\n\n/**\n * optional CardanoRequest cardano = 27;\n * @return {?proto.shiftcrypto.bitbox02.CardanoRequest}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.getCardano = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoRequest} */ (\n    jspb.Message.getWrapperField(this, cardano_pb.CardanoRequest, 27));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoRequest|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n*/\nproto.shiftcrypto.bitbox02.Request.prototype.setCardano = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 27, proto.shiftcrypto.bitbox02.Request.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Request} returns this\n */\nproto.shiftcrypto.bitbox02.Request.prototype.clearCardano = function() {\n  return this.setCardano(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Request.prototype.hasCardano = function() {\n  return jspb.Message.getField(this, 27) != null;\n};\n\n\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.shiftcrypto.bitbox02.Response.oneofGroups_ = [[1,2,4,5,6,7,8,9,10,11,12,13,14,15]];\n\n/**\n * @enum {number}\n */\nproto.shiftcrypto.bitbox02.Response.ResponseCase = {\n  RESPONSE_NOT_SET: 0,\n  SUCCESS: 1,\n  ERROR: 2,\n  DEVICE_INFO: 4,\n  PUB: 5,\n  BTC_SIGN_NEXT: 6,\n  LIST_BACKUPS: 7,\n  CHECK_BACKUP: 8,\n  PERFORM_ATTESTATION: 9,\n  CHECK_SDCARD: 10,\n  ETH: 11,\n  FINGERPRINT: 12,\n  BTC: 13,\n  ELECTRUM_ENCRYPTION_KEY: 14,\n  CARDANO: 15\n};\n\n/**\n * @return {proto.shiftcrypto.bitbox02.Response.ResponseCase}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getResponseCase = function() {\n  return /** @type {proto.shiftcrypto.bitbox02.Response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.Response.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.Response} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Response.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    success: (f = msg.getSuccess()) && proto.shiftcrypto.bitbox02.Success.toObject(includeInstance, f),\n    error: (f = msg.getError()) && proto.shiftcrypto.bitbox02.Error.toObject(includeInstance, f),\n    deviceInfo: (f = msg.getDeviceInfo()) && bitbox02_system_pb.DeviceInfoResponse.toObject(includeInstance, f),\n    pub: (f = msg.getPub()) && common_pb.PubResponse.toObject(includeInstance, f),\n    btcSignNext: (f = msg.getBtcSignNext()) && btc_pb.BTCSignNextResponse.toObject(includeInstance, f),\n    listBackups: (f = msg.getListBackups()) && backup_commands_pb.ListBackupsResponse.toObject(includeInstance, f),\n    checkBackup: (f = msg.getCheckBackup()) && backup_commands_pb.CheckBackupResponse.toObject(includeInstance, f),\n    performAttestation: (f = msg.getPerformAttestation()) && perform_attestation_pb.PerformAttestationResponse.toObject(includeInstance, f),\n    checkSdcard: (f = msg.getCheckSdcard()) && bitbox02_system_pb.CheckSDCardResponse.toObject(includeInstance, f),\n    eth: (f = msg.getEth()) && eth_pb.ETHResponse.toObject(includeInstance, f),\n    fingerprint: (f = msg.getFingerprint()) && common_pb.RootFingerprintResponse.toObject(includeInstance, f),\n    btc: (f = msg.getBtc()) && btc_pb.BTCResponse.toObject(includeInstance, f),\n    electrumEncryptionKey: (f = msg.getElectrumEncryptionKey()) && keystore_pb.ElectrumEncryptionKeyResponse.toObject(includeInstance, f),\n    cardano: (f = msg.getCardano()) && cardano_pb.CardanoResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.Response}\n */\nproto.shiftcrypto.bitbox02.Response.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.Response;\n  return proto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.Response} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.Response}\n */\nproto.shiftcrypto.bitbox02.Response.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.shiftcrypto.bitbox02.Success;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.Success.deserializeBinaryFromReader);\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value = new proto.shiftcrypto.bitbox02.Error;\n      reader.readMessage(value,proto.shiftcrypto.bitbox02.Error.deserializeBinaryFromReader);\n      msg.setError(value);\n      break;\n    case 4:\n      var value = new bitbox02_system_pb.DeviceInfoResponse;\n      reader.readMessage(value,bitbox02_system_pb.DeviceInfoResponse.deserializeBinaryFromReader);\n      msg.setDeviceInfo(value);\n      break;\n    case 5:\n      var value = new common_pb.PubResponse;\n      reader.readMessage(value,common_pb.PubResponse.deserializeBinaryFromReader);\n      msg.setPub(value);\n      break;\n    case 6:\n      var value = new btc_pb.BTCSignNextResponse;\n      reader.readMessage(value,btc_pb.BTCSignNextResponse.deserializeBinaryFromReader);\n      msg.setBtcSignNext(value);\n      break;\n    case 7:\n      var value = new backup_commands_pb.ListBackupsResponse;\n      reader.readMessage(value,backup_commands_pb.ListBackupsResponse.deserializeBinaryFromReader);\n      msg.setListBackups(value);\n      break;\n    case 8:\n      var value = new backup_commands_pb.CheckBackupResponse;\n      reader.readMessage(value,backup_commands_pb.CheckBackupResponse.deserializeBinaryFromReader);\n      msg.setCheckBackup(value);\n      break;\n    case 9:\n      var value = new perform_attestation_pb.PerformAttestationResponse;\n      reader.readMessage(value,perform_attestation_pb.PerformAttestationResponse.deserializeBinaryFromReader);\n      msg.setPerformAttestation(value);\n      break;\n    case 10:\n      var value = new bitbox02_system_pb.CheckSDCardResponse;\n      reader.readMessage(value,bitbox02_system_pb.CheckSDCardResponse.deserializeBinaryFromReader);\n      msg.setCheckSdcard(value);\n      break;\n    case 11:\n      var value = new eth_pb.ETHResponse;\n      reader.readMessage(value,eth_pb.ETHResponse.deserializeBinaryFromReader);\n      msg.setEth(value);\n      break;\n    case 12:\n      var value = new common_pb.RootFingerprintResponse;\n      reader.readMessage(value,common_pb.RootFingerprintResponse.deserializeBinaryFromReader);\n      msg.setFingerprint(value);\n      break;\n    case 13:\n      var value = new btc_pb.BTCResponse;\n      reader.readMessage(value,btc_pb.BTCResponse.deserializeBinaryFromReader);\n      msg.setBtc(value);\n      break;\n    case 14:\n      var value = new keystore_pb.ElectrumEncryptionKeyResponse;\n      reader.readMessage(value,keystore_pb.ElectrumEncryptionKeyResponse.deserializeBinaryFromReader);\n      msg.setElectrumEncryptionKey(value);\n      break;\n    case 15:\n      var value = new cardano_pb.CardanoResponse;\n      reader.readMessage(value,cardano_pb.CardanoResponse.deserializeBinaryFromReader);\n      msg.setCardano(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.Response} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.Response.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSuccess();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.shiftcrypto.bitbox02.Success.serializeBinaryToWriter\n    );\n  }\n  f = message.getError();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.shiftcrypto.bitbox02.Error.serializeBinaryToWriter\n    );\n  }\n  f = message.getDeviceInfo();\n  if (f != null) {\n    writer.writeMessage(\n      4,\n      f,\n      bitbox02_system_pb.DeviceInfoResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPub();\n  if (f != null) {\n    writer.writeMessage(\n      5,\n      f,\n      common_pb.PubResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtcSignNext();\n  if (f != null) {\n    writer.writeMessage(\n      6,\n      f,\n      btc_pb.BTCSignNextResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getListBackups();\n  if (f != null) {\n    writer.writeMessage(\n      7,\n      f,\n      backup_commands_pb.ListBackupsResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckBackup();\n  if (f != null) {\n    writer.writeMessage(\n      8,\n      f,\n      backup_commands_pb.CheckBackupResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getPerformAttestation();\n  if (f != null) {\n    writer.writeMessage(\n      9,\n      f,\n      perform_attestation_pb.PerformAttestationResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCheckSdcard();\n  if (f != null) {\n    writer.writeMessage(\n      10,\n      f,\n      bitbox02_system_pb.CheckSDCardResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getEth();\n  if (f != null) {\n    writer.writeMessage(\n      11,\n      f,\n      eth_pb.ETHResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getFingerprint();\n  if (f != null) {\n    writer.writeMessage(\n      12,\n      f,\n      common_pb.RootFingerprintResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getBtc();\n  if (f != null) {\n    writer.writeMessage(\n      13,\n      f,\n      btc_pb.BTCResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getElectrumEncryptionKey();\n  if (f != null) {\n    writer.writeMessage(\n      14,\n      f,\n      keystore_pb.ElectrumEncryptionKeyResponse.serializeBinaryToWriter\n    );\n  }\n  f = message.getCardano();\n  if (f != null) {\n    writer.writeMessage(\n      15,\n      f,\n      cardano_pb.CardanoResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional Success success = 1;\n * @return {?proto.shiftcrypto.bitbox02.Success}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getSuccess = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Success} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Success, 1));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Success|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setSuccess = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 1, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearSuccess = function() {\n  return this.setSuccess(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasSuccess = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional Error error = 2;\n * @return {?proto.shiftcrypto.bitbox02.Error}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getError = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.Error} */ (\n    jspb.Message.getWrapperField(this, proto.shiftcrypto.bitbox02.Error, 2));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.Error|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setError = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearError = function() {\n  return this.setError(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasError = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional DeviceInfoResponse device_info = 4;\n * @return {?proto.shiftcrypto.bitbox02.DeviceInfoResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getDeviceInfo = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.DeviceInfoResponse} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.DeviceInfoResponse, 4));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.DeviceInfoResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setDeviceInfo = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 4, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearDeviceInfo = function() {\n  return this.setDeviceInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasDeviceInfo = function() {\n  return jspb.Message.getField(this, 4) != null;\n};\n\n\n/**\n * optional PubResponse pub = 5;\n * @return {?proto.shiftcrypto.bitbox02.PubResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getPub = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PubResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.PubResponse, 5));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PubResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setPub = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 5, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearPub = function() {\n  return this.setPub(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasPub = function() {\n  return jspb.Message.getField(this, 5) != null;\n};\n\n\n/**\n * optional BTCSignNextResponse btc_sign_next = 6;\n * @return {?proto.shiftcrypto.bitbox02.BTCSignNextResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getBtcSignNext = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCSignNextResponse} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCSignNextResponse, 6));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCSignNextResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setBtcSignNext = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 6, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearBtcSignNext = function() {\n  return this.setBtcSignNext(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasBtcSignNext = function() {\n  return jspb.Message.getField(this, 6) != null;\n};\n\n\n/**\n * optional ListBackupsResponse list_backups = 7;\n * @return {?proto.shiftcrypto.bitbox02.ListBackupsResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getListBackups = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ListBackupsResponse} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.ListBackupsResponse, 7));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ListBackupsResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setListBackups = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 7, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearListBackups = function() {\n  return this.setListBackups(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasListBackups = function() {\n  return jspb.Message.getField(this, 7) != null;\n};\n\n\n/**\n * optional CheckBackupResponse check_backup = 8;\n * @return {?proto.shiftcrypto.bitbox02.CheckBackupResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCheckBackup = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckBackupResponse} */ (\n    jspb.Message.getWrapperField(this, backup_commands_pb.CheckBackupResponse, 8));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckBackupResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCheckBackup = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 8, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCheckBackup = function() {\n  return this.setCheckBackup(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCheckBackup = function() {\n  return jspb.Message.getField(this, 8) != null;\n};\n\n\n/**\n * optional PerformAttestationResponse perform_attestation = 9;\n * @return {?proto.shiftcrypto.bitbox02.PerformAttestationResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getPerformAttestation = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.PerformAttestationResponse} */ (\n    jspb.Message.getWrapperField(this, perform_attestation_pb.PerformAttestationResponse, 9));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.PerformAttestationResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setPerformAttestation = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 9, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearPerformAttestation = function() {\n  return this.setPerformAttestation(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasPerformAttestation = function() {\n  return jspb.Message.getField(this, 9) != null;\n};\n\n\n/**\n * optional CheckSDCardResponse check_sdcard = 10;\n * @return {?proto.shiftcrypto.bitbox02.CheckSDCardResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCheckSdcard = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CheckSDCardResponse} */ (\n    jspb.Message.getWrapperField(this, bitbox02_system_pb.CheckSDCardResponse, 10));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CheckSDCardResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCheckSdcard = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 10, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCheckSdcard = function() {\n  return this.setCheckSdcard(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCheckSdcard = function() {\n  return jspb.Message.getField(this, 10) != null;\n};\n\n\n/**\n * optional ETHResponse eth = 11;\n * @return {?proto.shiftcrypto.bitbox02.ETHResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getEth = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ETHResponse} */ (\n    jspb.Message.getWrapperField(this, eth_pb.ETHResponse, 11));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ETHResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setEth = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 11, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearEth = function() {\n  return this.setEth(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasEth = function() {\n  return jspb.Message.getField(this, 11) != null;\n};\n\n\n/**\n * optional RootFingerprintResponse fingerprint = 12;\n * @return {?proto.shiftcrypto.bitbox02.RootFingerprintResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getFingerprint = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.RootFingerprintResponse} */ (\n    jspb.Message.getWrapperField(this, common_pb.RootFingerprintResponse, 12));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.RootFingerprintResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setFingerprint = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 12, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearFingerprint = function() {\n  return this.setFingerprint(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasFingerprint = function() {\n  return jspb.Message.getField(this, 12) != null;\n};\n\n\n/**\n * optional BTCResponse btc = 13;\n * @return {?proto.shiftcrypto.bitbox02.BTCResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getBtc = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.BTCResponse} */ (\n    jspb.Message.getWrapperField(this, btc_pb.BTCResponse, 13));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.BTCResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setBtc = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 13, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearBtc = function() {\n  return this.setBtc(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasBtc = function() {\n  return jspb.Message.getField(this, 13) != null;\n};\n\n\n/**\n * optional ElectrumEncryptionKeyResponse electrum_encryption_key = 14;\n * @return {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getElectrumEncryptionKey = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse} */ (\n    jspb.Message.getWrapperField(this, keystore_pb.ElectrumEncryptionKeyResponse, 14));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setElectrumEncryptionKey = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 14, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearElectrumEncryptionKey = function() {\n  return this.setElectrumEncryptionKey(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasElectrumEncryptionKey = function() {\n  return jspb.Message.getField(this, 14) != null;\n};\n\n\n/**\n * optional CardanoResponse cardano = 15;\n * @return {?proto.shiftcrypto.bitbox02.CardanoResponse}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.getCardano = function() {\n  return /** @type{?proto.shiftcrypto.bitbox02.CardanoResponse} */ (\n    jspb.Message.getWrapperField(this, cardano_pb.CardanoResponse, 15));\n};\n\n\n/**\n * @param {?proto.shiftcrypto.bitbox02.CardanoResponse|undefined} value\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n*/\nproto.shiftcrypto.bitbox02.Response.prototype.setCardano = function(value) {\n  return jspb.Message.setOneofWrapperField(this, 15, proto.shiftcrypto.bitbox02.Response.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.shiftcrypto.bitbox02.Response} returns this\n */\nproto.shiftcrypto.bitbox02.Response.prototype.clearCardano = function() {\n  return this.setCardano(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.shiftcrypto.bitbox02.Response.prototype.hasCardano = function() {\n  return jspb.Message.getField(this, 15) != null;\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n","// source: antiklepto.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() {\n  if (this) { return this; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  if (typeof self !== 'undefined') { return self; }\n  return Function('return this')();\n}.call(null));\n\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest', null, global);\ngoog.exportSymbol('proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.displayName = 'proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    commitment: msg.getCommitment_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment;\n  return proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCommitment_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes commitment = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCommitment()));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.getCommitment_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCommitment()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment.prototype.setCommitment = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    commitment: msg.getCommitment_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment;\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setCommitment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCommitment_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes commitment = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getCommitment()));\n};\n\n\n/**\n * optional bytes commitment = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getCommitment()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.getCommitment_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getCommitment()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignerCommitment.prototype.setCommitment = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    hostNonce: msg.getHostNonce_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest;\n  return proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setHostNonce(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getHostNonce_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * This is a type-conversion wrapper around `getHostNonce()`\n * @return {string}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getHostNonce()));\n};\n\n\n/**\n * optional bytes host_nonce = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getHostNonce()`\n * @return {!Uint8Array}\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.getHostNonce_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getHostNonce()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest} returns this\n */\nproto.shiftcrypto.bitbox02.AntiKleptoSignatureRequest.prototype.setHostNonce = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.shiftcrypto.bitbox02);\n"],"sourceRoot":""}